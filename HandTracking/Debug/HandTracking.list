
HandTracking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a84  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015958  08009c54  08009c54  0000ac54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f5ac  0801f5ac  00021080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801f5ac  0801f5ac  000205ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f5b4  0801f5b4  00021080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f5b4  0801f5b4  000205b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f5b8  0801f5b8  000205b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0801f5bc  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ce4  20000080  0801f63c  00021080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d64  0801f63c  00021d64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001419c  00000000  00000000  000210b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d46  00000000  00000000  0003524c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00037f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e58  00000000  00000000  000391d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246a2  00000000  00000000  0003a028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189a7  00000000  00000000  0005e6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d81ac  00000000  00000000  00077071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f21d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054f8  00000000  00000000  0014f260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  00154758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009c3c 	.word	0x08009c3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08009c3c 	.word	0x08009c3c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f002 fdad 	bl	8003140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f867 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f9f3 	bl	80009d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 f9c7 	bl	8000980 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005f2:	f000 f8cf 	bl	8000794 <MX_I2C1_Init>
  MX_TIM2_Init();
 80005f6:	f000 f8fb 	bl	80007f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005fa:	f000 f95d 	bl	80008b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK) {
 80005fe:	2100      	movs	r1, #0
 8000600:	4826      	ldr	r0, [pc, #152]	@ (800069c <main+0xc0>)
 8000602:	f006 fca5 	bl	8006f50 <HAL_TIM_PWM_Start>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <main+0x34>
	  HardFault_Handler();
 800060c:	f000 fc46 	bl	8000e9c <HardFault_Handler>
  };

  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK) {
 8000610:	2104      	movs	r1, #4
 8000612:	4822      	ldr	r0, [pc, #136]	@ (800069c <main+0xc0>)
 8000614:	f006 fc9c 	bl	8006f50 <HAL_TIM_PWM_Start>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <main+0x46>
	  HardFault_Handler();
 800061e:	f000 fc3d 	bl	8000e9c <HardFault_Handler>
  };

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK) {
 8000622:	2100      	movs	r1, #0
 8000624:	481e      	ldr	r0, [pc, #120]	@ (80006a0 <main+0xc4>)
 8000626:	f006 fc93 	bl	8006f50 <HAL_TIM_PWM_Start>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <main+0x58>
	  HardFault_Handler();
 8000630:	f000 fc34 	bl	8000e9c <HardFault_Handler>
  };

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK) {
 8000634:	2104      	movs	r1, #4
 8000636:	481a      	ldr	r0, [pc, #104]	@ (80006a0 <main+0xc4>)
 8000638:	f006 fc8a 	bl	8006f50 <HAL_TIM_PWM_Start>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <main+0x6a>
	  HardFault_Handler();
 8000642:	f000 fc2b 	bl	8000e9c <HardFault_Handler>
  };


  Tof_init();
 8000646:	f007 fd27 	bl	8008098 <Tof_init>
  Tof_conf();
 800064a:	f007 fd7f 	bl	800814c <Tof_conf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
  {
	  if (tof_data_ready && ready == 1) {
 800064e:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <main+0xc8>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d0fb      	beq.n	800064e <main+0x72>
 8000656:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <main+0xcc>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d1f7      	bne.n	800064e <main+0x72>
	      tof_data_ready = 0;   // consumo l’evento
 800065e:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <main+0xc8>)
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
	      uint8_t isReady;
	      if (vl53l5cx_check_data_ready(&p_dev, &isReady) == VL53L5CX_STATUS_OK && isReady) {
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	4619      	mov	r1, r3
 8000668:	4810      	ldr	r0, [pc, #64]	@ (80006ac <main+0xd0>)
 800066a:	f001 ff99 	bl	80025a0 <vl53l5cx_check_data_ready>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1ec      	bne.n	800064e <main+0x72>
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0e9      	beq.n	800064e <main+0x72>

	    	  if (vl53l5cx_get_ranging_data(&p_dev, &results) != VL53L5CX_STATUS_OK) {
 800067a:	490d      	ldr	r1, [pc, #52]	@ (80006b0 <main+0xd4>)
 800067c:	480b      	ldr	r0, [pc, #44]	@ (80006ac <main+0xd0>)
 800067e:	f001 ffe1 	bl	8002644 <vl53l5cx_get_ranging_data>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d005      	beq.n	8000694 <main+0xb8>
				  printf ("errore GetRanging\n");
 8000688:	480a      	ldr	r0, [pc, #40]	@ (80006b4 <main+0xd8>)
 800068a:	f008 fc67 	bl	8008f5c <puts>
				  HardFault_Handler();
 800068e:	f000 fc05 	bl	8000e9c <HardFault_Handler>
 8000692:	e7dc      	b.n	800064e <main+0x72>

	    	  } else {
				  feedbackcontroll();
 8000694:	f007 fdf4 	bl	8008280 <feedbackcontroll>
	  if (tof_data_ready && ready == 1) {
 8000698:	e7d9      	b.n	800064e <main+0x72>
 800069a:	bf00      	nop
 800069c:	200000f0 	.word	0x200000f0
 80006a0:	20000138 	.word	0x20000138
 80006a4:	200001c8 	.word	0x200001c8
 80006a8:	20000bfd 	.word	0x20000bfd
 80006ac:	200001d8 	.word	0x200001d8
 80006b0:	20000aec 	.word	0x20000aec
 80006b4:	08009c54 	.word	0x08009c54

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	@ 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	2234      	movs	r2, #52	@ 0x34
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f008 fd28 	bl	800911c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b2a      	ldr	r3, [pc, #168]	@ (800078c <SystemClock_Config+0xd4>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	4a29      	ldr	r2, [pc, #164]	@ (800078c <SystemClock_Config+0xd4>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ec:	4b27      	ldr	r3, [pc, #156]	@ (800078c <SystemClock_Config+0xd4>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <SystemClock_Config+0xd8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000704:	4a22      	ldr	r2, [pc, #136]	@ (8000790 <SystemClock_Config+0xd8>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <SystemClock_Config+0xd8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800072c:	2310      	movs	r3, #16
 800072e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000730:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000734:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000736:	2304      	movs	r3, #4
 8000738:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073e:	2302      	movs	r3, #2
 8000740:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4618      	mov	r0, r3
 8000748:	f006 f914 	bl	8006974 <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000752:	f000 fa2d 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	2102      	movs	r1, #2
 8000772:	4618      	mov	r0, r3
 8000774:	f005 fdb4 	bl	80062e0 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800077e:	f000 fa17 	bl	8000bb0 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	@ 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <MX_I2C1_Init+0x50>)
 800079a:	4a13      	ldr	r2, [pc, #76]	@ (80007e8 <MX_I2C1_Init+0x54>)
 800079c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007a0:	4a12      	ldr	r2, [pc, #72]	@ (80007ec <MX_I2C1_Init+0x58>)
 80007a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c4:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ca:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d0:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <MX_I2C1_Init+0x50>)
 80007d2:	f003 f853 	bl	800387c <HAL_I2C_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007dc:	f000 f9e8 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	2000009c 	.word	0x2000009c
 80007e8:	40005400 	.word	0x40005400
 80007ec:	00061a80 	.word	0x00061a80

080007f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	@ 0x28
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
 800080e:	615a      	str	r2, [r3, #20]
 8000810:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000812:	4b28      	ldr	r3, [pc, #160]	@ (80008b4 <MX_TIM2_Init+0xc4>)
 8000814:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000818:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <MX_TIM2_Init+0xc4>)
 800081c:	2201      	movs	r2, #1
 800081e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000820:	4b24      	ldr	r3, [pc, #144]	@ (80008b4 <MX_TIM2_Init+0xc4>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1679;
 8000826:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <MX_TIM2_Init+0xc4>)
 8000828:	f240 628f 	movw	r2, #1679	@ 0x68f
 800082c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082e:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <MX_TIM2_Init+0xc4>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000834:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <MX_TIM2_Init+0xc4>)
 8000836:	2280      	movs	r2, #128	@ 0x80
 8000838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800083a:	481e      	ldr	r0, [pc, #120]	@ (80008b4 <MX_TIM2_Init+0xc4>)
 800083c:	f006 fb38 	bl	8006eb0 <HAL_TIM_PWM_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000846:	f000 f9b3 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000852:	f107 0320 	add.w	r3, r7, #32
 8000856:	4619      	mov	r1, r3
 8000858:	4816      	ldr	r0, [pc, #88]	@ (80008b4 <MX_TIM2_Init+0xc4>)
 800085a:	f007 f8a1 	bl	80079a0 <HAL_TIMEx_MasterConfigSynchronization>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000864:	f000 f9a4 	bl	8000bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000868:	2360      	movs	r3, #96	@ 0x60
 800086a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2200      	movs	r2, #0
 800087c:	4619      	mov	r1, r3
 800087e:	480d      	ldr	r0, [pc, #52]	@ (80008b4 <MX_TIM2_Init+0xc4>)
 8000880:	f006 fd1e 	bl	80072c0 <HAL_TIM_PWM_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800088a:	f000 f991 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2204      	movs	r2, #4
 8000892:	4619      	mov	r1, r3
 8000894:	4807      	ldr	r0, [pc, #28]	@ (80008b4 <MX_TIM2_Init+0xc4>)
 8000896:	f006 fd13 	bl	80072c0 <HAL_TIM_PWM_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008a0:	f000 f986 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008a4:	4803      	ldr	r0, [pc, #12]	@ (80008b4 <MX_TIM2_Init+0xc4>)
 80008a6:	f000 fa4d 	bl	8000d44 <HAL_TIM_MspPostInit>

}
 80008aa:	bf00      	nop
 80008ac:	3728      	adds	r7, #40	@ 0x28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200000f0 	.word	0x200000f0

080008b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	@ 0x28
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
 80008d6:	615a      	str	r2, [r3, #20]
 80008d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008da:	4b27      	ldr	r3, [pc, #156]	@ (8000978 <MX_TIM3_Init+0xc0>)
 80008dc:	4a27      	ldr	r2, [pc, #156]	@ (800097c <MX_TIM3_Init+0xc4>)
 80008de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80008e0:	4b25      	ldr	r3, [pc, #148]	@ (8000978 <MX_TIM3_Init+0xc0>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e6:	4b24      	ldr	r3, [pc, #144]	@ (8000978 <MX_TIM3_Init+0xc0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1679;
 80008ec:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <MX_TIM3_Init+0xc0>)
 80008ee:	f240 628f 	movw	r2, #1679	@ 0x68f
 80008f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f4:	4b20      	ldr	r3, [pc, #128]	@ (8000978 <MX_TIM3_Init+0xc0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <MX_TIM3_Init+0xc0>)
 80008fc:	2280      	movs	r2, #128	@ 0x80
 80008fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000900:	481d      	ldr	r0, [pc, #116]	@ (8000978 <MX_TIM3_Init+0xc0>)
 8000902:	f006 fad5 	bl	8006eb0 <HAL_TIM_PWM_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800090c:	f000 f950 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000918:	f107 0320 	add.w	r3, r7, #32
 800091c:	4619      	mov	r1, r3
 800091e:	4816      	ldr	r0, [pc, #88]	@ (8000978 <MX_TIM3_Init+0xc0>)
 8000920:	f007 f83e 	bl	80079a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800092a:	f000 f941 	bl	8000bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800092e:	2360      	movs	r3, #96	@ 0x60
 8000930:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	4619      	mov	r1, r3
 8000944:	480c      	ldr	r0, [pc, #48]	@ (8000978 <MX_TIM3_Init+0xc0>)
 8000946:	f006 fcbb 	bl	80072c0 <HAL_TIM_PWM_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000950:	f000 f92e 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2204      	movs	r2, #4
 8000958:	4619      	mov	r1, r3
 800095a:	4807      	ldr	r0, [pc, #28]	@ (8000978 <MX_TIM3_Init+0xc0>)
 800095c:	f006 fcb0 	bl	80072c0 <HAL_TIM_PWM_ConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000966:	f000 f923 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800096a:	4803      	ldr	r0, [pc, #12]	@ (8000978 <MX_TIM3_Init+0xc0>)
 800096c:	f000 f9ea 	bl	8000d44 <HAL_TIM_MspPostInit>

}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	@ 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000138 	.word	0x20000138
 800097c:	40000400 	.word	0x40000400

08000980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000984:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	@ (80009d0 <MX_USART2_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_USART2_UART_Init+0x4c>)
 80009b8:	f007 f882 	bl	8007ac0 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f000 f8f5 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000180 	.word	0x20000180
 80009d0:	40004400 	.word	0x40004400

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	@ 0x28
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b5d      	ldr	r3, [pc, #372]	@ (8000b64 <MX_GPIO_Init+0x190>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a5c      	ldr	r2, [pc, #368]	@ (8000b64 <MX_GPIO_Init+0x190>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b5a      	ldr	r3, [pc, #360]	@ (8000b64 <MX_GPIO_Init+0x190>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b56      	ldr	r3, [pc, #344]	@ (8000b64 <MX_GPIO_Init+0x190>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a55      	ldr	r2, [pc, #340]	@ (8000b64 <MX_GPIO_Init+0x190>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b53      	ldr	r3, [pc, #332]	@ (8000b64 <MX_GPIO_Init+0x190>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b4f      	ldr	r3, [pc, #316]	@ (8000b64 <MX_GPIO_Init+0x190>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a4e      	ldr	r2, [pc, #312]	@ (8000b64 <MX_GPIO_Init+0x190>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b4c      	ldr	r3, [pc, #304]	@ (8000b64 <MX_GPIO_Init+0x190>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b48      	ldr	r3, [pc, #288]	@ (8000b64 <MX_GPIO_Init+0x190>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a47      	ldr	r2, [pc, #284]	@ (8000b64 <MX_GPIO_Init+0x190>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b45      	ldr	r3, [pc, #276]	@ (8000b64 <MX_GPIO_Init+0x190>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENB_GPIO_Port, ENB_Pin, GPIO_PIN_SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	4842      	ldr	r0, [pc, #264]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a60:	f002 feda 	bl	8003818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|I2C_RST_C_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8000a6a:	4840      	ldr	r0, [pc, #256]	@ (8000b6c <MX_GPIO_Init+0x198>)
 8000a6c:	f002 fed4 	bl	8003818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWR_EN_C_Pin|ENA_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8000a76:	483d      	ldr	r0, [pc, #244]	@ (8000b6c <MX_GPIO_Init+0x198>)
 8000a78:	f002 fece 	bl	8003818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LPn_C_GPIO_Port, LPn_C_Pin, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2101      	movs	r1, #1
 8000a80:	483b      	ldr	r0, [pc, #236]	@ (8000b70 <MX_GPIO_Init+0x19c>)
 8000a82:	f002 fec9 	bl	8003818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a8c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4832      	ldr	r0, [pc, #200]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000a9e:	f002 fd27 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENB_Pin */
  GPIO_InitStruct.Pin = ENB_Pin;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENB_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	482b      	ldr	r0, [pc, #172]	@ (8000b68 <MX_GPIO_Init+0x194>)
 8000aba:	f002 fd19 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_C_Pin */
  GPIO_InitStruct.Pin = INT_C_Pin;
 8000abe:	2310      	movs	r3, #16
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_C_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4826      	ldr	r0, [pc, #152]	@ (8000b6c <MX_GPIO_Init+0x198>)
 8000ad4:	f002 fd0c 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ENA_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ENA_Pin;
 8000ad8:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	481e      	ldr	r0, [pc, #120]	@ (8000b6c <MX_GPIO_Init+0x198>)
 8000af2:	f002 fcfd 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_EN_C_Pin */
  GPIO_InitStruct.Pin = PWR_EN_C_Pin;
 8000af6:	2340      	movs	r3, #64	@ 0x40
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWR_EN_C_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4817      	ldr	r0, [pc, #92]	@ (8000b6c <MX_GPIO_Init+0x198>)
 8000b0e:	f002 fcef 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LPn_C_Pin */
  GPIO_InitStruct.Pin = LPn_C_Pin;
 8000b12:	2301      	movs	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LPn_C_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4811      	ldr	r0, [pc, #68]	@ (8000b70 <MX_GPIO_Init+0x19c>)
 8000b2a:	f002 fce1 	bl	80034f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_RST_C_Pin */
  GPIO_InitStruct.Pin = I2C_RST_C_Pin;
 8000b2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(I2C_RST_C_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4809      	ldr	r0, [pc, #36]	@ (8000b6c <MX_GPIO_Init+0x198>)
 8000b48:	f002 fcd2 	bl	80034f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	200a      	movs	r0, #10
 8000b52:	f002 fc66 	bl	8003422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b56:	200a      	movs	r0, #10
 8000b58:	f002 fc7f 	bl	800345a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	@ 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020400 	.word	0x40020400

08000b74 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80fb      	strh	r3, [r7, #6]

	printf("int\n");
 8000b7e:	4809      	ldr	r0, [pc, #36]	@ (8000ba4 <HAL_GPIO_EXTI_Callback+0x30>)
 8000b80:	f008 f9ec 	bl	8008f5c <puts>

    if (GPIO_Pin == INT_C_Pin) {
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	2b10      	cmp	r3, #16
 8000b88:	d107      	bne.n	8000b9a <HAL_GPIO_EXTI_Callback+0x26>
    	tof_int_counter ++;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x34>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	4a05      	ldr	r2, [pc, #20]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x34>)
 8000b92:	6013      	str	r3, [r2, #0]
        tof_data_ready = 1;   // segnalo l’evento e basta
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <HAL_GPIO_EXTI_Callback+0x38>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	601a      	str	r2, [r3, #0]
    }
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	08009c68 	.word	0x08009c68
 8000ba8:	200001cc 	.word	0x200001cc
 8000bac:	200001c8 	.word	0x200001c8

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <Error_Handler+0x8>

08000bbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <HAL_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	4a0f      	ldr	r2, [pc, #60]	@ (8000c08 <HAL_MspInit+0x4c>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c08 <HAL_MspInit+0x4c>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <HAL_MspInit+0x4c>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	4a08      	ldr	r2, [pc, #32]	@ (8000c08 <HAL_MspInit+0x4c>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bee:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <HAL_MspInit+0x4c>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bfa:	2007      	movs	r0, #7
 8000bfc:	f002 fc06 	bl	800340c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800

08000c0c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	@ 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a21      	ldr	r2, [pc, #132]	@ (8000cb0 <HAL_I2C_MspInit+0xa4>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d13c      	bne.n	8000ca8 <HAL_I2C_MspInit+0x9c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b20      	ldr	r3, [pc, #128]	@ (8000cb4 <HAL_I2C_MspInit+0xa8>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a1f      	ldr	r2, [pc, #124]	@ (8000cb4 <HAL_I2C_MspInit+0xa8>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <HAL_I2C_MspInit+0xa8>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c50:	2312      	movs	r3, #18
 8000c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	4814      	ldr	r0, [pc, #80]	@ (8000cb8 <HAL_I2C_MspInit+0xac>)
 8000c68:	f002 fc42 	bl	80034f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <HAL_I2C_MspInit+0xa8>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c74:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb4 <HAL_I2C_MspInit+0xa8>)
 8000c76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <HAL_I2C_MspInit+0xa8>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	201f      	movs	r0, #31
 8000c8e:	f002 fbc8 	bl	8003422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c92:	201f      	movs	r0, #31
 8000c94:	f002 fbe1 	bl	800345a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2020      	movs	r0, #32
 8000c9e:	f002 fbc0 	bl	8003422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ca2:	2020      	movs	r0, #32
 8000ca4:	f002 fbd9 	bl	800345a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	@ 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40005400 	.word	0x40005400
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020400 	.word	0x40020400

08000cbc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ccc:	d116      	bne.n	8000cfc <HAL_TIM_PWM_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x80>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	4a19      	ldr	r2, [pc, #100]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x80>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cde:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x80>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	201c      	movs	r0, #28
 8000cf0:	f002 fb97 	bl	8003422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cf4:	201c      	movs	r0, #28
 8000cf6:	f002 fbb0 	bl	800345a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cfa:	e01a      	b.n	8000d32 <HAL_TIM_PWM_MspInit+0x76>
  else if(htim_pwm->Instance==TIM3)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0f      	ldr	r2, [pc, #60]	@ (8000d40 <HAL_TIM_PWM_MspInit+0x84>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d115      	bne.n	8000d32 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x80>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x80>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x80>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	201d      	movs	r0, #29
 8000d28:	f002 fb7b 	bl	8003422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d2c:	201d      	movs	r0, #29
 8000d2e:	f002 fb94 	bl	800345a <HAL_NVIC_EnableIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40000400 	.word	0x40000400

08000d44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	@ 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d64:	d11e      	bne.n	8000da4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b22      	ldr	r3, [pc, #136]	@ (8000df4 <HAL_TIM_MspPostInit+0xb0>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a21      	ldr	r2, [pc, #132]	@ (8000df4 <HAL_TIM_MspPostInit+0xb0>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <HAL_TIM_MspPostInit+0xb0>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d82:	2303      	movs	r3, #3
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d92:	2301      	movs	r3, #1
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4816      	ldr	r0, [pc, #88]	@ (8000df8 <HAL_TIM_MspPostInit+0xb4>)
 8000d9e:	f002 fba7 	bl	80034f0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000da2:	e022      	b.n	8000dea <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a14      	ldr	r2, [pc, #80]	@ (8000dfc <HAL_TIM_MspPostInit+0xb8>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d11d      	bne.n	8000dea <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <HAL_TIM_MspPostInit+0xb0>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a0f      	ldr	r2, [pc, #60]	@ (8000df4 <HAL_TIM_MspPostInit+0xb0>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <HAL_TIM_MspPostInit+0xb0>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dca:	2330      	movs	r3, #48	@ 0x30
 8000dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4806      	ldr	r0, [pc, #24]	@ (8000e00 <HAL_TIM_MspPostInit+0xbc>)
 8000de6:	f002 fb83 	bl	80034f0 <HAL_GPIO_Init>
}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	@ 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	40000400 	.word	0x40000400
 8000e00:	40020400 	.word	0x40020400

08000e04 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	@ 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a19      	ldr	r2, [pc, #100]	@ (8000e88 <HAL_UART_MspInit+0x84>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d12b      	bne.n	8000e7e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <HAL_UART_MspInit+0x88>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	4a17      	ldr	r2, [pc, #92]	@ (8000e8c <HAL_UART_MspInit+0x88>)
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e36:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <HAL_UART_MspInit+0x88>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <HAL_UART_MspInit+0x88>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a10      	ldr	r2, [pc, #64]	@ (8000e8c <HAL_UART_MspInit+0x88>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <HAL_UART_MspInit+0x88>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e5e:	230c      	movs	r3, #12
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e6e:	2307      	movs	r3, #7
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <HAL_UART_MspInit+0x8c>)
 8000e7a:	f002 fb39 	bl	80034f0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	@ 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40004400 	.word	0x40004400
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020000 	.word	0x40020000

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <NMI_Handler+0x4>

08000e9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000ebc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eea:	f002 f97b 	bl	80031e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_C_Pin);
 8000ef6:	2010      	movs	r0, #16
 8000ef8:	f002 fca8 	bl	800384c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <TIM2_IRQHandler+0x10>)
 8000f06:	f006 f8eb 	bl	80070e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200000f0 	.word	0x200000f0

08000f14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f18:	4802      	ldr	r0, [pc, #8]	@ (8000f24 <TIM3_IRQHandler+0x10>)
 8000f1a:	f006 f8e1 	bl	80070e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000138 	.word	0x20000138

08000f28 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f2c:	4802      	ldr	r0, [pc, #8]	@ (8000f38 <I2C1_EV_IRQHandler+0x10>)
 8000f2e:	f003 f92b 	bl	8004188 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000009c 	.word	0x2000009c

08000f3c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f40:	4802      	ldr	r0, [pc, #8]	@ (8000f4c <I2C1_ER_IRQHandler+0x10>)
 8000f42:	f003 fa92 	bl	800446a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000009c 	.word	0x2000009c

08000f50 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f58:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f5c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d013      	beq.n	8000f90 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f68:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f6c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f70:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00b      	beq.n	8000f90 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f78:	e000      	b.n	8000f7c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f7a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f7c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0f9      	beq.n	8000f7a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f86:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f90:	687b      	ldr	r3, [r7, #4]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	e00a      	b.n	8000fc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fb0:	f3af 8000 	nop.w
 8000fb4:	4601      	mov	r1, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	60ba      	str	r2, [r7, #8]
 8000fbc:	b2ca      	uxtb	r2, r1
 8000fbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	dbf0      	blt.n	8000fb0 <_read+0x12>
  }

  return len;
 8000fce:	687b      	ldr	r3, [r7, #4]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  //(void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	e009      	b.n	8000ffe <_write+0x26>
  {
    //__io_putchar(*ptr++);
	ITM_SendChar(*ptr++);
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	1c5a      	adds	r2, r3, #1
 8000fee:	60ba      	str	r2, [r7, #8]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ffac 	bl	8000f50 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	429a      	cmp	r2, r3
 8001004:	dbf1      	blt.n	8000fea <_write+0x12>
  }
  return len;
 8001006:	687b      	ldr	r3, [r7, #4]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_close>:

int _close(int file)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001038:	605a      	str	r2, [r3, #4]
  return 0;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_isatty>:

int _isatty(int file)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001050:	2301      	movs	r3, #1
}
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800105e:	b480      	push	{r7}
 8001060:	b085      	sub	sp, #20
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001080:	4a14      	ldr	r2, [pc, #80]	@ (80010d4 <_sbrk+0x5c>)
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <_sbrk+0x60>)
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800108c:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <_sbrk+0x64>)
 8001096:	4a12      	ldr	r2, [pc, #72]	@ (80010e0 <_sbrk+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109a:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d207      	bcs.n	80010b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a8:	f008 f886 	bl	80091b8 <__errno>
 80010ac:	4603      	mov	r3, r0
 80010ae:	220c      	movs	r2, #12
 80010b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	e009      	b.n	80010cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010be:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a05      	ldr	r2, [pc, #20]	@ (80010dc <_sbrk+0x64>)
 80010c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20020000 	.word	0x20020000
 80010d8:	00000400 	.word	0x00000400
 80010dc:	200001d0 	.word	0x200001d0
 80010e0:	20000d68 	.word	0x20000d68

080010e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <SystemInit+0x20>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ee:	4a05      	ldr	r2, [pc, #20]	@ (8001104 <SystemInit+0x20>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001108:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001140 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800110c:	f7ff ffea 	bl	80010e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001110:	480c      	ldr	r0, [pc, #48]	@ (8001144 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001112:	490d      	ldr	r1, [pc, #52]	@ (8001148 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001114:	4a0d      	ldr	r2, [pc, #52]	@ (800114c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001128:	4c0a      	ldr	r4, [pc, #40]	@ (8001154 <LoopFillZerobss+0x22>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001136:	f008 f845 	bl	80091c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113a:	f7ff fa4f 	bl	80005dc <main>
  bx  lr    
 800113e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001140:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800114c:	0801f5bc 	.word	0x0801f5bc
  ldr r2, =_sbss
 8001150:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001154:	20000d64 	.word	0x20000d64

08001158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC_IRQHandler>

0800115a <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	4608      	mov	r0, r1
 8001164:	4611      	mov	r1, r2
 8001166:	461a      	mov	r2, r3
 8001168:	4603      	mov	r3, r0
 800116a:	70fb      	strb	r3, [r7, #3]
 800116c:	460b      	mov	r3, r1
 800116e:	70bb      	strb	r3, [r7, #2]
 8001170:	4613      	mov	r3, r2
 8001172:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	73bb      	strb	r3, [r7, #14]

	do {
		status |= VL53L5CX_RdMulti(&(p_dev->platform), address,
 800117c:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
		status |= VL53L5CX_RdMulti(&(p_dev->platform), address,
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	8839      	ldrh	r1, [r7, #0]
 8001188:	f001 ff24 	bl	8002fd4 <VL53L5CX_RdMulti>
 800118c:	4603      	mov	r3, r0
 800118e:	b25a      	sxtb	r2, r3
 8001190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001194:	4313      	orrs	r3, r2
 8001196:	b25b      	sxtb	r3, r3
 8001198:	73fb      	strb	r3, [r7, #15]
		status |= VL53L5CX_WaitMs(&(p_dev->platform), 10);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	210a      	movs	r1, #10
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 ff64 	bl	800306c <VL53L5CX_WaitMs>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b25a      	sxtb	r2, r3
 80011a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 80011b2:	7bbb      	ldrb	r3, [r7, #14]
 80011b4:	2bc7      	cmp	r3, #199	@ 0xc7
 80011b6:	d904      	bls.n	80011c2 <_vl53l5cx_poll_for_answer+0x68>
		{
			status |= (uint8_t)VL53L5CX_STATUS_TIMEOUT_ERROR;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	73fb      	strb	r3, [r7, #15]
			break;
 80011c0:	e01a      	b.n	80011f8 <_vl53l5cx_poll_for_answer+0x9e>
		}else if((size >= (uint8_t)4)
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d909      	bls.n	80011dc <_vl53l5cx_poll_for_answer+0x82>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 80011ce:	2b7e      	cmp	r3, #126	@ 0x7e
 80011d0:	d904      	bls.n	80011dc <_vl53l5cx_poll_for_answer+0x82>
		{
			status |= VL53L5CX_MCU_ERROR;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80011d8:	73fb      	strb	r3, [r7, #15]
			break;
 80011da:	e00d      	b.n	80011f8 <_vl53l5cx_poll_for_answer+0x9e>
		}
		else
		{
			timeout++;
 80011dc:	7bbb      	ldrb	r3, [r7, #14]
 80011de:	3301      	adds	r3, #1
 80011e0:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 80011e2:	78bb      	ldrb	r3, [r7, #2]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4413      	add	r3, r2
 80011e8:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 80011ec:	7e3b      	ldrb	r3, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	7f3a      	ldrb	r2, [r7, #28]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d1c1      	bne.n	800117c <_vl53l5cx_poll_for_answer+0x22>

	return status;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <_vl53l5cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l5cx_poll_for_mcu_boot(
              VL53L5CX_Configuration      *p_dev)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L5CX_STATUS_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	81bb      	strh	r3, [r7, #12]

   do {
		status |= VL53L5CX_RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f107 020b 	add.w	r2, r7, #11
 8001218:	2106      	movs	r1, #6
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fe9b 	bl	8002f56 <VL53L5CX_RdByte>
 8001220:	4603      	mov	r3, r0
 8001222:	b25a      	sxtb	r2, r3
 8001224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001228:	4313      	orrs	r3, r2
 800122a:	b25b      	sxtb	r3, r3
 800122c:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	b25b      	sxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	da12      	bge.n	800125c <_vl53l5cx_poll_for_mcu_boot+0x5a>
			status |= VL53L5CX_RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f107 020a 	add.w	r2, r7, #10
 800123c:	2107      	movs	r1, #7
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fe89 	bl	8002f56 <VL53L5CX_RdByte>
 8001244:	4603      	mov	r3, r0
 8001246:	b25a      	sxtb	r2, r3
 8001248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124c:	4313      	orrs	r3, r2
 800124e:	b25b      	sxtb	r3, r3
 8001250:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 8001252:	7aba      	ldrb	r2, [r7, #10]
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	4313      	orrs	r3, r2
 8001258:	73fb      	strb	r3, [r7, #15]
			break;
 800125a:	e012      	b.n	8001282 <_vl53l5cx_poll_for_mcu_boot+0x80>
		}
		(void)VL53L5CX_WaitMs(&(p_dev->platform), 1);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2101      	movs	r1, #1
 8001260:	4618      	mov	r0, r3
 8001262:	f001 ff03 	bl	800306c <VL53L5CX_WaitMs>
		timeout++;
 8001266:	89bb      	ldrh	r3, [r7, #12]
 8001268:	3301      	adds	r3, #1
 800126a:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 800126c:	7afb      	ldrb	r3, [r7, #11]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d104      	bne.n	8001280 <_vl53l5cx_poll_for_mcu_boot+0x7e>
			break;
		}

	}while (timeout < (uint16_t)500);
 8001276:	89bb      	ldrh	r3, [r7, #12]
 8001278:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800127c:	d3c9      	bcc.n	8001212 <_vl53l5cx_poll_for_mcu_boot+0x10>
 800127e:	e000      	b.n	8001282 <_vl53l5cx_poll_for_mcu_boot+0x80>
			break;
 8001280:	bf00      	nop

   return status;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0ea      	sub	sp, #424	@ 0x1a8
 8001290:	af02      	add	r7, sp, #8
 8001292:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001296:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800129a:	6018      	str	r0, [r3, #0]
 800129c:	460a      	mov	r2, r1
 800129e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80012a2:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 80012a6:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 80012ae:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80012b2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80012b6:	4ada      	ldr	r2, [pc, #872]	@ (8001620 <_vl53l5cx_send_offset_data+0x394>)
 80012b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012bc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 80012c0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80012c4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80012c8:	4ad6      	ldr	r2, [pc, #856]	@ (8001624 <_vl53l5cx_send_offset_data+0x398>)
 80012ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ce:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 80012d2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80012d6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 80012e0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80012e4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 80012ec:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80012f0:	4619      	mov	r1, r3
 80012f2:	f007 ff8e 	bl	8009212 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 80012f6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80012fa:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b10      	cmp	r3, #16
 8001302:	f040 8122 	bne.w	800154a <_vl53l5cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8001306:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800130a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f503 62a4 	add.w	r2, r3, #1312	@ 0x520
 8001314:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001318:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800131c:	cb03      	ldmia	r3!, {r0, r1}
 800131e:	6010      	str	r0, [r2, #0]
 8001320:	6051      	str	r1, [r2, #4]
		VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8001322:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001326:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001330:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8001334:	4618      	mov	r0, r3
 8001336:	f001 fe63 	bl	8003000 <VL53L5CX_SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 800133a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800133e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f203 514c 	addw	r1, r3, #1356	@ 0x54c
 8001348:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800134c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001350:	4618      	mov	r0, r3
 8001352:	f007 ff5e 	bl	8009212 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8001356:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800135a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f503 61ca 	add.w	r1, r3, #1616	@ 0x650
 8001364:	f107 0318 	add.w	r3, r7, #24
 8001368:	2280      	movs	r2, #128	@ 0x80
 800136a:	4618      	mov	r0, r3
 800136c:	f007 ff51 	bl	8009212 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8001370:	2300      	movs	r3, #0
 8001372:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 8001376:	e0ac      	b.n	80014d2 <_vl53l5cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8001378:	2300      	movs	r3, #0
 800137a:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 800137e:	e09c      	b.n	80014ba <_vl53l5cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8001380:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8001384:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4413      	add	r3, r2
 800138c:	005a      	lsls	r2, r3, #1
 800138e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001392:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001396:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 800139a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800139e:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	440b      	add	r3, r1
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	1c59      	adds	r1, r3, #1
 80013aa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80013ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013b6:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 80013b8:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80013bc:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	440b      	add	r3, r1
 80013c4:	3304      	adds	r3, #4
 80013c6:	0059      	lsls	r1, r3, #1
 80013c8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80013cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013d4:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 80013d6:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80013da:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	440b      	add	r3, r1
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	f103 0109 	add.w	r1, r3, #9
 80013e8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80013ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013f4:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 80013f6:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 80013fa:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	440a      	add	r2, r1
                                  /(uint32_t)4;
 8001402:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8001404:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800140c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8001410:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8001414:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	4413      	add	r3, r2
 800141c:	005a      	lsls	r2, r3, #1
 800141e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001422:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001426:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800142a:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 800142c:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8001430:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4413      	add	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001440:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001444:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001448:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 800144a:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800144e:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8001452:	00d2      	lsls	r2, r2, #3
 8001454:	440a      	add	r2, r1
 8001456:	3204      	adds	r2, #4
 8001458:	0051      	lsls	r1, r2, #1
 800145a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800145e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8001462:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8001466:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8001468:	f997 119f 	ldrsb.w	r1, [r7, #415]	@ 0x19f
 800146c:	f997 219e 	ldrsb.w	r2, [r7, #414]	@ 0x19e
 8001470:	00d2      	lsls	r2, r2, #3
 8001472:	440a      	add	r2, r1
 8001474:	0052      	lsls	r2, r2, #1
 8001476:	f102 0109 	add.w	r1, r2, #9
 800147a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800147e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8001482:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8001486:	4413      	add	r3, r2
                                  /(int16_t)4;
 8001488:	2b00      	cmp	r3, #0
 800148a:	da00      	bge.n	800148e <_vl53l5cx_send_offset_data+0x202>
 800148c:	3303      	adds	r3, #3
 800148e:	109b      	asrs	r3, r3, #2
 8001490:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8001492:	f997 219f 	ldrsb.w	r2, [r7, #415]	@ 0x19f
 8001496:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	441a      	add	r2, r3
 800149e:	b209      	sxth	r1, r1
 80014a0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80014a4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80014a8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 80014ac:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 80014ba:	f997 319f 	ldrsb.w	r3, [r7, #415]	@ 0x19f
 80014be:	2b03      	cmp	r3, #3
 80014c0:	f77f af5e 	ble.w	8001380 <_vl53l5cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 80014c4:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 80014d2:	f997 319e 	ldrsb.w	r3, [r7, #414]	@ 0x19e
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	f77f af4e 	ble.w	8001378 <_vl53l5cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 80014dc:	f107 0318 	add.w	r3, r7, #24
 80014e0:	3320      	adds	r3, #32
 80014e2:	2260      	movs	r2, #96	@ 0x60
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f007 fe18 	bl	800911c <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 80014ec:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80014f0:	3340      	adds	r3, #64	@ 0x40
 80014f2:	22c0      	movs	r2, #192	@ 0xc0
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f007 fe10 	bl	800911c <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 80014fc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001500:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f203 534c 	addw	r3, r3, #1356	@ 0x54c
 800150a:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 800150e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001512:	4618      	mov	r0, r3
 8001514:	f007 fe7d 	bl	8009212 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8001518:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800151c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 8001526:	f107 0118 	add.w	r1, r7, #24
 800152a:	2280      	movs	r2, #128	@ 0x80
 800152c:	4618      	mov	r0, r3
 800152e:	f007 fe70 	bl	8009212 <memcpy>
		range_grid, sizeof(range_grid));
            VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8001532:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001536:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001540:	f44f 71f4 	mov.w	r1, #488	@ 0x1e8
 8001544:	4618      	mov	r0, r3
 8001546:	f001 fd5b 	bl	8003000 <VL53L5CX_SwapBuffer>
	}

	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 800154a:	2300      	movs	r3, #0
 800154c:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 8001550:	e01b      	b.n	800158a <_vl53l5cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8001552:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8001556:	f103 0208 	add.w	r2, r3, #8
 800155a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800155e:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8001562:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8001566:	6809      	ldr	r1, [r1, #0]
 8001568:	440a      	add	r2, r1
 800156a:	f892 1510 	ldrb.w	r1, [r2, #1296]	@ 0x510
 800156e:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8001572:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	4413      	add	r3, r2
 800157a:	460a      	mov	r2, r1
 800157c:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8001580:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 8001584:	3301      	adds	r3, #1
 8001586:	f8a7 319c 	strh.w	r3, [r7, #412]	@ 0x19c
 800158a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	@ 0x19c
 800158e:	f5b3 7ff2 	cmp.w	r3, #484	@ 0x1e4
 8001592:	d3de      	bcc.n	8001552 <_vl53l5cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8001594:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001598:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f503 62de 	add.w	r2, r3, #1776	@ 0x6f0
 80015a2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80015a6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80015aa:	cb03      	ldmia	r3!, {r0, r1}
 80015ac:	6010      	str	r0, [r2, #0]
 80015ae:	6051      	str	r1, [r2, #4]
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 80015b0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80015b4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80015be:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 80015c8:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 80015cc:	f642 6118 	movw	r1, #11800	@ 0x2e18
 80015d0:	f001 fcea 	bl	8002fa8 <VL53L5CX_WrMulti>
 80015d4:	4603      	mov	r3, r0
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	f997 319b 	ldrsb.w	r3, [r7, #411]	@ 0x19b
 80015dc:	4313      	orrs	r3, r2
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80015e4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80015e8:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 80015ec:	2303      	movs	r3, #3
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	23ff      	movs	r3, #255	@ 0xff
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80015f8:	2201      	movs	r2, #1
 80015fa:	2104      	movs	r1, #4
 80015fc:	6800      	ldr	r0, [r0, #0]
 80015fe:	f7ff fdac 	bl	800115a <_vl53l5cx_poll_for_answer>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 800160a:	4313      	orrs	r3, r2
 800160c:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8001610:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
}
 8001614:	4618      	mov	r0, r3
 8001616:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	08009c6c 	.word	0x08009c6c
 8001624:	08009c74 	.word	0x08009c74

08001628 <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b0ca      	sub	sp, #296	@ 0x128
 800162c:	af02      	add	r7, sp, #8
 800162e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001632:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001636:	6018      	str	r0, [r3, #0]
 8001638:	460a      	mov	r2, r1
 800163a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800163e:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8001642:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 800164a:	4a9a      	ldr	r2, [pc, #616]	@ (80018b4 <_vl53l5cx_send_xtalk_data+0x28c>)
 800164c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8001650:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001654:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8001658:	4a97      	ldr	r2, [pc, #604]	@ (80018b8 <_vl53l5cx_send_xtalk_data+0x290>)
 800165a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800165e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001662:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8001666:	4b95      	ldr	r3, [pc, #596]	@ (80018bc <_vl53l5cx_send_xtalk_data+0x294>)
 8001668:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 800166c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001670:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 60a2 	add.w	r0, r3, #1296	@ 0x510
 800167a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800167e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001688:	f44f 7242 	mov.w	r2, #776	@ 0x308
 800168c:	4619      	mov	r1, r3
 800168e:	f007 fdc0 	bl	8009212 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 8001692:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001696:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b10      	cmp	r3, #16
 800169e:	f040 80d2 	bne.w	8001846 <_vl53l5cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 80016a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 80016b0:	461a      	mov	r2, r3
 80016b2:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80016b6:	cb03      	ldmia	r3!, {r0, r1}
 80016b8:	6010      	str	r0, [r2, #0]
 80016ba:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 80016bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016c0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f503 63a6 	add.w	r3, r3, #1328	@ 0x530
 80016ca:	461a      	mov	r2, r3
 80016cc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80016d0:	cb03      	ldmia	r3!, {r0, r1}
 80016d2:	6010      	str	r0, [r2, #0]
 80016d4:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 80016d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016da:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 80016e4:	f44f 7142 	mov.w	r1, #776	@ 0x308
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 fc89 	bl	8003000 <VL53L5CX_SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 80016ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f203 5144 	addw	r1, r3, #1348	@ 0x544
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001704:	4618      	mov	r0, r3
 8001706:	f007 fd84 	bl	8009212 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 800170a:	2300      	movs	r3, #0
 800170c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8001710:	e05d      	b.n	80017ce <_vl53l5cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8001712:	2300      	movs	r3, #0
 8001714:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 8001718:	e04e      	b.n	80017b8 <_vl53l5cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 800171a:	f997 211f 	ldrsb.w	r2, [r7, #287]	@ 0x11f
 800171e:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	4413      	add	r3, r2
 8001726:	005a      	lsls	r2, r3, #1
 8001728:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800172c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001730:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8001734:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8001738:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	440b      	add	r3, r1
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	1c59      	adds	r1, r3, #1
 8001744:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001748:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800174c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001750:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8001752:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8001756:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	3304      	adds	r3, #4
 8001760:	0059      	lsls	r1, r3, #1
 8001762:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001766:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800176a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800176e:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8001770:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8001774:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	440b      	add	r3, r1
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	f103 0109 	add.w	r1, r3, #9
 8001782:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001786:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800178a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800178e:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8001790:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8001794:	f997 211e 	ldrsb.w	r2, [r7, #286]	@ 0x11e
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 800179c:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800179e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017a2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80017a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 80017aa:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	3301      	adds	r3, #1
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
 80017b8:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80017bc:	2b03      	cmp	r3, #3
 80017be:	ddac      	ble.n	800171a <_vl53l5cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 80017c0:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3301      	adds	r3, #1
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80017ce:	f997 311e 	ldrsb.w	r3, [r7, #286]	@ 0x11e
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	dd9d      	ble.n	8001712 <_vl53l5cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	3340      	adds	r3, #64	@ 0x40
 80017dc:	22c0      	movs	r2, #192	@ 0xc0
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f007 fc9b 	bl	800911c <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 80017e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80017ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f203 5344 	addw	r3, r3, #1348	@ 0x544
 80017f4:	f107 0108 	add.w	r1, r7, #8
 80017f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017fc:	4618      	mov	r0, r3
 80017fe:	f007 fd08 	bl	8009212 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    VL53L5CX_SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8001802:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001806:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8001810:	f44f 7142 	mov.w	r1, #776	@ 0x308
 8001814:	4618      	mov	r0, r3
 8001816:	f001 fbf3 	bl	8003000 <VL53L5CX_SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 800181a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800181e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 8001828:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800182c:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 800182e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001832:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f503 63b1 	add.w	r3, r3, #1416	@ 0x588
 800183c:	2204      	movs	r2, #4
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f007 fc6b 	bl	800911c <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2cf8,
 8001846:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800184a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800184e:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8001850:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001854:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2cf8,
 800185e:	f44f 7342 	mov.w	r3, #776	@ 0x308
 8001862:	f642 41f8 	movw	r1, #11512	@ 0x2cf8
 8001866:	f001 fb9f 	bl	8002fa8 <VL53L5CX_WrMulti>
 800186a:	4603      	mov	r3, r0
 800186c:	b25a      	sxtb	r2, r3
 800186e:	f997 311d 	ldrsb.w	r3, [r7, #285]	@ 0x11d
 8001872:	4313      	orrs	r3, r2
 8001874:	b25b      	sxtb	r3, r3
 8001876:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800187a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800187e:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 8001882:	2303      	movs	r3, #3
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	23ff      	movs	r3, #255	@ 0xff
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800188e:	2201      	movs	r2, #1
 8001890:	2104      	movs	r1, #4
 8001892:	6800      	ldr	r0, [r0, #0]
 8001894:	f7ff fc61 	bl	800115a <_vl53l5cx_poll_for_answer>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 80018a0:	4313      	orrs	r3, r2
 80018a2:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80018a6:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	08009c7c 	.word	0x08009c7c
 80018b8:	08009c84 	.word	0x08009c84
 80018bc:	0001fca0 	.word	0x0001fca0

080018c0 <vl53l5cx_init>:
	return status;
}

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	@ 0x28
 80018c4:	af04      	add	r7, sp, #16
 80018c6:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 80018cc:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80018d0:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 80018d2:	2301      	movs	r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a97      	ldr	r2, [pc, #604]	@ (8001b38 <vl53l5cx_init+0x278>)
 80018da:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a97      	ldr	r2, [pc, #604]	@ (8001b3c <vl53l5cx_init+0x27c>)
 80018e0:	619a      	str	r2, [r3, #24]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910

	/* SW reboot sequence */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 fb43 	bl	8002f7e <VL53L5CX_WrByte>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b25a      	sxtb	r2, r3
 80018fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001900:	4313      	orrs	r3, r2
 8001902:	b25b      	sxtb	r3, r3
 8001904:	75fb      	strb	r3, [r7, #23]
	printf("status: %d\n ",status);
 8001906:	7dfb      	ldrb	r3, [r7, #23]
 8001908:	4619      	mov	r1, r3
 800190a:	488d      	ldr	r0, [pc, #564]	@ (8001b40 <vl53l5cx_init+0x280>)
 800190c:	f007 fabe 	bl	8008e8c <iprintf>
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0009, 0x04);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2204      	movs	r2, #4
 8001914:	2109      	movs	r1, #9
 8001916:	4618      	mov	r0, r3
 8001918:	f001 fb31 	bl	8002f7e <VL53L5CX_WrByte>
 800191c:	4603      	mov	r3, r0
 800191e:	b25a      	sxtb	r2, r3
 8001920:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001924:	4313      	orrs	r3, r2
 8001926:	b25b      	sxtb	r3, r3
 8001928:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2240      	movs	r2, #64	@ 0x40
 800192e:	210f      	movs	r1, #15
 8001930:	4618      	mov	r0, r3
 8001932:	f001 fb24 	bl	8002f7e <VL53L5CX_WrByte>
 8001936:	4603      	mov	r3, r0
 8001938:	b25a      	sxtb	r2, r3
 800193a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800193e:	4313      	orrs	r3, r2
 8001940:	b25b      	sxtb	r3, r3
 8001942:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000A, 0x03);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2203      	movs	r2, #3
 8001948:	210a      	movs	r1, #10
 800194a:	4618      	mov	r0, r3
 800194c:	f001 fb17 	bl	8002f7e <VL53L5CX_WrByte>
 8001950:	4603      	mov	r3, r0
 8001952:	b25a      	sxtb	r2, r3
 8001954:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001958:	4313      	orrs	r3, r2
 800195a:	b25b      	sxtb	r3, r3
 800195c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f107 0216 	add.w	r2, r7, #22
 8001964:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001968:	4618      	mov	r0, r3
 800196a:	f001 faf4 	bl	8002f56 <VL53L5CX_RdByte>
 800196e:	4603      	mov	r3, r0
 8001970:	b25a      	sxtb	r2, r3
 8001972:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001976:	4313      	orrs	r3, r2
 8001978:	b25b      	sxtb	r3, r3
 800197a:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000C, 0x01);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	210c      	movs	r1, #12
 8001982:	4618      	mov	r0, r3
 8001984:	f001 fafb 	bl	8002f7e <VL53L5CX_WrByte>
 8001988:	4603      	mov	r3, r0
 800198a:	b25a      	sxtb	r2, r3
 800198c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001990:	4313      	orrs	r3, r2
 8001992:	b25b      	sxtb	r3, r3
 8001994:	75fb      	strb	r3, [r7, #23]

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0101, 0x00);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f240 1101 	movw	r1, #257	@ 0x101
 800199e:	4618      	mov	r0, r3
 80019a0:	f001 faed 	bl	8002f7e <VL53L5CX_WrByte>
 80019a4:	4603      	mov	r3, r0
 80019a6:	b25a      	sxtb	r2, r3
 80019a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0102, 0x00);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80019ba:	4618      	mov	r0, r3
 80019bc:	f001 fadf 	bl	8002f7e <VL53L5CX_WrByte>
 80019c0:	4603      	mov	r3, r0
 80019c2:	b25a      	sxtb	r2, r3
 80019c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b25b      	sxtb	r3, r3
 80019cc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 80019d6:	4618      	mov	r0, r3
 80019d8:	f001 fad1 	bl	8002f7e <VL53L5CX_WrByte>
 80019dc:	4603      	mov	r3, r0
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f244 0102 	movw	r1, #16386	@ 0x4002
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 fac3 	bl	8002f7e <VL53L5CX_WrByte>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b25a      	sxtb	r2, r3
 80019fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	b25b      	sxtb	r3, r3
 8001a04:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f001 fab5 	bl	8002f7e <VL53L5CX_WrByte>
 8001a14:	4603      	mov	r3, r0
 8001a16:	b25a      	sxtb	r2, r3
 8001a18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b25b      	sxtb	r3, r3
 8001a20:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2203      	movs	r2, #3
 8001a26:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f001 faa7 	bl	8002f7e <VL53L5CX_WrByte>
 8001a30:	4603      	mov	r3, r0
 8001a32:	b25a      	sxtb	r2, r3
 8001a34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	b25b      	sxtb	r3, r3
 8001a3c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0103, 0x01);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f240 1103 	movw	r1, #259	@ 0x103
 8001a46:	4618      	mov	r0, r3
 8001a48:	f001 fa99 	bl	8002f7e <VL53L5CX_WrByte>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	b25a      	sxtb	r2, r3
 8001a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	b25b      	sxtb	r3, r3
 8001a58:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000C, 0x00);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	210c      	movs	r1, #12
 8001a60:	4618      	mov	r0, r3
 8001a62:	f001 fa8c 	bl	8002f7e <VL53L5CX_WrByte>
 8001a66:	4603      	mov	r3, r0
 8001a68:	b25a      	sxtb	r2, r3
 8001a6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	b25b      	sxtb	r3, r3
 8001a72:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x43);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2243      	movs	r2, #67	@ 0x43
 8001a78:	210f      	movs	r1, #15
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f001 fa7f 	bl	8002f7e <VL53L5CX_WrByte>
 8001a80:	4603      	mov	r3, r0
 8001a82:	b25a      	sxtb	r2, r3
 8001a84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WaitMs(&(p_dev->platform), 1);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2101      	movs	r1, #1
 8001a92:	4618      	mov	r0, r3
 8001a94:	f001 faea 	bl	800306c <VL53L5CX_WaitMs>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	b25a      	sxtb	r2, r3
 8001a9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b25b      	sxtb	r3, r3
 8001aa4:	75fb      	strb	r3, [r7, #23]

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000F, 0x40);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2240      	movs	r2, #64	@ 0x40
 8001aaa:	210f      	movs	r1, #15
 8001aac:	4618      	mov	r0, r3
 8001aae:	f001 fa66 	bl	8002f7e <VL53L5CX_WrByte>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	b25a      	sxtb	r2, r3
 8001ab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000A, 0x01);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	210a      	movs	r1, #10
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f001 fa59 	bl	8002f7e <VL53L5CX_WrByte>
 8001acc:	4603      	mov	r3, r0
 8001ace:	b25a      	sxtb	r2, r3
 8001ad0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	b25b      	sxtb	r3, r3
 8001ad8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WaitMs(&(p_dev->platform), 100);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2164      	movs	r1, #100	@ 0x64
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f001 fac4 	bl	800306c <VL53L5CX_WaitMs>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	b25a      	sxtb	r2, r3
 8001ae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	b25b      	sxtb	r3, r3
 8001af0:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 fa3f 	bl	8002f7e <VL53L5CX_WrByte>
 8001b00:	4603      	mov	r3, r0
 8001b02:	b25a      	sxtb	r2, r3
 8001b04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	b25b      	sxtb	r3, r3
 8001b0c:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8001b0e:	2301      	movs	r3, #1
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	23ff      	movs	r3, #255	@ 0xff
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2306      	movs	r3, #6
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff fb1c 	bl	800115a <_vl53l5cx_poll_for_answer>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	7dfb      	ldrb	r3, [r7, #23]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 83c2 	bne.w	80022b8 <vl53l5cx_init+0x9f8>
 8001b34:	e006      	b.n	8001b44 <vl53l5cx_init+0x284>
 8001b36:	bf00      	nop
 8001b38:	0801f248 	.word	0x0801f248
 8001b3c:	0801ee7c 	.word	0x0801ee7c
 8001b40:	08009c8c 	.word	0x08009c8c
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x000E, 0x01);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	210e      	movs	r1, #14
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f001 fa17 	bl	8002f7e <VL53L5CX_WrByte>
 8001b50:	4603      	mov	r3, r0
 8001b52:	b25a      	sxtb	r2, r3
 8001b54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	b25b      	sxtb	r3, r3
 8001b5c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2202      	movs	r2, #2
 8001b62:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 fa09 	bl	8002f7e <VL53L5CX_WrByte>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	b25a      	sxtb	r2, r3
 8001b70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b25b      	sxtb	r3, r3
 8001b78:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	220d      	movs	r2, #13
 8001b7e:	2103      	movs	r1, #3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f001 f9fc 	bl	8002f7e <VL53L5CX_WrByte>
 8001b86:	4603      	mov	r3, r0
 8001b88:	b25a      	sxtb	r2, r3
 8001b8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	b25b      	sxtb	r3, r3
 8001b92:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f001 f9ee 	bl	8002f7e <VL53L5CX_WrByte>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	b25a      	sxtb	r2, r3
 8001ba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	b25b      	sxtb	r3, r3
 8001bae:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8001bb0:	2310      	movs	r3, #16
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	2310      	movs	r3, #16
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2321      	movs	r3, #33	@ 0x21
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff facb 	bl	800115a <_vl53l5cx_poll_for_answer>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	7dfb      	ldrb	r3, [r7, #23]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f001 f9d1 	bl	8002f7e <VL53L5CX_WrByte>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	b25a      	sxtb	r2, r3
 8001be0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	b25b      	sxtb	r3, r3
 8001be8:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f107 0216 	add.w	r2, r7, #22
 8001bf0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f001 f9ae 	bl	8002f56 <VL53L5CX_RdByte>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	b25a      	sxtb	r2, r3
 8001bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	b25b      	sxtb	r3, r3
 8001c06:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	210c      	movs	r1, #12
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f001 f9b5 	bl	8002f7e <VL53L5CX_WrByte>
 8001c14:	4603      	mov	r3, r0
 8001c16:	b25a      	sxtb	r2, r3
 8001c18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b25b      	sxtb	r3, r3
 8001c20:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f001 f9a7 	bl	8002f7e <VL53L5CX_WrByte>
 8001c30:	4603      	mov	r3, r0
 8001c32:	b25a      	sxtb	r2, r3
 8001c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	b25b      	sxtb	r3, r3
 8001c3c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x101, 0x00);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f240 1101 	movw	r1, #257	@ 0x101
 8001c46:	4618      	mov	r0, r3
 8001c48:	f001 f999 	bl	8002f7e <VL53L5CX_WrByte>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	b25a      	sxtb	r2, r3
 8001c50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x102, 0x00);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001c62:	4618      	mov	r0, r3
 8001c64:	f001 f98b 	bl	8002f7e <VL53L5CX_WrByte>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	b25a      	sxtb	r2, r3
 8001c6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	b25b      	sxtb	r3, r3
 8001c74:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x01);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f001 f97d 	bl	8002f7e <VL53L5CX_WrByte>
 8001c84:	4603      	mov	r3, r0
 8001c86:	b25a      	sxtb	r2, r3
 8001c88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	b25b      	sxtb	r3, r3
 8001c90:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x01);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f001 f96f 	bl	8002f7e <VL53L5CX_WrByte>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	b25a      	sxtb	r2, r3
 8001ca4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	b25b      	sxtb	r3, r3
 8001cac:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x4002, 0x00);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f244 0102 	movw	r1, #16386	@ 0x4002
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f001 f961 	bl	8002f7e <VL53L5CX_WrByte>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	b25a      	sxtb	r2, r3
 8001cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b25b      	sxtb	r3, r3
 8001cc8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f001 f953 	bl	8002f7e <VL53L5CX_WrByte>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	b25a      	sxtb	r2, r3
 8001cdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	b25b      	sxtb	r3, r3
 8001ce4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x103, 0x01);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f240 1103 	movw	r1, #259	@ 0x103
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f001 f945 	bl	8002f7e <VL53L5CX_WrByte>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	b25a      	sxtb	r2, r3
 8001cf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	b25b      	sxtb	r3, r3
 8001d00:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x400F, 0x00);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f244 010f 	movw	r1, #16399	@ 0x400f
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f001 f937 	bl	8002f7e <VL53L5CX_WrByte>
 8001d10:	4603      	mov	r3, r0
 8001d12:	b25a      	sxtb	r2, r3
 8001d14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b25b      	sxtb	r3, r3
 8001d1c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x43);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2243      	movs	r2, #67	@ 0x43
 8001d22:	f240 211a 	movw	r1, #538	@ 0x21a
 8001d26:	4618      	mov	r0, r3
 8001d28:	f001 f929 	bl	8002f7e <VL53L5CX_WrByte>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	b25a      	sxtb	r2, r3
 8001d30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	b25b      	sxtb	r3, r3
 8001d38:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x03);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	f240 211a 	movw	r1, #538	@ 0x21a
 8001d42:	4618      	mov	r0, r3
 8001d44:	f001 f91b 	bl	8002f7e <VL53L5CX_WrByte>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	b25a      	sxtb	r2, r3
 8001d4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	b25b      	sxtb	r3, r3
 8001d54:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x01);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f240 211a 	movw	r1, #538	@ 0x21a
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f001 f90d 	bl	8002f7e <VL53L5CX_WrByte>
 8001d64:	4603      	mov	r3, r0
 8001d66:	b25a      	sxtb	r2, r3
 8001d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	b25b      	sxtb	r3, r3
 8001d70:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21A, 0x00);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f240 211a 	movw	r1, #538	@ 0x21a
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f001 f8ff 	bl	8002f7e <VL53L5CX_WrByte>
 8001d80:	4603      	mov	r3, r0
 8001d82:	b25a      	sxtb	r2, r3
 8001d84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b25b      	sxtb	r3, r3
 8001d8c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x219, 0x00);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f240 2119 	movw	r1, #537	@ 0x219
 8001d96:	4618      	mov	r0, r3
 8001d98:	f001 f8f1 	bl	8002f7e <VL53L5CX_WrByte>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	b25a      	sxtb	r2, r3
 8001da0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	b25b      	sxtb	r3, r3
 8001da8:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x21B, 0x00);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f240 211b 	movw	r1, #539	@ 0x21b
 8001db2:	4618      	mov	r0, r3
 8001db4:	f001 f8e3 	bl	8002f7e <VL53L5CX_WrByte>
 8001db8:	4603      	mov	r3, r0
 8001dba:	b25a      	sxtb	r2, r3
 8001dbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	b25b      	sxtb	r3, r3
 8001dc4:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 f8d5 	bl	8002f7e <VL53L5CX_WrByte>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	b25a      	sxtb	r2, r3
 8001dd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	b25b      	sxtb	r3, r3
 8001de0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f107 0216 	add.w	r2, r7, #22
 8001de8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001dec:	4618      	mov	r0, r3
 8001dee:	f001 f8b2 	bl	8002f56 <VL53L5CX_RdByte>
 8001df2:	4603      	mov	r3, r0
 8001df4:	b25a      	sxtb	r2, r3
 8001df6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	b25b      	sxtb	r3, r3
 8001dfe:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	210c      	movs	r1, #12
 8001e06:	4618      	mov	r0, r3
 8001e08:	f001 f8b9 	bl	8002f7e <VL53L5CX_WrByte>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	b25a      	sxtb	r2, r3
 8001e10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	b25b      	sxtb	r3, r3
 8001e18:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001e22:	4618      	mov	r0, r3
 8001e24:	f001 f8ab 	bl	8002f7e <VL53L5CX_WrByte>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	b25a      	sxtb	r2, r3
 8001e2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	b25b      	sxtb	r3, r3
 8001e34:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x20, 0x07);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2207      	movs	r2, #7
 8001e3a:	2120      	movs	r1, #32
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f001 f89e 	bl	8002f7e <VL53L5CX_WrByte>
 8001e42:	4603      	mov	r3, r0
 8001e44:	b25a      	sxtb	r2, r3
 8001e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	b25b      	sxtb	r3, r3
 8001e4e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x20, 0x06);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2206      	movs	r2, #6
 8001e54:	2120      	movs	r1, #32
 8001e56:	4618      	mov	r0, r3
 8001e58:	f001 f891 	bl	8002f7e <VL53L5CX_WrByte>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	b25a      	sxtb	r2, r3
 8001e60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	b25b      	sxtb	r3, r3
 8001e68:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2209      	movs	r2, #9
 8001e6e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001e72:	4618      	mov	r0, r3
 8001e74:	f001 f883 	bl	8002f7e <VL53L5CX_WrByte>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	b25a      	sxtb	r2, r3
 8001e7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	b25b      	sxtb	r3, r3
 8001e84:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e8c:	4acf      	ldr	r2, [pc, #828]	@ (80021cc <vl53l5cx_init+0x90c>)
 8001e8e:	2100      	movs	r1, #0
 8001e90:	f001 f88a 	bl	8002fa8 <VL53L5CX_WrMulti>
 8001e94:	4603      	mov	r3, r0
 8001e96:	b25a      	sxtb	r2, r3
 8001e98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	b25b      	sxtb	r3, r3
 8001ea0:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	220a      	movs	r2, #10
 8001ea6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f001 f867 	bl	8002f7e <VL53L5CX_WrByte>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	b25a      	sxtb	r2, r3
 8001eb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	b25b      	sxtb	r3, r3
 8001ebc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ec4:	4ac2      	ldr	r2, [pc, #776]	@ (80021d0 <vl53l5cx_init+0x910>)
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	f001 f86e 	bl	8002fa8 <VL53L5CX_WrMulti>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	b25a      	sxtb	r2, r3
 8001ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	b25b      	sxtb	r3, r3
 8001ed8:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	220b      	movs	r2, #11
 8001ede:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f001 f84b 	bl	8002f7e <VL53L5CX_WrByte>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	b25a      	sxtb	r2, r3
 8001eec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	b25b      	sxtb	r3, r3
 8001ef4:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrMulti(&(p_dev->platform),0,
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001efc:	4ab5      	ldr	r2, [pc, #724]	@ (80021d4 <vl53l5cx_init+0x914>)
 8001efe:	2100      	movs	r1, #0
 8001f00:	f001 f852 	bl	8002fa8 <VL53L5CX_WrMulti>
 8001f04:	4603      	mov	r3, r0
 8001f06:	b25a      	sxtb	r2, r3
 8001f08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	b25b      	sxtb	r3, r3
 8001f10:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f001 f82f 	bl	8002f7e <VL53L5CX_WrByte>
 8001f20:	4603      	mov	r3, r0
 8001f22:	b25a      	sxtb	r2, r3
 8001f24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	b25b      	sxtb	r3, r3
 8001f2c:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2202      	movs	r2, #2
 8001f32:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001f36:	4618      	mov	r0, r3
 8001f38:	f001 f821 	bl	8002f7e <VL53L5CX_WrByte>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	b25a      	sxtb	r2, r3
 8001f40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	b25b      	sxtb	r3, r3
 8001f48:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x03, 0x0D);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	220d      	movs	r2, #13
 8001f4e:	2103      	movs	r1, #3
 8001f50:	4618      	mov	r0, r3
 8001f52:	f001 f814 	bl	8002f7e <VL53L5CX_WrByte>
 8001f56:	4603      	mov	r3, r0
 8001f58:	b25a      	sxtb	r2, r3
 8001f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	b25b      	sxtb	r3, r3
 8001f62:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f001 f806 	bl	8002f7e <VL53L5CX_WrByte>
 8001f72:	4603      	mov	r3, r0
 8001f74:	b25a      	sxtb	r2, r3
 8001f76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	b25b      	sxtb	r3, r3
 8001f7e:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8001f80:	2310      	movs	r3, #16
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	2310      	movs	r3, #16
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2321      	movs	r3, #33	@ 0x21
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff f8e3 	bl	800115a <_vl53l5cx_poll_for_answer>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001f9e:	7dfb      	ldrb	r3, [r7, #23]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f040 818b 	bne.w	80022bc <vl53l5cx_init+0x9fc>
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 ffe5 	bl	8002f7e <VL53L5CX_WrByte>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	b25a      	sxtb	r2, r3
 8001fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f107 0216 	add.w	r2, r7, #22
 8001fc8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 ffc2 	bl	8002f56 <VL53L5CX_RdByte>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	b25a      	sxtb	r2, r3
 8001fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	b25b      	sxtb	r3, r3
 8001fde:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x01);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	210c      	movs	r1, #12
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 ffc9 	bl	8002f7e <VL53L5CX_WrByte>
 8001fec:	4603      	mov	r3, r0
 8001fee:	b25a      	sxtb	r2, r3
 8001ff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	b25b      	sxtb	r3, r3
 8001ff8:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002002:	4618      	mov	r0, r3
 8002004:	f000 ffbb 	bl	8002f7e <VL53L5CX_WrByte>
 8002008:	4603      	mov	r3, r0
 800200a:	b25a      	sxtb	r2, r3
 800200c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002010:	4313      	orrs	r3, r2
 8002012:	b25b      	sxtb	r3, r3
 8002014:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x114, 0x00);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800201e:	4618      	mov	r0, r3
 8002020:	f000 ffad 	bl	8002f7e <VL53L5CX_WrByte>
 8002024:	4603      	mov	r3, r0
 8002026:	b25a      	sxtb	r2, r3
 8002028:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800202c:	4313      	orrs	r3, r2
 800202e:	b25b      	sxtb	r3, r3
 8002030:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x115, 0x00);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f240 1115 	movw	r1, #277	@ 0x115
 800203a:	4618      	mov	r0, r3
 800203c:	f000 ff9f 	bl	8002f7e <VL53L5CX_WrByte>
 8002040:	4603      	mov	r3, r0
 8002042:	b25a      	sxtb	r2, r3
 8002044:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002048:	4313      	orrs	r3, r2
 800204a:	b25b      	sxtb	r3, r3
 800204c:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x116, 0x42);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2242      	movs	r2, #66	@ 0x42
 8002052:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8002056:	4618      	mov	r0, r3
 8002058:	f000 ff91 	bl	8002f7e <VL53L5CX_WrByte>
 800205c:	4603      	mov	r3, r0
 800205e:	b25a      	sxtb	r2, r3
 8002060:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002064:	4313      	orrs	r3, r2
 8002066:	b25b      	sxtb	r3, r3
 8002068:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x117, 0x00);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f240 1117 	movw	r1, #279	@ 0x117
 8002072:	4618      	mov	r0, r3
 8002074:	f000 ff83 	bl	8002f7e <VL53L5CX_WrByte>
 8002078:	4603      	mov	r3, r0
 800207a:	b25a      	sxtb	r2, r3
 800207c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002080:	4313      	orrs	r3, r2
 8002082:	b25b      	sxtb	r3, r3
 8002084:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0B, 0x00);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	210b      	movs	r1, #11
 800208c:	4618      	mov	r0, r3
 800208e:	f000 ff76 	bl	8002f7e <VL53L5CX_WrByte>
 8002092:	4603      	mov	r3, r0
 8002094:	b25a      	sxtb	r2, r3
 8002096:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800209a:	4313      	orrs	r3, r2
 800209c:	b25b      	sxtb	r3, r3
 800209e:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f107 0216 	add.w	r2, r7, #22
 80020a6:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 ff53 	bl	8002f56 <VL53L5CX_RdByte>
 80020b0:	4603      	mov	r3, r0
 80020b2:	b25a      	sxtb	r2, r3
 80020b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	b25b      	sxtb	r3, r3
 80020bc:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0C, 0x00);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	210c      	movs	r1, #12
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 ff5a 	bl	8002f7e <VL53L5CX_WrByte>
 80020ca:	4603      	mov	r3, r0
 80020cc:	b25a      	sxtb	r2, r3
 80020ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	b25b      	sxtb	r3, r3
 80020d6:	75fb      	strb	r3, [r7, #23]
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x0B, 0x01);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	210b      	movs	r1, #11
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 ff4d 	bl	8002f7e <VL53L5CX_WrByte>
 80020e4:	4603      	mov	r3, r0
 80020e6:	b25a      	sxtb	r2, r3
 80020e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b25b      	sxtb	r3, r3
 80020f0:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_mcu_boot(p_dev);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff f885 	bl	8001202 <_vl53l5cx_poll_for_mcu_boot>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461a      	mov	r2, r3
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
 80020fe:	4313      	orrs	r3, r2
 8002100:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8002102:	7dfb      	ldrb	r3, [r7, #23]
 8002104:	2b00      	cmp	r3, #0
 8002106:	f040 80db 	bne.w	80022c0 <vl53l5cx_init+0xa00>
		goto exit;
	}

	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2202      	movs	r2, #2
 800210e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8002112:	4618      	mov	r0, r3
 8002114:	f000 ff33 	bl	8002f7e <VL53L5CX_WrByte>
 8002118:	4603      	mov	r3, r0
 800211a:	b25a      	sxtb	r2, r3
 800211c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002120:	4313      	orrs	r3, r2
 8002122:	b25b      	sxtb	r3, r3
 8002124:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2fd8,
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	2328      	movs	r3, #40	@ 0x28
 800212a:	4a2b      	ldr	r2, [pc, #172]	@ (80021d8 <vl53l5cx_init+0x918>)
 800212c:	f642 71d8 	movw	r1, #12248	@ 0x2fd8
 8002130:	f000 ff3a 	bl	8002fa8 <VL53L5CX_WrMulti>
 8002134:	4603      	mov	r3, r0
 8002136:	b25a      	sxtb	r2, r3
 8002138:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800213c:	4313      	orrs	r3, r2
 800213e:	b25b      	sxtb	r3, r3
 8002140:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 8002142:	2302      	movs	r3, #2
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	23ff      	movs	r3, #255	@ 0xff
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 800214e:	2200      	movs	r2, #0
 8002150:	2104      	movs	r1, #4
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff f801 	bl	800115a <_vl53l5cx_poll_for_answer>
 8002158:	4603      	mov	r3, r0
 800215a:	461a      	mov	r2, r3
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	4313      	orrs	r3, r2
 8002160:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8002162:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 800216a:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 800216e:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8002172:	f000 ff2f 	bl	8002fd4 <VL53L5CX_RdMulti>
 8002176:	4603      	mov	r3, r0
 8002178:	b25a      	sxtb	r2, r3
 800217a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800217e:	4313      	orrs	r3, r2
 8002180:	b25b      	sxtb	r3, r3
 8002182:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f103 0020 	add.w	r0, r3, #32
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002190:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8002194:	4619      	mov	r1, r3
 8002196:	f007 f83c 	bl	8009212 <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 800219a:	2110      	movs	r1, #16
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff f875 	bl	800128c <_vl53l5cx_send_offset_data>
 80021a2:	4603      	mov	r3, r0
 80021a4:	461a      	mov	r2, r3
 80021a6:	7dfb      	ldrb	r3, [r7, #23]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80021b2:	4a0a      	ldr	r2, [pc, #40]	@ (80021dc <vl53l5cx_init+0x91c>)
 80021b4:	4618      	mov	r0, r3
 80021b6:	4611      	mov	r1, r2
 80021b8:	f44f 7342 	mov.w	r3, #776	@ 0x308
 80021bc:	461a      	mov	r2, r3
 80021be:	f007 f828 	bl	8009212 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 80021c2:	2110      	movs	r1, #16
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff fa2f 	bl	8001628 <_vl53l5cx_send_xtalk_data>
 80021ca:	e009      	b.n	80021e0 <vl53l5cx_init+0x920>
 80021cc:	08009e7c 	.word	0x08009e7c
 80021d0:	08011e7c 	.word	0x08011e7c
 80021d4:	08019e7c 	.word	0x08019e7c
 80021d8:	0801f550 	.word	0x0801f550
 80021dc:	0801f248 	.word	0x0801f248
 80021e0:	4603      	mov	r3, r0
 80021e2:	461a      	mov	r2, r3
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), 0x2c34,
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699a      	ldr	r2, [r3, #24]
 80021f0:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 80021f4:	f642 4134 	movw	r1, #11316	@ 0x2c34
 80021f8:	f000 fed6 	bl	8002fa8 <VL53L5CX_WrMulti>
 80021fc:	4603      	mov	r3, r0
 80021fe:	b25a      	sxtb	r2, r3
 8002200:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002204:	4313      	orrs	r3, r2
 8002206:	b25b      	sxtb	r3, r3
 8002208:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800220a:	2303      	movs	r3, #3
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	23ff      	movs	r3, #255	@ 0xff
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002216:	2201      	movs	r2, #1
 8002218:	2104      	movs	r1, #4
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7fe ff9d 	bl	800115a <_vl53l5cx_poll_for_answer>
 8002220:	4603      	mov	r3, r0
 8002222:	461a      	mov	r2, r3
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	4313      	orrs	r3, r2
 8002228:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 800222a:	f107 0110 	add.w	r1, r7, #16
 800222e:	2304      	movs	r3, #4
 8002230:	f64d 3280 	movw	r2, #56192	@ 0xdb80
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fd7d 	bl	8002d34 <vl53l5cx_dci_write_data>
 800223a:	4603      	mov	r3, r0
 800223c:	461a      	mov	r2, r3
 800223e:	7dfb      	ldrb	r3, [r7, #23]
 8002240:	4313      	orrs	r3, r2
 8002242:	75fb      	strb	r3, [r7, #23]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8002244:	f107 010c 	add.w	r1, r7, #12
 8002248:	2304      	movs	r3, #4
 800224a:	f64d 1264 	movw	r2, #55652	@ 0xd964
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fd70 	bl	8002d34 <vl53l5cx_dci_write_data>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	7dfb      	ldrb	r3, [r7, #23]
 800225a:	4313      	orrs	r3, r2
 800225c:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 800225e:	2301      	movs	r3, #1
 8002260:	75bb      	strb	r3, [r7, #22]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002268:	2326      	movs	r3, #38	@ 0x26
 800226a:	9302      	str	r3, [sp, #8]
 800226c:	2301      	movs	r3, #1
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	f107 0316 	add.w	r3, r7, #22
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2328      	movs	r3, #40	@ 0x28
 8002278:	f24e 1208 	movw	r2, #57608	@ 0xe108
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fdf8 	bl	8002e72 <vl53l5cx_dci_replace_data>
 8002282:	4603      	mov	r3, r0
 8002284:	461a      	mov	r2, r3
 8002286:	7dfb      	ldrb	r3, [r7, #23]
 8002288:	4313      	orrs	r3, r2
 800228a:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002292:	2325      	movs	r3, #37	@ 0x25
 8002294:	9302      	str	r3, [sp, #8]
 8002296:	2301      	movs	r3, #1
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	f107 0316 	add.w	r3, r7, #22
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	2328      	movs	r3, #40	@ 0x28
 80022a2:	f24e 1208 	movw	r2, #57608	@ 0xe108
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fde3 	bl	8002e72 <vl53l5cx_dci_replace_data>
 80022ac:	4603      	mov	r3, r0
 80022ae:	461a      	mov	r2, r3
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	75fb      	strb	r3, [r7, #23]
 80022b6:	e004      	b.n	80022c2 <vl53l5cx_init+0xa02>
		goto exit;
 80022b8:	bf00      	nop
 80022ba:	e002      	b.n	80022c2 <vl53l5cx_init+0xa02>
		goto exit;
 80022bc:	bf00      	nop
 80022be:	e000      	b.n	80022c2 <vl53l5cx_init+0xa02>
		goto exit;
 80022c0:	bf00      	nop
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);

exit:
	return status;
 80022c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <vl53l5cx_start_ranging>:
	return status;
}

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 80022cc:	b5b0      	push	{r4, r5, r7, lr}
 80022ce:	b09c      	sub	sp, #112	@ 0x70
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 80022da:	2300      	movs	r3, #0
 80022dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80022de:	2300      	movs	r3, #0
 80022e0:	657b      	str	r3, [r7, #84]	@ 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 80022e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022e6:	64fb      	str	r3, [r7, #76]	@ 0x4c

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 80022e8:	f107 035b 	add.w	r3, r7, #91	@ 0x5b
 80022ec:	4619      	mov	r1, r3
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 fad0 	bl	8002894 <vl53l5cx_get_resolution>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	p_dev->data_read_size = 0;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	22ff      	movs	r2, #255	@ 0xff
 800230c:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 800230e:	4ba2      	ldr	r3, [pc, #648]	@ (8002598 <vl53l5cx_start_ranging+0x2cc>)
 8002310:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002314:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002316:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 800231a:	4ba0      	ldr	r3, [pc, #640]	@ (800259c <vl53l5cx_start_ranging+0x2d0>)
 800231c:	f107 040c 	add.w	r4, r7, #12
 8002320:	461d      	mov	r5, r3
 8002322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800232a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800232e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 8002332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002334:	3320      	adds	r3, #32
 8002336:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8002338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800233a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800233e:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8002340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002342:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002346:	63fb      	str	r3, [r7, #60]	@ 0x3c
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8002348:	2300      	movs	r3, #0
 800234a:	663b      	str	r3, [r7, #96]	@ 0x60
 800234c:	e073      	b.n	8002436 <vl53l5cx_start_ranging+0x16a>
	{
		if ((output[i] == (uint8_t)0)
 800234e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	3368      	adds	r3, #104	@ 0x68
 8002354:	443b      	add	r3, r7
 8002356:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d067      	beq.n	800242e <vl53l5cx_start_ranging+0x162>
                    || ((output_bh_enable[i/(uint32_t)32]
 800235e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	3368      	adds	r3, #104	@ 0x68
 8002366:	443b      	add	r3, r7
 8002368:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 800236c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	fa22 f303 	lsr.w	r3, r2, r3
 8002376:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d057      	beq.n	800242e <vl53l5cx_start_ranging+0x162>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 800237e:	f107 020c 	add.w	r2, r7, #12
 8002382:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1)
 800238a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d03a      	beq.n	800240e <vl53l5cx_start_ranging+0x142>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8002398:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	d833      	bhi.n	800240e <vl53l5cx_start_ranging+0x142>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0)
 80023a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023a8:	885b      	ldrh	r3, [r3, #2]
 80023aa:	f245 42cf 	movw	r2, #21711	@ 0x54cf
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d910      	bls.n	80023d4 <vl53l5cx_start_ranging+0x108>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 80023b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023b4:	885b      	ldrh	r3, [r3, #2]
 80023b6:	f645 028f 	movw	r2, #22671	@ 0x588f
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d80a      	bhi.n	80023d4 <vl53l5cx_start_ranging+0x108>
			{
				bh_ptr->size = resolution;
 80023be:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80023c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c6:	b299      	uxth	r1, r3
 80023c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80023ca:	8813      	ldrh	r3, [r2, #0]
 80023cc:	f361 130f 	bfi	r3, r1, #4, #12
 80023d0:	8013      	strh	r3, [r2, #0]
 80023d2:	e009      	b.n	80023e8 <vl53l5cx_start_ranging+0x11c>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 80023d4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80023d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023dc:	b299      	uxth	r1, r3
 80023de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80023e0:	8813      	ldrh	r3, [r2, #0]
 80023e2:	f361 130f 	bfi	r3, r1, #4, #12
 80023e6:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80023ee:	7812      	ldrb	r2, [r2, #0]
 80023f0:	f3c2 0203 	ubfx	r2, r2, #0, #4
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	4611      	mov	r1, r2
 80023f8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80023fa:	8812      	ldrh	r2, [r2, #0]
 80023fc:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8002400:	b292      	uxth	r2, r2
 8002402:	fb01 f202 	mul.w	r2, r1, r2
 8002406:	441a      	add	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	615a      	str	r2, [r3, #20]
 800240c:	e009      	b.n	8002422 <vl53l5cx_start_ranging+0x156>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002414:	8812      	ldrh	r2, [r2, #0]
 8002416:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800241a:	b292      	uxth	r2, r2
 800241c:	441a      	add	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	1d1a      	adds	r2, r3, #4
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	615a      	str	r2, [r3, #20]
 800242c:	e000      	b.n	8002430 <vl53l5cx_start_ranging+0x164>
			continue;
 800242e:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8002430:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002432:	3301      	adds	r3, #1
 8002434:	663b      	str	r3, [r7, #96]	@ 0x60
 8002436:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002438:	2b0b      	cmp	r3, #11
 800243a:	d988      	bls.n	800234e <vl53l5cx_start_ranging+0x82>
	}
	p_dev->data_read_size += (uint32_t)24;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	f103 0218 	add.w	r2, r3, #24
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	615a      	str	r2, [r3, #20]

	status |= vl53l5cx_dci_write_data(p_dev,
 8002448:	f107 010c 	add.w	r1, r7, #12
 800244c:	2330      	movs	r3, #48	@ 0x30
 800244e:	f64d 1280 	movw	r2, #55680	@ 0xd980
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fc6e 	bl	8002d34 <vl53l5cx_dci_write_data>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002460:	4313      	orrs	r3, r2
 8002462:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	653b      	str	r3, [r7, #80]	@ 0x50
	header_config[1] = i + (uint32_t)1;
 800246c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800246e:	3301      	adds	r3, #1
 8002470:	657b      	str	r3, [r7, #84]	@ 0x54

	status |= vl53l5cx_dci_write_data(p_dev,
 8002472:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002476:	2308      	movs	r3, #8
 8002478:	f64d 1268 	movw	r2, #55656	@ 0xd968
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fc59 	bl	8002d34 <vl53l5cx_dci_write_data>
 8002482:	4603      	mov	r3, r0
 8002484:	461a      	mov	r2, r3
 8002486:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800248a:	4313      	orrs	r3, r2
 800248c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 8002490:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8002494:	2310      	movs	r3, #16
 8002496:	f64d 1270 	movw	r2, #55664	@ 0xd970
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fc4a 	bl	8002d34 <vl53l5cx_dci_write_data>
 80024a0:	4603      	mov	r3, r0
 80024a2:	461a      	mov	r2, r3
 80024a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fd61 	bl	8002f7e <VL53L5CX_WrByte>
 80024bc:	4603      	mov	r3, r0
 80024be:	b25a      	sxtb	r2, r3
 80024c0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b25b      	sxtb	r3, r3
 80024c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x09, 0x05);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2205      	movs	r2, #5
 80024d0:	2109      	movs	r1, #9
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fd53 	bl	8002f7e <VL53L5CX_WrByte>
 80024d8:	4603      	mov	r3, r0
 80024da:	b25a      	sxtb	r2, r3
 80024dc:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80024e0:	4313      	orrs	r3, r2
 80024e2:	b25b      	sxtb	r3, r3
 80024e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	status |= VL53L5CX_WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 fd44 	bl	8002f7e <VL53L5CX_WrByte>
 80024f6:	4603      	mov	r3, r0
 80024f8:	b25a      	sxtb	r2, r3
 80024fa:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80024fe:	4313      	orrs	r3, r2
 8002500:	b25b      	sxtb	r3, r3
 8002502:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

	/* Start ranging session */
	status |= VL53L5CX_WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END -
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800250c:	2304      	movs	r3, #4
 800250e:	f642 71fc 	movw	r1, #12284	@ 0x2ffc
 8002512:	f000 fd49 	bl	8002fa8 <VL53L5CX_WrMulti>
 8002516:	4603      	mov	r3, r0
 8002518:	b25a      	sxtb	r2, r3
 800251a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800251e:	4313      	orrs	r3, r2
 8002520:	b25b      	sxtb	r3, r3
 8002522:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002526:	2303      	movs	r3, #3
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	23ff      	movs	r3, #255	@ 0xff
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002532:	2201      	movs	r2, #1
 8002534:	2104      	movs	r1, #4
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe fe0f 	bl	800115a <_vl53l5cx_poll_for_answer>
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002544:	4313      	orrs	r3, r2
 8002546:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l5cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
	status |= vl53l5cx_dci_read_data(p_dev,
 8002550:	230c      	movs	r3, #12
 8002552:	f245 4240 	movw	r2, #21568	@ 0x5440
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fb72 	bl	8002c40 <vl53l5cx_dci_read_data>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002564:	4313      	orrs	r3, r2
 8002566:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f503 63a3 	add.w	r3, r3, #1304	@ 0x518
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	if(tmp != p_dev->data_read_size)
 8002578:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800257c:	461a      	mov	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	429a      	cmp	r2, r3
 8002584:	d002      	beq.n	800258c <vl53l5cx_start_ranging+0x2c0>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8002586:	23ff      	movs	r3, #255	@ 0xff
 8002588:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	return status;
 800258c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002590:	4618      	mov	r0, r3
 8002592:	3768      	adds	r7, #104	@ 0x68
 8002594:	46bd      	mov	sp, r7
 8002596:	bdb0      	pop	{r4, r5, r7, pc}
 8002598:	08009c9c 	.word	0x08009c9c
 800259c:	08009cac 	.word	0x08009cac

080025a0 <vl53l5cx_check_data_ready>:
}

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]

	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 80025b6:	2304      	movs	r3, #4
 80025b8:	2100      	movs	r1, #0
 80025ba:	f000 fd0b 	bl	8002fd4 <VL53L5CX_RdMulti>
 80025be:	4603      	mov	r3, r0
 80025c0:	b25a      	sxtb	r2, r3
 80025c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	b25b      	sxtb	r3, r3
 80025ca:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7c1b      	ldrb	r3, [r3, #16]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d020      	beq.n	800261c <vl53l5cx_check_data_ready+0x7c>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 80025e0:	2bff      	cmp	r3, #255	@ 0xff
 80025e2:	d01b      	beq.n	800261c <vl53l5cx_check_data_ready+0x7c>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 80025ea:	2b05      	cmp	r3, #5
 80025ec:	d116      	bne.n	800261c <vl53l5cx_check_data_ready+0x7c>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3512 	ldrb.w	r3, [r3, #1298]	@ 0x512
 80025f4:	f003 0305 	and.w	r3, r3, #5
 80025f8:	2b05      	cmp	r3, #5
 80025fa:	d10f      	bne.n	800261c <vl53l5cx_check_data_ready+0x7c>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3513 	ldrb.w	r3, [r3, #1299]	@ 0x513
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <vl53l5cx_check_data_ready+0x7c>
			)
	{
		*p_isReady = (uint8_t)1;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	741a      	strb	r2, [r3, #16]
 800261a:	e00e      	b.n	800263a <vl53l5cx_check_data_ready+0x9a>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3513 	ldrb.w	r3, [r3, #1299]	@ 0x513
 8002622:	b25b      	sxtb	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	da05      	bge.n	8002634 <vl53l5cx_check_data_ready+0x94>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 2512 	ldrb.w	r2, [r3, #1298]	@ 0x512
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	4313      	orrs	r3, r2
 8002632:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800263a:	7bfb      	ldrb	r3, [r7, #15]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, j, msize;

	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0,
 8002652:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
	status |= VL53L5CX_RdMulti(&(p_dev->platform), 0x0,
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	2100      	movs	r1, #0
 8002660:	f000 fcb8 	bl	8002fd4 <VL53L5CX_RdMulti>
 8002664:	4603      	mov	r3, r0
 8002666:	b25a      	sxtb	r2, r3
 8002668:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800266c:	4313      	orrs	r3, r2
 800266e:	b25b      	sxtb	r3, r3
 8002670:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	741a      	strb	r2, [r3, #16]
	VL53L5CX_SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4619      	mov	r1, r3
 800268a:	4610      	mov	r0, r2
 800268c:	f000 fcb8 	bl	8003000 <VL53L5CX_SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i
 8002690:	2310      	movs	r3, #16
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	e07e      	b.n	8002794 <vl53l5cx_get_ranging_data+0x150>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	4413      	add	r3, r2
 80026a0:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d915      	bls.n	80026dc <vl53l5cx_get_ranging_data+0x98>
                    && (bh_ptr->type < (uint32_t)0xd))
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	d80e      	bhi.n	80026dc <vl53l5cx_get_ranging_data+0x98>
		{
			msize = bh_ptr->type * bh_ptr->size;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	fb02 f303 	mul.w	r3, r2, r3
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	e005      	b.n	80026e8 <vl53l5cx_get_ranging_data+0xa4>
		}
		else
		{
			msize = bh_ptr->size;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	885b      	ldrh	r3, [r3, #2]
 80026ec:	f24e 0284 	movw	r2, #57476	@ 0xe084
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d039      	beq.n	8002768 <vl53l5cx_get_ranging_data+0x124>
 80026f4:	f24e 0284 	movw	r2, #57476	@ 0xe084
 80026f8:	4293      	cmp	r3, r2
 80026fa:	dc43      	bgt.n	8002784 <vl53l5cx_get_ranging_data+0x140>
 80026fc:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8002700:	4293      	cmp	r3, r2
 8002702:	d023      	beq.n	800274c <vl53l5cx_get_ranging_data+0x108>
 8002704:	f64d 7244 	movw	r2, #57156	@ 0xdf44
 8002708:	4293      	cmp	r3, r2
 800270a:	dc3b      	bgt.n	8002784 <vl53l5cx_get_ranging_data+0x140>
 800270c:	f245 42b4 	movw	r2, #21684	@ 0x54b4
 8002710:	4293      	cmp	r3, r2
 8002712:	d004      	beq.n	800271e <vl53l5cx_get_ranging_data+0xda>
 8002714:	f64d 3284 	movw	r2, #56196	@ 0xdb84
 8002718:	4293      	cmp	r3, r2
 800271a:	d00a      	beq.n	8002732 <vl53l5cx_get_ranging_data+0xee>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 800271c:	e032      	b.n	8002784 <vl53l5cx_get_ranging_data+0x140>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	330c      	adds	r3, #12
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	4413      	add	r3, r2
 8002726:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 800272a:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	701a      	strb	r2, [r3, #0]
				break;
 8002730:	e029      	b.n	8002786 <vl53l5cx_get_ranging_data+0x142>
				(void)memcpy(p_results->nb_target_detected,
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	1c58      	adds	r0, r3, #1
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	3304      	adds	r3, #4
 800273a:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4619      	mov	r1, r3
 8002746:	f006 fd64 	bl	8009212 <memcpy>
				break;
 800274a:	e01c      	b.n	8002786 <vl53l5cx_get_ranging_data+0x142>
				(void)memcpy(p_results->distance_mm,
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	f103 0042 	add.w	r0, r3, #66	@ 0x42
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	3304      	adds	r3, #4
 8002756:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4619      	mov	r1, r3
 8002762:	f006 fd56 	bl	8009212 <memcpy>
				break;
 8002766:	e00e      	b.n	8002786 <vl53l5cx_get_ranging_data+0x142>
				(void)memcpy(p_results->target_status,
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f103 00c2 	add.w	r0, r3, #194	@ 0xc2
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	3304      	adds	r3, #4
 8002772:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4619      	mov	r1, r3
 800277e:	f006 fd48 	bl	8009212 <memcpy>
				break;
 8002782:	e000      	b.n	8002786 <vl53l5cx_get_ranging_data+0x142>
				break;
 8002784:	bf00      	nop
		}
		i += msize;
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4413      	add	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	3304      	adds	r3, #4
 8002792:	61bb      	str	r3, [r7, #24]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	429a      	cmp	r2, r3
 800279c:	f4ff af7b 	bcc.w	8002696 <vl53l5cx_get_ranging_data+0x52>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 80027a0:	2300      	movs	r3, #0
 80027a2:	61bb      	str	r3, [r7, #24]
 80027a4:	e025      	b.n	80027f2 <vl53l5cx_get_ranging_data+0x1ae>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	3320      	adds	r3, #32
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	da00      	bge.n	80027ba <vl53l5cx_get_ranging_data+0x176>
 80027b8:	3303      	adds	r3, #3
 80027ba:	109b      	asrs	r3, r3, #2
 80027bc:	b219      	sxth	r1, r3
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	3320      	adds	r3, #32
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4413      	add	r3, r2
 80027c8:	460a      	mov	r2, r1
 80027ca:	805a      	strh	r2, [r3, #2]
		if(p_results->distance_mm[i] < 0)
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	3320      	adds	r3, #32
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	da06      	bge.n	80027ec <vl53l5cx_get_ranging_data+0x1a8>
		{
			p_results->distance_mm[i] = 0;
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	3320      	adds	r3, #32
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	2200      	movs	r2, #0
 80027ea:	805a      	strh	r2, [r3, #2]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	3301      	adds	r3, #1
 80027f0:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80027f6:	d9d6      	bls.n	80027a6 <vl53l5cx_get_ranging_data+0x162>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80027f8:	2300      	movs	r3, #0
 80027fa:	61bb      	str	r3, [r7, #24]
 80027fc:	e01a      	b.n	8002834 <vl53l5cx_get_ranging_data+0x1f0>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	4413      	add	r3, r2
 8002804:	3301      	adds	r3, #1
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d110      	bne.n	800282e <vl53l5cx_get_ranging_data+0x1ea>
			for(j = 0; j < (uint32_t)
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	e00a      	b.n	8002828 <vl53l5cx_get_ranging_data+0x1e4>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	4413      	add	r3, r2
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	4413      	add	r3, r2
 800281c:	22ff      	movs	r2, #255	@ 0xff
 800281e:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3301      	adds	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f1      	beq.n	8002812 <vl53l5cx_get_ranging_data+0x1ce>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	3301      	adds	r3, #1
 8002832:	61bb      	str	r3, [r7, #24]
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b3f      	cmp	r3, #63	@ 0x3f
 8002838:	d9e1      	bls.n	80027fe <vl53l5cx_get_ranging_data+0x1ba>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3518 	ldrb.w	r3, [r3, #1304]	@ 0x518
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3519 	ldrb.w	r3, [r3, #1305]	@ 0x519
 800284a:	461a      	mov	r2, r3
 800284c:	89fb      	ldrh	r3, [r7, #14]
 800284e:	4313      	orrs	r3, r2
 8002850:	81fb      	strh	r3, [r7, #14]
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 8002856:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	4413      	add	r3, r2
 800285c:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 8002868:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	f893 3510 	ldrb.w	r3, [r3, #1296]	@ 0x510
 8002872:	461a      	mov	r2, r3
 8002874:	89bb      	ldrh	r3, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 800287a:	89fa      	ldrh	r2, [r7, #14]
 800287c:	89bb      	ldrh	r3, [r7, #12]
 800287e:	429a      	cmp	r2, r3
 8002880:	d003      	beq.n	800288a <vl53l5cx_get_ranging_data+0x246>
	{
		status |= VL53L5CX_STATUS_CORRUPTED_FRAME;
 8002882:	7ffb      	ldrb	r3, [r7, #31]
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 800288a:	7ffb      	ldrb	r3, [r7, #31]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3720      	adds	r7, #32
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 80028a8:	2308      	movs	r3, #8
 80028aa:	f245 4250 	movw	r2, #21584	@ 0x5450
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f9c6 	bl	8002c40 <vl53l5cx_dci_read_data>
 80028b4:	4603      	mov	r3, r0
 80028b6:	461a      	mov	r2, r3
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 2510 	ldrb.w	r2, [r3, #1296]	@ 0x510
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3511 	ldrb.w	r3, [r3, #1297]	@ 0x511
 80028ca:	fb12 f303 	smulbb	r3, r2, r3
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	701a      	strb	r2, [r3, #0]

	return status;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <vl53l5cx_set_resolution>:


uint8_t vl53l5cx_set_resolution(
		VL53L5CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 80028ee:	78fb      	ldrb	r3, [r7, #3]
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	d002      	beq.n	80028fa <vl53l5cx_set_resolution+0x1c>
 80028f4:	2b40      	cmp	r3, #64	@ 0x40
 80028f6:	d055      	beq.n	80029a4 <vl53l5cx_set_resolution+0xc6>
 80028f8:	e0a9      	b.n	8002a4e <vl53l5cx_set_resolution+0x170>
		case VL53L5CX_RESOLUTION_4X4:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 8002900:	2310      	movs	r3, #16
 8002902:	f64a 5238 	movw	r2, #44344	@ 0xad38
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f99a 	bl	8002c40 <vl53l5cx_dci_read_data>
 800290c:	4603      	mov	r3, r0
 800290e:	461a      	mov	r2, r3
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	4313      	orrs	r3, r2
 8002914:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2240      	movs	r2, #64	@ 0x40
 800291a:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x06] = 64;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2240      	movs	r2, #64	@ 0x40
 8002922:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			p_dev->temp_buffer[0x09] = 4;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2204      	movs	r2, #4
 800292a:	f883 2519 	strb.w	r2, [r3, #1305]	@ 0x519
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 8002934:	2310      	movs	r3, #16
 8002936:	f64a 5238 	movw	r2, #44344	@ 0xad38
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f9fa 	bl	8002d34 <vl53l5cx_dci_write_data>
 8002940:	4603      	mov	r3, r0
 8002942:	461a      	mov	r2, r3
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	4313      	orrs	r3, r2
 8002948:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 8002950:	2308      	movs	r3, #8
 8002952:	f245 4250 	movw	r2, #21584	@ 0x5450
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f972 	bl	8002c40 <vl53l5cx_dci_read_data>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	4313      	orrs	r3, r2
 8002964:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2204      	movs	r2, #4
 800296a:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x01] = 4;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2204      	movs	r2, #4
 8002972:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x04] = 8;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2208      	movs	r2, #8
 800297a:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x05] = 8;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2208      	movs	r2, #8
 8002982:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 800298c:	2308      	movs	r3, #8
 800298e:	f245 4250 	movw	r2, #21584	@ 0x5450
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f9ce 	bl	8002d34 <vl53l5cx_dci_write_data>
 8002998:	4603      	mov	r3, r0
 800299a:	461a      	mov	r2, r3
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	4313      	orrs	r3, r2
 80029a0:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			break;
 80029a2:	e057      	b.n	8002a54 <vl53l5cx_set_resolution+0x176>

		case VL53L5CX_RESOLUTION_8X8:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 80029aa:	2310      	movs	r3, #16
 80029ac:	f64a 5238 	movw	r2, #44344	@ 0xad38
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f945 	bl	8002c40 <vl53l5cx_dci_read_data>
 80029b6:	4603      	mov	r3, r0
 80029b8:	461a      	mov	r2, r3
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	4313      	orrs	r3, r2
 80029be:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2210      	movs	r2, #16
 80029c4:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x06] = 16;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2210      	movs	r2, #16
 80029cc:	f883 2516 	strb.w	r2, [r3, #1302]	@ 0x516
			p_dev->temp_buffer[0x09] = 1;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2519 	strb.w	r2, [r3, #1305]	@ 0x519
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 80029de:	2310      	movs	r3, #16
 80029e0:	f64a 5238 	movw	r2, #44344	@ 0xad38
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f9a5 	bl	8002d34 <vl53l5cx_dci_write_data>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 80029fa:	2308      	movs	r3, #8
 80029fc:	f245 4250 	movw	r2, #21584	@ 0x5450
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f91d 	bl	8002c40 <vl53l5cx_dci_read_data>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2208      	movs	r2, #8
 8002a14:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
			p_dev->temp_buffer[0x01] = 8;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2208      	movs	r2, #8
 8002a1c:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x04] = 4;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2204      	movs	r2, #4
 8002a24:	f883 2514 	strb.w	r2, [r3, #1300]	@ 0x514
			p_dev->temp_buffer[0x05] = 4;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	f883 2515 	strb.w	r2, [r3, #1301]	@ 0x515
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 8002a36:	2308      	movs	r3, #8
 8002a38:	f245 4250 	movw	r2, #21584	@ 0x5450
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f979 	bl	8002d34 <vl53l5cx_dci_write_data>
 8002a42:	4603      	mov	r3, r0
 8002a44:	461a      	mov	r2, r3
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);

			break;
 8002a4c:	e002      	b.n	8002a54 <vl53l5cx_set_resolution+0x176>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8002a4e:	237f      	movs	r3, #127	@ 0x7f
 8002a50:	73fb      	strb	r3, [r7, #15]
			break;
 8002a52:	bf00      	nop
		}

	status |= _vl53l5cx_send_offset_data(p_dev, resolution);
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	4619      	mov	r1, r3
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7fe fc17 	bl	800128c <_vl53l5cx_send_offset_data>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	461a      	mov	r2, r3
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l5cx_send_xtalk_data(p_dev, resolution);
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7fe fddb 	bl	8001628 <_vl53l5cx_send_xtalk_data>
 8002a72:	4603      	mov	r3, r0
 8002a74:	461a      	mov	r2, r3
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	73fb      	strb	r3, [r7, #15]

	return status;
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <vl53l5cx_set_ranging_frequency_hz>:
}

uint8_t vl53l5cx_set_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b088      	sub	sp, #32
 8002a8a:	af04      	add	r7, sp, #16
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	9302      	str	r3, [sp, #8]
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	1cfb      	adds	r3, r7, #3
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2304      	movs	r3, #4
 8002aaa:	f245 4258 	movw	r2, #21592	@ 0x5458
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f9df 	bl	8002e72 <vl53l5cx_dci_replace_data>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <vl53l5cx_set_sharpener_percent>:
}

uint8_t vl53l5cx_set_sharpener_percent(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				sharpener_percent)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af04      	add	r7, sp, #16
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
        uint8_t sharpener;

	if(sharpener_percent >= (uint8_t)100)
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	2b63      	cmp	r3, #99	@ 0x63
 8002adc:	d904      	bls.n	8002ae8 <vl53l5cx_set_sharpener_percent+0x20>
	{
		status |= VL53L5CX_STATUS_INVALID_PARAM;
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8002ae4:	73fb      	strb	r3, [r7, #15]
 8002ae6:	e020      	b.n	8002b2a <vl53l5cx_set_sharpener_percent+0x62>
	}
	else
	{
		sharpener = (sharpener_percent*(uint8_t)255)/(uint8_t)100;
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	4613      	mov	r3, r2
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	1a9b      	subs	r3, r3, r2
 8002af0:	4a10      	ldr	r2, [pc, #64]	@ (8002b34 <vl53l5cx_set_sharpener_percent+0x6c>)
 8002af2:	fb82 1203 	smull	r1, r2, r2, r3
 8002af6:	1152      	asrs	r2, r2, #5
 8002af8:	17db      	asrs	r3, r3, #31
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	73bb      	strb	r3, [r7, #14]
		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002b06:	230d      	movs	r3, #13
 8002b08:	9302      	str	r3, [sp, #8]
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	9301      	str	r3, [sp, #4]
 8002b0e:	f107 030e 	add.w	r3, r7, #14
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	2310      	movs	r3, #16
 8002b16:	f64a 62d8 	movw	r2, #44760	@ 0xaed8
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f9a9 	bl	8002e72 <vl53l5cx_dci_replace_data>
 8002b20:	4603      	mov	r3, r0
 8002b22:	461a      	mov	r2, r3
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	73fb      	strb	r3, [r7, #15]
				VL53L5CX_DCI_SHARPENER, 16,
                                (uint8_t*)&sharpener, 1, 0xD);
	}

	return status;
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	51eb851f 	.word	0x51eb851f

08002b38 <vl53l5cx_set_target_order>:
}

uint8_t vl53l5cx_set_target_order(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				target_order)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af04      	add	r7, sp, #16
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	73fb      	strb	r3, [r7, #15]

	if((target_order == (uint8_t)VL53L5CX_TARGET_ORDER_CLOSEST)
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d002      	beq.n	8002b54 <vl53l5cx_set_target_order+0x1c>
		|| (target_order == (uint8_t)VL53L5CX_TARGET_ORDER_STRONGEST))
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d114      	bne.n	8002b7e <vl53l5cx_set_target_order+0x46>
	{
		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	9302      	str	r3, [sp, #8]
 8002b5e:	2301      	movs	r3, #1
 8002b60:	9301      	str	r3, [sp, #4]
 8002b62:	1cfb      	adds	r3, r7, #3
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	2304      	movs	r3, #4
 8002b68:	f64a 6264 	movw	r2, #44644	@ 0xae64
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f980 	bl	8002e72 <vl53l5cx_dci_replace_data>
 8002b72:	4603      	mov	r3, r0
 8002b74:	461a      	mov	r2, r3
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	73fb      	strb	r3, [r7, #15]
				VL53L5CX_DCI_TARGET_ORDER, 4,
                                (uint8_t*)&target_order, 1, 0x0);
 8002b7c:	e003      	b.n	8002b86 <vl53l5cx_set_target_order+0x4e>
	}else
	{
		status |= VL53L5CX_STATUS_INVALID_PARAM;
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	f043 037f 	orr.w	r3, r3, #127	@ 0x7f
 8002b84:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <vl53l5cx_set_ranging_mode>:
}

uint8_t vl53l5cx_set_ranging_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002baa:	2308      	movs	r3, #8
 8002bac:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f845 	bl	8002c40 <vl53l5cx_dci_read_data>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d002      	beq.n	8002bcc <vl53l5cx_set_ranging_mode+0x3c>
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d00b      	beq.n	8002be2 <vl53l5cx_set_ranging_mode+0x52>
 8002bca:	e015      	b.n	8002bf8 <vl53l5cx_set_ranging_mode+0x68>
	{
		case VL53L5CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	f883 2513 	strb.w	r2, [r3, #1299]	@ 0x513
			single_range = 0x00;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60bb      	str	r3, [r7, #8]
			break;
 8002be0:	e00d      	b.n	8002bfe <vl53l5cx_set_ranging_mode+0x6e>

		case VL53L5CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2203      	movs	r2, #3
 8002be6:	f883 2511 	strb.w	r2, [r3, #1297]	@ 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2202      	movs	r2, #2
 8002bee:	f883 2513 	strb.w	r2, [r3, #1299]	@ 0x513
			single_range = 0x01;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	60bb      	str	r3, [r7, #8]
			break;
 8002bf6:	e002      	b.n	8002bfe <vl53l5cx_set_ranging_mode+0x6e>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8002bf8:	237f      	movs	r3, #127	@ 0x7f
 8002bfa:	73fb      	strb	r3, [r7, #15]
			break;
 8002bfc:	bf00      	nop
	}

	status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002c04:	2308      	movs	r3, #8
 8002c06:	f64a 5230 	movw	r2, #44336	@ 0xad30
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f892 	bl	8002d34 <vl53l5cx_dci_write_data>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8002c1a:	f107 0108 	add.w	r1, r7, #8
 8002c1e:	2304      	movs	r3, #4
 8002c20:	f64d 1264 	movw	r2, #55652	@ 0xd964
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f885 	bl	8002d34 <vl53l5cx_dci_write_data>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_SINGLE_RANGE,
                        (uint16_t)sizeof(single_range));

	return status;
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	@ 0x28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8002c54:	887b      	ldrh	r3, [r7, #2]
 8002c56:	330c      	adds	r3, #12
 8002c58:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8002c5a:	4a35      	ldr	r2, [pc, #212]	@ (8002d30 <vl53l5cx_dci_read_data+0xf0>)
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 8002c66:	887b      	ldrh	r3, [r7, #2]
 8002c68:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8002c6c:	d903      	bls.n	8002c76 <vl53l5cx_dci_read_data+0x36>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8002c6e:	23ff      	movs	r3, #255	@ 0xff
 8002c70:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002c74:	e055      	b.n	8002d22 <vl53l5cx_dci_read_data+0xe2>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8002c84:	887b      	ldrh	r3, [r7, #2]
 8002c86:	111b      	asrs	r3, r3, #4
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8002c8c:	887b      	ldrh	r3, [r7, #2]
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= VL53L5CX_WrMulti(&(p_dev->platform),
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f107 0214 	add.w	r2, r7, #20
 8002c9c:	230c      	movs	r3, #12
 8002c9e:	f642 71f4 	movw	r1, #12276	@ 0x2ff4
 8002ca2:	f000 f981 	bl	8002fa8 <VL53L5CX_WrMulti>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	b25a      	sxtb	r2, r3
 8002caa:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	b25b      	sxtb	r3, r3
 8002cb2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		/*status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);*/

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8002cb6:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
		status |= VL53L5CX_RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	f642 4104 	movw	r1, #11268	@ 0x2c04
 8002cc4:	f000 f986 	bl	8002fd4 <VL53L5CX_RdMulti>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	b25a      	sxtb	r2, r3
 8002ccc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	b25b      	sxtb	r3, r3
 8002cd4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		VL53L5CX_SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
 8002cde:	887b      	ldrh	r3, [r7, #2]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	f000 f98a 	bl	8003000 <VL53L5CX_SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8002cec:	2300      	movs	r3, #0
 8002cee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002cf0:	e011      	b.n	8002d16 <vl53l5cx_dci_read_data+0xd6>
			data[i] = p_dev->temp_buffer[i + 4];
 8002cf2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002cf6:	1d1a      	adds	r2, r3, #4
 8002cf8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	440b      	add	r3, r1
 8002d00:	68f9      	ldr	r1, [r7, #12]
 8002d02:	440a      	add	r2, r1
 8002d04:	f892 2510 	ldrb.w	r2, [r2, #1296]	@ 0x510
 8002d08:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8002d0a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3301      	adds	r3, #1
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002d16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d1a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	dbe7      	blt.n	8002cf2 <vl53l5cx_dci_read_data+0xb2>
		}
	}

	return status;
 8002d22:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3728      	adds	r7, #40	@ 0x28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	08009cdc 	.word	0x08009cdc

08002d34 <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08c      	sub	sp, #48	@ 0x30
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	753b      	strb	r3, [r7, #20]
 8002d50:	2300      	movs	r3, #0
 8002d52:	757b      	strb	r3, [r7, #21]
 8002d54:	2300      	movs	r3, #0
 8002d56:	75bb      	strb	r3, [r7, #22]
 8002d58:	230f      	movs	r3, #15
 8002d5a:	75fb      	strb	r3, [r7, #23]
 8002d5c:	2305      	movs	r3, #5
 8002d5e:	763b      	strb	r3, [r7, #24]
 8002d60:	2301      	movs	r3, #1
 8002d62:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8),
 8002d64:	887b      	ldrh	r3, [r7, #2]
 8002d66:	3308      	adds	r3, #8
 8002d68:	121b      	asrs	r3, r3, #8
 8002d6a:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002d6c:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8002d6e:	887b      	ldrh	r3, [r7, #2]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	3308      	adds	r3, #8
 8002d74:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002d76:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END -
 8002d78:	887b      	ldrh	r3, [r7, #2]
 8002d7a:	f5c3 533f 	rsb	r3, r3, #12224	@ 0x2fc0
 8002d7e:	3334      	adds	r3, #52	@ 0x34
 8002d80:	847b      	strh	r3, [r7, #34]	@ 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12)
 8002d82:	887b      	ldrh	r3, [r7, #2]
 8002d84:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8002d88:	d903      	bls.n	8002d92 <vl53l5cx_dci_write_data+0x5e>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 8002d8a:	23ff      	movs	r3, #255	@ 0xff
 8002d8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002d90:	e069      	b.n	8002e66 <vl53l5cx_dci_write_data+0x132>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8002da0:	887b      	ldrh	r3, [r7, #2]
 8002da2:	111b      	asrs	r3, r3, #4
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8002da8:	887b      	ldrh	r3, [r7, #2]
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		VL53L5CX_SwapBuffer(data, data_size);
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	4619      	mov	r1, r3
 8002db6:	68b8      	ldr	r0, [r7, #8]
 8002db8:	f000 f922 	bl	8003000 <VL53L5CX_SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8002dbc:	887b      	ldrh	r3, [r7, #2]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002dc4:	e012      	b.n	8002dec <vl53l5cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8002dc6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	441a      	add	r2, r3
 8002dce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	7811      	ldrb	r1, [r2, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4413      	add	r3, r2
 8002dda:	460a      	mov	r2, r1
 8002ddc:	f883 2510 	strb.w	r2, [r3, #1296]	@ 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8002de0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002dec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	dae8      	bge.n	8002dc6 <vl53l5cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8002dfe:	887b      	ldrh	r3, [r7, #2]
 8002e00:	3304      	adds	r3, #4
 8002e02:	f503 63a2 	add.w	r3, r3, #1296	@ 0x510
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4413      	add	r3, r2
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	cb03      	ldmia	r3!, {r0, r1}
 8002e12:	6010      	str	r0, [r2, #0]
 8002e14:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= VL53L5CX_WrMulti(&(p_dev->platform),address,
 8002e16:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f503 62a2 	add.w	r2, r3, #1296	@ 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8002e1e:	887b      	ldrh	r3, [r7, #2]
		status |= VL53L5CX_WrMulti(&(p_dev->platform),address,
 8002e20:	330c      	adds	r3, #12
 8002e22:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8002e24:	f000 f8c0 	bl	8002fa8 <VL53L5CX_WrMulti>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	b25a      	sxtb	r2, r3
 8002e2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002e30:	4313      	orrs	r3, r2
 8002e32:	b25b      	sxtb	r3, r3
 8002e34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002e38:	2303      	movs	r3, #3
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	23ff      	movs	r3, #255	@ 0xff
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8002e44:	2201      	movs	r2, #1
 8002e46:	2104      	movs	r1, #4
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f7fe f986 	bl	800115a <_vl53l5cx_poll_for_answer>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	461a      	mov	r2, r3
 8002e52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		VL53L5CX_SwapBuffer(data, data_size);
 8002e5c:	887b      	ldrh	r3, [r7, #2]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	68b8      	ldr	r0, [r7, #8]
 8002e62:	f000 f8cd 	bl	8003000 <VL53L5CX_SwapBuffer>
	}

	return status;
 8002e66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3728      	adds	r7, #40	@ 0x28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
 8002e7e:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	75fb      	strb	r3, [r7, #23]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 8002e84:	887b      	ldrh	r3, [r7, #2]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7ff fed8 	bl	8002c40 <vl53l5cx_dci_read_data>
 8002e90:	4603      	mov	r3, r0
 8002e92:	461a      	mov	r2, r3
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8002e9a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ea2:	6a39      	ldr	r1, [r7, #32]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f006 f9b4 	bl	8009212 <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 8002eaa:	887b      	ldrh	r3, [r7, #2]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f7ff ff3f 	bl	8002d34 <vl53l5cx_dci_write_data>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	461a      	mov	r2, r3
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	75fb      	strb	r3, [r7, #23]

	return status;
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <vl53l5cx_set_detection_thresholds_enable>:
}

uint8_t vl53l5cx_set_detection_thresholds_enable(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b088      	sub	sp, #32
 8002ece:	af04      	add	r7, sp, #16
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 8002eda:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002ede:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d104      	bne.n	8002ef0 <vl53l5cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 8002eea:	2304      	movs	r3, #4
 8002eec:	73bb      	strb	r3, [r7, #14]
 8002eee:	e003      	b.n	8002ef8 <vl53l5cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 8002ef4:	230c      	movs	r3, #12
 8002ef6:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002efe:	2300      	movs	r3, #0
 8002f00:	9302      	str	r3, [sp, #8]
 8002f02:	2304      	movs	r3, #4
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	f107 0308 	add.w	r3, r7, #8
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2308      	movs	r3, #8
 8002f0e:	f24b 62e0 	movw	r2, #46816	@ 0xb6e0
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff ffad 	bl	8002e72 <vl53l5cx_dci_replace_data>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f503 61a2 	add.w	r1, r3, #1296	@ 0x510
 8002f28:	2311      	movs	r3, #17
 8002f2a:	9302      	str	r3, [sp, #8]
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	f107 030e 	add.w	r3, r7, #14
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	2314      	movs	r3, #20
 8002f38:	f245 4288 	movw	r2, #21640	@ 0x5488
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff ff98 	bl	8002e72 <vl53l5cx_dci_replace_data>
 8002f42:	4603      	mov	r3, r0
 8002f44:	461a      	mov	r2, r3
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <VL53L5CX_RdByte>:

int32_t VL53L5CX_RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8002f56:	b590      	push	{r4, r7, lr}
 8002f58:	b085      	sub	sp, #20
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689c      	ldr	r4, [r3, #8]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8818      	ldrh	r0, [r3, #0]
 8002f6c:	8979      	ldrh	r1, [r7, #10]
 8002f6e:	2301      	movs	r3, #1
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	47a0      	blx	r4
 8002f74:	4603      	mov	r3, r0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd90      	pop	{r4, r7, pc}

08002f7e <VL53L5CX_WrByte>:

int32_t VL53L5CX_WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8002f7e:	b590      	push	{r4, r7, lr}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	807b      	strh	r3, [r7, #2]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685c      	ldr	r4, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	8818      	ldrh	r0, [r3, #0]
 8002f96:	1c7a      	adds	r2, r7, #1
 8002f98:	8879      	ldrh	r1, [r7, #2]
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	47a0      	blx	r4
 8002f9e:	4603      	mov	r3, r0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd90      	pop	{r4, r7, pc}

08002fa8 <VL53L5CX_WrMulti>:
int32_t VL53L5CX_WrMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	685c      	ldr	r4, [r3, #4]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8818      	ldrh	r0, [r3, #0]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	8979      	ldrh	r1, [r7, #10]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	47a0      	blx	r4
 8002fca:	4603      	mov	r3, r0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd90      	pop	{r4, r7, pc}

08002fd4 <VL53L5CX_RdMulti>:
int32_t VL53L5CX_RdMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	607a      	str	r2, [r7, #4]
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689c      	ldr	r4, [r3, #8]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8818      	ldrh	r0, [r3, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	8979      	ldrh	r1, [r7, #10]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	47a0      	blx	r4
 8002ff6:	4603      	mov	r3, r0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd90      	pop	{r4, r7, pc}

08003000 <VL53L5CX_SwapBuffer>:

void VL53L5CX_SwapBuffer(
    uint8_t     *buffer,
    uint16_t     size)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	807b      	strh	r3, [r7, #2]
  uint32_t i, tmp;


  for(i = 0; i < size; i = i + 4)
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	e021      	b.n	8003056 <VL53L5CX_SwapBuffer+0x56>
  {
    tmp = (
      buffer[i]<<24)
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	061a      	lsls	r2, r3, #24
    |(buffer[i+1]<<16)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3301      	adds	r3, #1
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	440b      	add	r3, r1
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	041b      	lsls	r3, r3, #16
 8003028:	431a      	orrs	r2, r3
    |(buffer[i+2]<<8)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3302      	adds	r3, #2
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	440b      	add	r3, r1
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	021b      	lsls	r3, r3, #8
 8003036:	4313      	orrs	r3, r2
    |(buffer[i+3]);
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	3203      	adds	r2, #3
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	440a      	add	r2, r1
 8003040:	7812      	ldrb	r2, [r2, #0]
 8003042:	4313      	orrs	r3, r2
    tmp = (
 8003044:	60bb      	str	r3, [r7, #8]

    memcpy(&(buffer[i]), &tmp, 4);
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4413      	add	r3, r2
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	601a      	str	r2, [r3, #0]
  for(i = 0; i < size; i = i + 4)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3304      	adds	r3, #4
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	887b      	ldrh	r3, [r7, #2]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	429a      	cmp	r2, r3
 800305c:	d3d9      	bcc.n	8003012 <VL53L5CX_SwapBuffer+0x12>
  }
}
 800305e:	bf00      	nop
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <VL53L5CX_WaitMs>:

int32_t VL53L5CX_WaitMs(
		VL53L5CX_Platform *p_platform,
		uint32_t TimeMs)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	4798      	blx	r3
 800307c:	4603      	mov	r3, r0
 800307e:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 8003080:	bf00      	nop
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	4798      	blx	r3
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d8f5      	bhi.n	8003082 <VL53L5CX_WaitMs+0x16>

  return 0;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <VL53L5CX_I2C_Write>:

/**
 * @brief Scrive su I²C (indirizzo a 16 bit).
 */
int32_t VL53L5CX_I2C_Write(uint16_t DevAddr, uint16_t Reg,
                           uint8_t *pData, uint16_t Length) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af04      	add	r7, sp, #16
 80030a6:	60ba      	str	r2, [r7, #8]
 80030a8:	461a      	mov	r2, r3
 80030aa:	4603      	mov	r3, r0
 80030ac:	81fb      	strh	r3, [r7, #14]
 80030ae:	460b      	mov	r3, r1
 80030b0:	81bb      	strh	r3, [r7, #12]
 80030b2:	4613      	mov	r3, r2
 80030b4:	80fb      	strh	r3, [r7, #6]
    if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg,
 80030b6:	89ba      	ldrh	r2, [r7, #12]
 80030b8:	89f9      	ldrh	r1, [r7, #14]
 80030ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030be:	9302      	str	r3, [sp, #8]
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	9301      	str	r3, [sp, #4]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	2310      	movs	r3, #16
 80030ca:	4806      	ldr	r0, [pc, #24]	@ (80030e4 <VL53L5CX_I2C_Write+0x44>)
 80030cc:	f000 fd30 	bl	8003b30 <HAL_I2C_Mem_Write>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <VL53L5CX_I2C_Write+0x3a>
                          I2C_MEMADD_SIZE_16BIT, pData,
                          Length, 1000) == HAL_OK) {
        return 0; // Successo
 80030d6:	2300      	movs	r3, #0
 80030d8:	e000      	b.n	80030dc <VL53L5CX_I2C_Write+0x3c>
    }
    return 255; // Errore
 80030da:	23ff      	movs	r3, #255	@ 0xff
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	2000009c 	.word	0x2000009c

080030e8 <VL53L5CX_I2C_Read>:

/**
 * @brief Legge da I²C (indirizzo a 16 bit).
 */
int32_t VL53L5CX_I2C_Read(uint16_t DevAddr, uint16_t Reg,
                          uint8_t *pData, uint16_t Length) {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af04      	add	r7, sp, #16
 80030ee:	60ba      	str	r2, [r7, #8]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4603      	mov	r3, r0
 80030f4:	81fb      	strh	r3, [r7, #14]
 80030f6:	460b      	mov	r3, r1
 80030f8:	81bb      	strh	r3, [r7, #12]
 80030fa:	4613      	mov	r3, r2
 80030fc:	80fb      	strh	r3, [r7, #6]
    if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg,
 80030fe:	89ba      	ldrh	r2, [r7, #12]
 8003100:	89f9      	ldrh	r1, [r7, #14]
 8003102:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003106:	9302      	str	r3, [sp, #8]
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	9301      	str	r3, [sp, #4]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	2310      	movs	r3, #16
 8003112:	4806      	ldr	r0, [pc, #24]	@ (800312c <VL53L5CX_I2C_Read+0x44>)
 8003114:	f000 fe06 	bl	8003d24 <HAL_I2C_Mem_Read>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <VL53L5CX_I2C_Read+0x3a>
                         I2C_MEMADD_SIZE_16BIT, pData,
                         Length, 1000) == HAL_OK) {
        return 0; // Successo
 800311e:	2300      	movs	r3, #0
 8003120:	e000      	b.n	8003124 <VL53L5CX_I2C_Read+0x3c>
    }
    return 255; // Errore
 8003122:	23ff      	movs	r3, #255	@ 0xff
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	2000009c 	.word	0x2000009c

08003130 <VL53L5CX_GetTick>:

/**
 * @brief Restituisce il tick corrente (ms).
 */
int32_t VL53L5CX_GetTick(void) {
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8003134:	f000 f86a 	bl	800320c <HAL_GetTick>
 8003138:	4603      	mov	r3, r0
}
 800313a:	4618      	mov	r0, r3
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003144:	4b0e      	ldr	r3, [pc, #56]	@ (8003180 <HAL_Init+0x40>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a0d      	ldr	r2, [pc, #52]	@ (8003180 <HAL_Init+0x40>)
 800314a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800314e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003150:	4b0b      	ldr	r3, [pc, #44]	@ (8003180 <HAL_Init+0x40>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a0a      	ldr	r2, [pc, #40]	@ (8003180 <HAL_Init+0x40>)
 8003156:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800315a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800315c:	4b08      	ldr	r3, [pc, #32]	@ (8003180 <HAL_Init+0x40>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a07      	ldr	r2, [pc, #28]	@ (8003180 <HAL_Init+0x40>)
 8003162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003166:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003168:	2003      	movs	r0, #3
 800316a:	f000 f94f 	bl	800340c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800316e:	2000      	movs	r0, #0
 8003170:	f000 f808 	bl	8003184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003174:	f7fd fd22 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023c00 	.word	0x40023c00

08003184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800318c:	4b12      	ldr	r3, [pc, #72]	@ (80031d8 <HAL_InitTick+0x54>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b12      	ldr	r3, [pc, #72]	@ (80031dc <HAL_InitTick+0x58>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	4619      	mov	r1, r3
 8003196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800319a:	fbb3 f3f1 	udiv	r3, r3, r1
 800319e:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 f967 	bl	8003476 <HAL_SYSTICK_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e00e      	b.n	80031d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b0f      	cmp	r3, #15
 80031b6:	d80a      	bhi.n	80031ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031b8:	2200      	movs	r2, #0
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295
 80031c0:	f000 f92f 	bl	8003422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031c4:	4a06      	ldr	r2, [pc, #24]	@ (80031e0 <HAL_InitTick+0x5c>)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e000      	b.n	80031d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20000000 	.word	0x20000000
 80031dc:	20000008 	.word	0x20000008
 80031e0:	20000004 	.word	0x20000004

080031e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031e8:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <HAL_IncTick+0x20>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <HAL_IncTick+0x24>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4413      	add	r3, r2
 80031f4:	4a04      	ldr	r2, [pc, #16]	@ (8003208 <HAL_IncTick+0x24>)
 80031f6:	6013      	str	r3, [r2, #0]
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000008 	.word	0x20000008
 8003208:	200001d4 	.word	0x200001d4

0800320c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return uwTick;
 8003210:	4b03      	ldr	r3, [pc, #12]	@ (8003220 <HAL_GetTick+0x14>)
 8003212:	681b      	ldr	r3, [r3, #0]
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	200001d4 	.word	0x200001d4

08003224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800322c:	f7ff ffee 	bl	800320c <HAL_GetTick>
 8003230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d005      	beq.n	800324a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800323e:	4b0a      	ldr	r3, [pc, #40]	@ (8003268 <HAL_Delay+0x44>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800324a:	bf00      	nop
 800324c:	f7ff ffde 	bl	800320c <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	429a      	cmp	r2, r3
 800325a:	d8f7      	bhi.n	800324c <HAL_Delay+0x28>
  {
  }
}
 800325c:	bf00      	nop
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000008 	.word	0x20000008

0800326c <__NVIC_SetPriorityGrouping>:
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800327c:	4b0c      	ldr	r3, [pc, #48]	@ (80032b0 <__NVIC_SetPriorityGrouping+0x44>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003288:	4013      	ands	r3, r2
 800328a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003294:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800329c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800329e:	4a04      	ldr	r2, [pc, #16]	@ (80032b0 <__NVIC_SetPriorityGrouping+0x44>)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	60d3      	str	r3, [r2, #12]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <__NVIC_GetPriorityGrouping>:
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032b8:	4b04      	ldr	r3, [pc, #16]	@ (80032cc <__NVIC_GetPriorityGrouping+0x18>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	0a1b      	lsrs	r3, r3, #8
 80032be:	f003 0307 	and.w	r3, r3, #7
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	e000ed00 	.word	0xe000ed00

080032d0 <__NVIC_EnableIRQ>:
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	db0b      	blt.n	80032fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	f003 021f 	and.w	r2, r3, #31
 80032e8:	4907      	ldr	r1, [pc, #28]	@ (8003308 <__NVIC_EnableIRQ+0x38>)
 80032ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	2001      	movs	r0, #1
 80032f2:	fa00 f202 	lsl.w	r2, r0, r2
 80032f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	e000e100 	.word	0xe000e100

0800330c <__NVIC_SetPriority>:
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	6039      	str	r1, [r7, #0]
 8003316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331c:	2b00      	cmp	r3, #0
 800331e:	db0a      	blt.n	8003336 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	b2da      	uxtb	r2, r3
 8003324:	490c      	ldr	r1, [pc, #48]	@ (8003358 <__NVIC_SetPriority+0x4c>)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	0112      	lsls	r2, r2, #4
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	440b      	add	r3, r1
 8003330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003334:	e00a      	b.n	800334c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	b2da      	uxtb	r2, r3
 800333a:	4908      	ldr	r1, [pc, #32]	@ (800335c <__NVIC_SetPriority+0x50>)
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	3b04      	subs	r3, #4
 8003344:	0112      	lsls	r2, r2, #4
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	440b      	add	r3, r1
 800334a:	761a      	strb	r2, [r3, #24]
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	e000e100 	.word	0xe000e100
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <NVIC_EncodePriority>:
{
 8003360:	b480      	push	{r7}
 8003362:	b089      	sub	sp, #36	@ 0x24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f1c3 0307 	rsb	r3, r3, #7
 800337a:	2b04      	cmp	r3, #4
 800337c:	bf28      	it	cs
 800337e:	2304      	movcs	r3, #4
 8003380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3304      	adds	r3, #4
 8003386:	2b06      	cmp	r3, #6
 8003388:	d902      	bls.n	8003390 <NVIC_EncodePriority+0x30>
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	3b03      	subs	r3, #3
 800338e:	e000      	b.n	8003392 <NVIC_EncodePriority+0x32>
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003394:	f04f 32ff 	mov.w	r2, #4294967295
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43da      	mvns	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	401a      	ands	r2, r3
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033a8:	f04f 31ff 	mov.w	r1, #4294967295
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	fa01 f303 	lsl.w	r3, r1, r3
 80033b2:	43d9      	mvns	r1, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b8:	4313      	orrs	r3, r2
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3724      	adds	r7, #36	@ 0x24
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
	...

080033c8 <SysTick_Config>:
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033d8:	d301      	bcc.n	80033de <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80033da:	2301      	movs	r3, #1
 80033dc:	e00f      	b.n	80033fe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033de:	4a0a      	ldr	r2, [pc, #40]	@ (8003408 <SysTick_Config+0x40>)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033e6:	210f      	movs	r1, #15
 80033e8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ec:	f7ff ff8e 	bl	800330c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033f0:	4b05      	ldr	r3, [pc, #20]	@ (8003408 <SysTick_Config+0x40>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033f6:	4b04      	ldr	r3, [pc, #16]	@ (8003408 <SysTick_Config+0x40>)
 80033f8:	2207      	movs	r2, #7
 80033fa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	e000e010 	.word	0xe000e010

0800340c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff ff29 	bl	800326c <__NVIC_SetPriorityGrouping>
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003422:	b580      	push	{r7, lr}
 8003424:	b086      	sub	sp, #24
 8003426:	af00      	add	r7, sp, #0
 8003428:	4603      	mov	r3, r0
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003434:	f7ff ff3e 	bl	80032b4 <__NVIC_GetPriorityGrouping>
 8003438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	6978      	ldr	r0, [r7, #20]
 8003440:	f7ff ff8e 	bl	8003360 <NVIC_EncodePriority>
 8003444:	4602      	mov	r2, r0
 8003446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800344a:	4611      	mov	r1, r2
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff ff5d 	bl	800330c <__NVIC_SetPriority>
}
 8003452:	bf00      	nop
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	4603      	mov	r3, r0
 8003462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff ff31 	bl	80032d0 <__NVIC_EnableIRQ>
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff ffa2 	bl	80033c8 <SysTick_Config>
 8003484:	4603      	mov	r3, r0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d004      	beq.n	80034ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2280      	movs	r2, #128	@ 0x80
 80034a6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e00c      	b.n	80034c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2205      	movs	r2, #5
 80034b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0201 	bic.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034e0:	b2db      	uxtb	r3, r3
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b089      	sub	sp, #36	@ 0x24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034fe:	2300      	movs	r3, #0
 8003500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003502:	2300      	movs	r3, #0
 8003504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
 800350a:	e165      	b.n	80037d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800350c:	2201      	movs	r2, #1
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4013      	ands	r3, r2
 800351e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	429a      	cmp	r2, r3
 8003526:	f040 8154 	bne.w	80037d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	2b01      	cmp	r3, #1
 8003534:	d005      	beq.n	8003542 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800353e:	2b02      	cmp	r3, #2
 8003540:	d130      	bne.n	80035a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	2203      	movs	r2, #3
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43db      	mvns	r3, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4013      	ands	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4313      	orrs	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003578:	2201      	movs	r2, #1
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f003 0201 	and.w	r2, r3, #1
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d017      	beq.n	80035e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	2203      	movs	r2, #3
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d123      	bne.n	8003634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	08da      	lsrs	r2, r3, #3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3208      	adds	r2, #8
 80035f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	220f      	movs	r2, #15
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	08da      	lsrs	r2, r3, #3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3208      	adds	r2, #8
 800362e:	69b9      	ldr	r1, [r7, #24]
 8003630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	2203      	movs	r2, #3
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 0203 	and.w	r2, r3, #3
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 80ae 	beq.w	80037d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	4b5d      	ldr	r3, [pc, #372]	@ (80037f0 <HAL_GPIO_Init+0x300>)
 800367c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367e:	4a5c      	ldr	r2, [pc, #368]	@ (80037f0 <HAL_GPIO_Init+0x300>)
 8003680:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003684:	6453      	str	r3, [r2, #68]	@ 0x44
 8003686:	4b5a      	ldr	r3, [pc, #360]	@ (80037f0 <HAL_GPIO_Init+0x300>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003692:	4a58      	ldr	r2, [pc, #352]	@ (80037f4 <HAL_GPIO_Init+0x304>)
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	089b      	lsrs	r3, r3, #2
 8003698:	3302      	adds	r3, #2
 800369a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	220f      	movs	r2, #15
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a4f      	ldr	r2, [pc, #316]	@ (80037f8 <HAL_GPIO_Init+0x308>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d025      	beq.n	800370a <HAL_GPIO_Init+0x21a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a4e      	ldr	r2, [pc, #312]	@ (80037fc <HAL_GPIO_Init+0x30c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d01f      	beq.n	8003706 <HAL_GPIO_Init+0x216>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a4d      	ldr	r2, [pc, #308]	@ (8003800 <HAL_GPIO_Init+0x310>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d019      	beq.n	8003702 <HAL_GPIO_Init+0x212>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a4c      	ldr	r2, [pc, #304]	@ (8003804 <HAL_GPIO_Init+0x314>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <HAL_GPIO_Init+0x20e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003808 <HAL_GPIO_Init+0x318>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00d      	beq.n	80036fa <HAL_GPIO_Init+0x20a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a4a      	ldr	r2, [pc, #296]	@ (800380c <HAL_GPIO_Init+0x31c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d007      	beq.n	80036f6 <HAL_GPIO_Init+0x206>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a49      	ldr	r2, [pc, #292]	@ (8003810 <HAL_GPIO_Init+0x320>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d101      	bne.n	80036f2 <HAL_GPIO_Init+0x202>
 80036ee:	2306      	movs	r3, #6
 80036f0:	e00c      	b.n	800370c <HAL_GPIO_Init+0x21c>
 80036f2:	2307      	movs	r3, #7
 80036f4:	e00a      	b.n	800370c <HAL_GPIO_Init+0x21c>
 80036f6:	2305      	movs	r3, #5
 80036f8:	e008      	b.n	800370c <HAL_GPIO_Init+0x21c>
 80036fa:	2304      	movs	r3, #4
 80036fc:	e006      	b.n	800370c <HAL_GPIO_Init+0x21c>
 80036fe:	2303      	movs	r3, #3
 8003700:	e004      	b.n	800370c <HAL_GPIO_Init+0x21c>
 8003702:	2302      	movs	r3, #2
 8003704:	e002      	b.n	800370c <HAL_GPIO_Init+0x21c>
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <HAL_GPIO_Init+0x21c>
 800370a:	2300      	movs	r3, #0
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	f002 0203 	and.w	r2, r2, #3
 8003712:	0092      	lsls	r2, r2, #2
 8003714:	4093      	lsls	r3, r2
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800371c:	4935      	ldr	r1, [pc, #212]	@ (80037f4 <HAL_GPIO_Init+0x304>)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	089b      	lsrs	r3, r3, #2
 8003722:	3302      	adds	r3, #2
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800372a:	4b3a      	ldr	r3, [pc, #232]	@ (8003814 <HAL_GPIO_Init+0x324>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	43db      	mvns	r3, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4013      	ands	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800374e:	4a31      	ldr	r2, [pc, #196]	@ (8003814 <HAL_GPIO_Init+0x324>)
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003754:	4b2f      	ldr	r3, [pc, #188]	@ (8003814 <HAL_GPIO_Init+0x324>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	43db      	mvns	r3, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4013      	ands	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003778:	4a26      	ldr	r2, [pc, #152]	@ (8003814 <HAL_GPIO_Init+0x324>)
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800377e:	4b25      	ldr	r3, [pc, #148]	@ (8003814 <HAL_GPIO_Init+0x324>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	43db      	mvns	r3, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4013      	ands	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003814 <HAL_GPIO_Init+0x324>)
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003814 <HAL_GPIO_Init+0x324>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037cc:	4a11      	ldr	r2, [pc, #68]	@ (8003814 <HAL_GPIO_Init+0x324>)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	3301      	adds	r3, #1
 80037d6:	61fb      	str	r3, [r7, #28]
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	2b0f      	cmp	r3, #15
 80037dc:	f67f ae96 	bls.w	800350c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	3724      	adds	r7, #36	@ 0x24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800
 80037f4:	40013800 	.word	0x40013800
 80037f8:	40020000 	.word	0x40020000
 80037fc:	40020400 	.word	0x40020400
 8003800:	40020800 	.word	0x40020800
 8003804:	40020c00 	.word	0x40020c00
 8003808:	40021000 	.word	0x40021000
 800380c:	40021400 	.word	0x40021400
 8003810:	40021800 	.word	0x40021800
 8003814:	40013c00 	.word	0x40013c00

08003818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	807b      	strh	r3, [r7, #2]
 8003824:	4613      	mov	r3, r2
 8003826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003828:	787b      	ldrb	r3, [r7, #1]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800382e:	887a      	ldrh	r2, [r7, #2]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003834:	e003      	b.n	800383e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003836:	887b      	ldrh	r3, [r7, #2]
 8003838:	041a      	lsls	r2, r3, #16
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	619a      	str	r2, [r3, #24]
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003856:	4b08      	ldr	r3, [pc, #32]	@ (8003878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	4013      	ands	r3, r2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d006      	beq.n	8003870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003862:	4a05      	ldr	r2, [pc, #20]	@ (8003878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003864:	88fb      	ldrh	r3, [r7, #6]
 8003866:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	4618      	mov	r0, r3
 800386c:	f7fd f982 	bl	8000b74 <HAL_GPIO_EXTI_Callback>
  }
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40013c00 	.word	0x40013c00

0800387c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e12b      	b.n	8003ae6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd f9b2 	bl	8000c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2224      	movs	r2, #36	@ 0x24
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038e0:	f002 fdf0 	bl	80064c4 <HAL_RCC_GetPCLK1Freq>
 80038e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4a81      	ldr	r2, [pc, #516]	@ (8003af0 <HAL_I2C_Init+0x274>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d807      	bhi.n	8003900 <HAL_I2C_Init+0x84>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a80      	ldr	r2, [pc, #512]	@ (8003af4 <HAL_I2C_Init+0x278>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	bf94      	ite	ls
 80038f8:	2301      	movls	r3, #1
 80038fa:	2300      	movhi	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e006      	b.n	800390e <HAL_I2C_Init+0x92>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4a7d      	ldr	r2, [pc, #500]	@ (8003af8 <HAL_I2C_Init+0x27c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	bf94      	ite	ls
 8003908:	2301      	movls	r3, #1
 800390a:	2300      	movhi	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e0e7      	b.n	8003ae6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4a78      	ldr	r2, [pc, #480]	@ (8003afc <HAL_I2C_Init+0x280>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	0c9b      	lsrs	r3, r3, #18
 8003920:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	4a6a      	ldr	r2, [pc, #424]	@ (8003af0 <HAL_I2C_Init+0x274>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d802      	bhi.n	8003950 <HAL_I2C_Init+0xd4>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	3301      	adds	r3, #1
 800394e:	e009      	b.n	8003964 <HAL_I2C_Init+0xe8>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003956:	fb02 f303 	mul.w	r3, r2, r3
 800395a:	4a69      	ldr	r2, [pc, #420]	@ (8003b00 <HAL_I2C_Init+0x284>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	099b      	lsrs	r3, r3, #6
 8003962:	3301      	adds	r3, #1
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	430b      	orrs	r3, r1
 800396a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003976:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	495c      	ldr	r1, [pc, #368]	@ (8003af0 <HAL_I2C_Init+0x274>)
 8003980:	428b      	cmp	r3, r1
 8003982:	d819      	bhi.n	80039b8 <HAL_I2C_Init+0x13c>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	1e59      	subs	r1, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003992:	1c59      	adds	r1, r3, #1
 8003994:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003998:	400b      	ands	r3, r1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_I2C_Init+0x138>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1e59      	subs	r1, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ac:	3301      	adds	r3, #1
 80039ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b2:	e051      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 80039b4:	2304      	movs	r3, #4
 80039b6:	e04f      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d111      	bne.n	80039e4 <HAL_I2C_Init+0x168>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	1e58      	subs	r0, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6859      	ldr	r1, [r3, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	440b      	add	r3, r1
 80039ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d2:	3301      	adds	r3, #1
 80039d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bf0c      	ite	eq
 80039dc:	2301      	moveq	r3, #1
 80039de:	2300      	movne	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	e012      	b.n	8003a0a <HAL_I2C_Init+0x18e>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1e58      	subs	r0, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6859      	ldr	r1, [r3, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	0099      	lsls	r1, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fa:	3301      	adds	r3, #1
 80039fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_I2C_Init+0x196>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e022      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10e      	bne.n	8003a38 <HAL_I2C_Init+0x1bc>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1e58      	subs	r0, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6859      	ldr	r1, [r3, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	440b      	add	r3, r1
 8003a28:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a36:	e00f      	b.n	8003a58 <HAL_I2C_Init+0x1dc>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1e58      	subs	r0, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6859      	ldr	r1, [r3, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	0099      	lsls	r1, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	6809      	ldr	r1, [r1, #0]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69da      	ldr	r2, [r3, #28]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6911      	ldr	r1, [r2, #16]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	68d2      	ldr	r2, [r2, #12]
 8003a92:	4311      	orrs	r1, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	000186a0 	.word	0x000186a0
 8003af4:	001e847f 	.word	0x001e847f
 8003af8:	003d08ff 	.word	0x003d08ff
 8003afc:	431bde83 	.word	0x431bde83
 8003b00:	10624dd3 	.word	0x10624dd3

08003b04 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b16:	2b80      	cmp	r3, #128	@ 0x80
 8003b18:	d103      	bne.n	8003b22 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	611a      	str	r2, [r3, #16]
  }
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	4608      	mov	r0, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4603      	mov	r3, r0
 8003b40:	817b      	strh	r3, [r7, #10]
 8003b42:	460b      	mov	r3, r1
 8003b44:	813b      	strh	r3, [r7, #8]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b4a:	f7ff fb5f 	bl	800320c <HAL_GetTick>
 8003b4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	f040 80d9 	bne.w	8003d10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2319      	movs	r3, #25
 8003b64:	2201      	movs	r2, #1
 8003b66:	496d      	ldr	r1, [pc, #436]	@ (8003d1c <HAL_I2C_Mem_Write+0x1ec>)
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f002 f935 	bl	8005dd8 <I2C_WaitOnFlagUntilTimeout>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
 8003b76:	e0cc      	b.n	8003d12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_I2C_Mem_Write+0x56>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e0c5      	b.n	8003d12 <HAL_I2C_Mem_Write+0x1e2>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d007      	beq.n	8003bac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2221      	movs	r2, #33	@ 0x21
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2240      	movs	r2, #64	@ 0x40
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a3a      	ldr	r2, [r7, #32]
 8003bd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003bdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4a4d      	ldr	r2, [pc, #308]	@ (8003d20 <HAL_I2C_Mem_Write+0x1f0>)
 8003bec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bee:	88f8      	ldrh	r0, [r7, #6]
 8003bf0:	893a      	ldrh	r2, [r7, #8]
 8003bf2:	8979      	ldrh	r1, [r7, #10]
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f001 fec4 	bl	800598c <I2C_RequestMemoryWrite>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d052      	beq.n	8003cb0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e081      	b.n	8003d12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f002 f9fa 	bl	800600c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00d      	beq.n	8003c3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d107      	bne.n	8003c36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e06b      	b.n	8003d12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	781a      	ldrb	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d11b      	bne.n	8003cb0 <HAL_I2C_Mem_Write+0x180>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d017      	beq.n	8003cb0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	781a      	ldrb	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1aa      	bne.n	8003c0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f002 f9ed 	bl	800609c <I2C_WaitOnBTFFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00d      	beq.n	8003ce4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d107      	bne.n	8003ce0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cde:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e016      	b.n	8003d12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e000      	b.n	8003d12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
  }
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	00100002 	.word	0x00100002
 8003d20:	ffff0000 	.word	0xffff0000

08003d24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08c      	sub	sp, #48	@ 0x30
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	4611      	mov	r1, r2
 8003d30:	461a      	mov	r2, r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	817b      	strh	r3, [r7, #10]
 8003d36:	460b      	mov	r3, r1
 8003d38:	813b      	strh	r3, [r7, #8]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d3e:	f7ff fa65 	bl	800320c <HAL_GetTick>
 8003d42:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	f040 8214 	bne.w	800417a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	2319      	movs	r3, #25
 8003d58:	2201      	movs	r2, #1
 8003d5a:	497b      	ldr	r1, [pc, #492]	@ (8003f48 <HAL_I2C_Mem_Read+0x224>)
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f002 f83b 	bl	8005dd8 <I2C_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e207      	b.n	800417c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d101      	bne.n	8003d7a <HAL_I2C_Mem_Read+0x56>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e200      	b.n	800417c <HAL_I2C_Mem_Read+0x458>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d007      	beq.n	8003da0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2222      	movs	r2, #34	@ 0x22
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2240      	movs	r2, #64	@ 0x40
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4a5b      	ldr	r2, [pc, #364]	@ (8003f4c <HAL_I2C_Mem_Read+0x228>)
 8003de0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003de2:	88f8      	ldrh	r0, [r7, #6]
 8003de4:	893a      	ldrh	r2, [r7, #8]
 8003de6:	8979      	ldrh	r1, [r7, #10]
 8003de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dea:	9301      	str	r3, [sp, #4]
 8003dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	4603      	mov	r3, r0
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f001 fe60 	bl	8005ab8 <I2C_RequestMemoryRead>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e1bc      	b.n	800417c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d113      	bne.n	8003e32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	623b      	str	r3, [r7, #32]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	623b      	str	r3, [r7, #32]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	623b      	str	r3, [r7, #32]
 8003e1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	e190      	b.n	8004154 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d11b      	bne.n	8003e72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	e170      	b.n	8004154 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d11b      	bne.n	8003eb2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	e150      	b.n	8004154 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ec8:	e144      	b.n	8004154 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	f200 80f1 	bhi.w	80040b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d123      	bne.n	8003f24 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ede:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f002 f955 	bl	8006190 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e145      	b.n	800417c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f22:	e117      	b.n	8004154 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d14e      	bne.n	8003fca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f32:	2200      	movs	r2, #0
 8003f34:	4906      	ldr	r1, [pc, #24]	@ (8003f50 <HAL_I2C_Mem_Read+0x22c>)
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f001 ff4e 	bl	8005dd8 <I2C_WaitOnFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e11a      	b.n	800417c <HAL_I2C_Mem_Read+0x458>
 8003f46:	bf00      	nop
 8003f48:	00100002 	.word	0x00100002
 8003f4c:	ffff0000 	.word	0xffff0000
 8003f50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fc8:	e0c4      	b.n	8004154 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	496c      	ldr	r1, [pc, #432]	@ (8004184 <HAL_I2C_Mem_Read+0x460>)
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f001 feff 	bl	8005dd8 <I2C_WaitOnFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0cb      	b.n	800417c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402c:	2200      	movs	r2, #0
 800402e:	4955      	ldr	r1, [pc, #340]	@ (8004184 <HAL_I2C_Mem_Read+0x460>)
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f001 fed1 	bl	8005dd8 <I2C_WaitOnFlagUntilTimeout>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e09d      	b.n	800417c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800404e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040b4:	e04e      	b.n	8004154 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f002 f868 	bl	8006190 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e058      	b.n	800417c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b04      	cmp	r3, #4
 8004108:	d124      	bne.n	8004154 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410e:	2b03      	cmp	r3, #3
 8004110:	d107      	bne.n	8004122 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004120:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004158:	2b00      	cmp	r3, #0
 800415a:	f47f aeb6 	bne.w	8003eca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	e000      	b.n	800417c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800417a:	2302      	movs	r3, #2
  }
}
 800417c:	4618      	mov	r0, r3
 800417e:	3728      	adds	r7, #40	@ 0x28
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	00010004 	.word	0x00010004

08004188 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	2b10      	cmp	r3, #16
 80041b6:	d003      	beq.n	80041c0 <HAL_I2C_EV_IRQHandler+0x38>
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	2b40      	cmp	r3, #64	@ 0x40
 80041bc:	f040 80c1 	bne.w	8004342 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10d      	bne.n	80041f6 <HAL_I2C_EV_IRQHandler+0x6e>
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80041e0:	d003      	beq.n	80041ea <HAL_I2C_EV_IRQHandler+0x62>
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80041e8:	d101      	bne.n	80041ee <HAL_I2C_EV_IRQHandler+0x66>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <HAL_I2C_EV_IRQHandler+0x68>
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	f000 8132 	beq.w	800445a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00c      	beq.n	800421a <HAL_I2C_EV_IRQHandler+0x92>
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	0a5b      	lsrs	r3, r3, #9
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d006      	beq.n	800421a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f002 f84b 	bl	80062a8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fd9b 	bl	8004d4e <I2C_Master_SB>
 8004218:	e092      	b.n	8004340 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	08db      	lsrs	r3, r3, #3
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <HAL_I2C_EV_IRQHandler+0xb2>
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	0a5b      	lsrs	r3, r3, #9
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fe11 	bl	8004e5a <I2C_Master_ADD10>
 8004238:	e082      	b.n	8004340 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	085b      	lsrs	r3, r3, #1
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d009      	beq.n	800425a <HAL_I2C_EV_IRQHandler+0xd2>
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	0a5b      	lsrs	r3, r3, #9
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fe2b 	bl	8004eae <I2C_Master_ADDR>
 8004258:	e072      	b.n	8004340 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	089b      	lsrs	r3, r3, #2
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d03b      	beq.n	80042de <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004274:	f000 80f3 	beq.w	800445e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	09db      	lsrs	r3, r3, #7
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00f      	beq.n	80042a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	0a9b      	lsrs	r3, r3, #10
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d009      	beq.n	80042a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	089b      	lsrs	r3, r3, #2
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d103      	bne.n	80042a4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f9f3 	bl	8004688 <I2C_MasterTransmit_TXE>
 80042a2:	e04d      	b.n	8004340 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	089b      	lsrs	r3, r3, #2
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 80d6 	beq.w	800445e <HAL_I2C_EV_IRQHandler+0x2d6>
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	0a5b      	lsrs	r3, r3, #9
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 80cf 	beq.w	800445e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80042c0:	7bbb      	ldrb	r3, [r7, #14]
 80042c2:	2b21      	cmp	r3, #33	@ 0x21
 80042c4:	d103      	bne.n	80042ce <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fa7a 	bl	80047c0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042cc:	e0c7      	b.n	800445e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80042ce:	7bfb      	ldrb	r3, [r7, #15]
 80042d0:	2b40      	cmp	r3, #64	@ 0x40
 80042d2:	f040 80c4 	bne.w	800445e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fae8 	bl	80048ac <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042dc:	e0bf      	b.n	800445e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042ec:	f000 80b7 	beq.w	800445e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	099b      	lsrs	r3, r3, #6
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00f      	beq.n	800431c <HAL_I2C_EV_IRQHandler+0x194>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	0a9b      	lsrs	r3, r3, #10
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d009      	beq.n	800431c <HAL_I2C_EV_IRQHandler+0x194>
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	089b      	lsrs	r3, r3, #2
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d103      	bne.n	800431c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fb61 	bl	80049dc <I2C_MasterReceive_RXNE>
 800431a:	e011      	b.n	8004340 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	089b      	lsrs	r3, r3, #2
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 809a 	beq.w	800445e <HAL_I2C_EV_IRQHandler+0x2d6>
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	0a5b      	lsrs	r3, r3, #9
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8093 	beq.w	800445e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fc17 	bl	8004b6c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800433e:	e08e      	b.n	800445e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004340:	e08d      	b.n	800445e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d004      	beq.n	8004354 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	e007      	b.n	8004364 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	085b      	lsrs	r3, r3, #1
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d012      	beq.n	8004396 <HAL_I2C_EV_IRQHandler+0x20e>
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	0a5b      	lsrs	r3, r3, #9
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00c      	beq.n	8004396 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800438c:	69b9      	ldr	r1, [r7, #24]
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 ffdc 	bl	800534c <I2C_Slave_ADDR>
 8004394:	e066      	b.n	8004464 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d009      	beq.n	80043b6 <HAL_I2C_EV_IRQHandler+0x22e>
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	0a5b      	lsrs	r3, r3, #9
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f001 f816 	bl	80053e0 <I2C_Slave_STOPF>
 80043b4:	e056      	b.n	8004464 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043b6:	7bbb      	ldrb	r3, [r7, #14]
 80043b8:	2b21      	cmp	r3, #33	@ 0x21
 80043ba:	d002      	beq.n	80043c2 <HAL_I2C_EV_IRQHandler+0x23a>
 80043bc:	7bbb      	ldrb	r3, [r7, #14]
 80043be:	2b29      	cmp	r3, #41	@ 0x29
 80043c0:	d125      	bne.n	800440e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	09db      	lsrs	r3, r3, #7
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00f      	beq.n	80043ee <HAL_I2C_EV_IRQHandler+0x266>
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	0a9b      	lsrs	r3, r3, #10
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d009      	beq.n	80043ee <HAL_I2C_EV_IRQHandler+0x266>
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	089b      	lsrs	r3, r3, #2
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d103      	bne.n	80043ee <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fef2 	bl	80051d0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043ec:	e039      	b.n	8004462 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	089b      	lsrs	r3, r3, #2
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d033      	beq.n	8004462 <HAL_I2C_EV_IRQHandler+0x2da>
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	0a5b      	lsrs	r3, r3, #9
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d02d      	beq.n	8004462 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 ff1f 	bl	800524a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800440c:	e029      	b.n	8004462 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	099b      	lsrs	r3, r3, #6
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00f      	beq.n	800443a <HAL_I2C_EV_IRQHandler+0x2b2>
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	0a9b      	lsrs	r3, r3, #10
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d009      	beq.n	800443a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	089b      	lsrs	r3, r3, #2
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d103      	bne.n	800443a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 ff2a 	bl	800528c <I2C_SlaveReceive_RXNE>
 8004438:	e014      	b.n	8004464 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00e      	beq.n	8004464 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	0a5b      	lsrs	r3, r3, #9
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 ff58 	bl	8005308 <I2C_SlaveReceive_BTF>
 8004458:	e004      	b.n	8004464 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800445a:	bf00      	nop
 800445c:	e002      	b.n	8004464 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800445e:	bf00      	nop
 8004460:	e000      	b.n	8004464 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004462:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004464:	3720      	adds	r7, #32
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b08a      	sub	sp, #40	@ 0x28
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004482:	2300      	movs	r3, #0
 8004484:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800448c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	0a1b      	lsrs	r3, r3, #8
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00e      	beq.n	80044b8 <HAL_I2C_ER_IRQHandler+0x4e>
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	0a1b      	lsrs	r3, r3, #8
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d008      	beq.n	80044b8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	f043 0301 	orr.w	r3, r3, #1
 80044ac:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80044b6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	0a5b      	lsrs	r3, r3, #9
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00e      	beq.n	80044e2 <HAL_I2C_ER_IRQHandler+0x78>
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	0a1b      	lsrs	r3, r3, #8
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80044d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d2:	f043 0302 	orr.w	r3, r3, #2
 80044d6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80044e0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	0a9b      	lsrs	r3, r3, #10
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d03f      	beq.n	800456e <HAL_I2C_ER_IRQHandler+0x104>
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	0a1b      	lsrs	r3, r3, #8
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d039      	beq.n	800456e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80044fa:	7efb      	ldrb	r3, [r7, #27]
 80044fc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004512:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004514:	7ebb      	ldrb	r3, [r7, #26]
 8004516:	2b20      	cmp	r3, #32
 8004518:	d112      	bne.n	8004540 <HAL_I2C_ER_IRQHandler+0xd6>
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10f      	bne.n	8004540 <HAL_I2C_ER_IRQHandler+0xd6>
 8004520:	7cfb      	ldrb	r3, [r7, #19]
 8004522:	2b21      	cmp	r3, #33	@ 0x21
 8004524:	d008      	beq.n	8004538 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004526:	7cfb      	ldrb	r3, [r7, #19]
 8004528:	2b29      	cmp	r3, #41	@ 0x29
 800452a:	d005      	beq.n	8004538 <HAL_I2C_ER_IRQHandler+0xce>
 800452c:	7cfb      	ldrb	r3, [r7, #19]
 800452e:	2b28      	cmp	r3, #40	@ 0x28
 8004530:	d106      	bne.n	8004540 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b21      	cmp	r3, #33	@ 0x21
 8004536:	d103      	bne.n	8004540 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f001 f881 	bl	8005640 <I2C_Slave_AF>
 800453e:	e016      	b.n	800456e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004548:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	f043 0304 	orr.w	r3, r3, #4
 8004550:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004552:	7efb      	ldrb	r3, [r7, #27]
 8004554:	2b10      	cmp	r3, #16
 8004556:	d002      	beq.n	800455e <HAL_I2C_ER_IRQHandler+0xf4>
 8004558:	7efb      	ldrb	r3, [r7, #27]
 800455a:	2b40      	cmp	r3, #64	@ 0x40
 800455c:	d107      	bne.n	800456e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800456c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	0adb      	lsrs	r3, r3, #11
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00e      	beq.n	8004598 <HAL_I2C_ER_IRQHandler+0x12e>
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	0a1b      	lsrs	r3, r3, #8
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d008      	beq.n	8004598 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	f043 0308 	orr.w	r3, r3, #8
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004596:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459a:	2b00      	cmp	r3, #0
 800459c:	d008      	beq.n	80045b0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f001 f8bc 	bl	8005728 <I2C_ITError>
  }
}
 80045b0:	bf00      	nop
 80045b2:	3728      	adds	r7, #40	@ 0x28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	70fb      	strb	r3, [r7, #3]
 8004614:	4613      	mov	r3, r2
 8004616:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004696:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800469e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d150      	bne.n	8004750 <I2C_MasterTransmit_TXE+0xc8>
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	2b21      	cmp	r3, #33	@ 0x21
 80046b2:	d14d      	bne.n	8004750 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d01d      	beq.n	80046f6 <I2C_MasterTransmit_TXE+0x6e>
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d01a      	beq.n	80046f6 <I2C_MasterTransmit_TXE+0x6e>
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046c6:	d016      	beq.n	80046f6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80046d6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2211      	movs	r2, #17
 80046dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff ff62 	bl	80045b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046f4:	e060      	b.n	80047b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004704:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004714:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b40      	cmp	r3, #64	@ 0x40
 800472e:	d107      	bne.n	8004740 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff ff7d 	bl	8004638 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800473e:	e03b      	b.n	80047b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff ff35 	bl	80045b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800474e:	e033      	b.n	80047b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004750:	7bfb      	ldrb	r3, [r7, #15]
 8004752:	2b21      	cmp	r3, #33	@ 0x21
 8004754:	d005      	beq.n	8004762 <I2C_MasterTransmit_TXE+0xda>
 8004756:	7bbb      	ldrb	r3, [r7, #14]
 8004758:	2b40      	cmp	r3, #64	@ 0x40
 800475a:	d12d      	bne.n	80047b8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	2b22      	cmp	r3, #34	@ 0x22
 8004760:	d12a      	bne.n	80047b8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d108      	bne.n	800477e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800477a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800477c:	e01c      	b.n	80047b8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b40      	cmp	r3, #64	@ 0x40
 8004788:	d103      	bne.n	8004792 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f88e 	bl	80048ac <I2C_MemoryTransmit_TXE_BTF>
}
 8004790:	e012      	b.n	80047b8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004796:	781a      	ldrb	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80047b6:	e7ff      	b.n	80047b8 <I2C_MasterTransmit_TXE+0x130>
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047cc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b21      	cmp	r3, #33	@ 0x21
 80047d8:	d164      	bne.n	80048a4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d012      	beq.n	800480a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e8:	781a      	ldrb	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004808:	e04c      	b.n	80048a4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d01d      	beq.n	800484c <I2C_MasterTransmit_BTF+0x8c>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b20      	cmp	r3, #32
 8004814:	d01a      	beq.n	800484c <I2C_MasterTransmit_BTF+0x8c>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800481c:	d016      	beq.n	800484c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800482c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2211      	movs	r2, #17
 8004832:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff feb7 	bl	80045b8 <HAL_I2C_MasterTxCpltCallback>
}
 800484a:	e02b      	b.n	80048a4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800485a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800486a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b40      	cmp	r3, #64	@ 0x40
 8004884:	d107      	bne.n	8004896 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7ff fed2 	bl	8004638 <HAL_I2C_MemTxCpltCallback>
}
 8004894:	e006      	b.n	80048a4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff fe8a 	bl	80045b8 <HAL_I2C_MasterTxCpltCallback>
}
 80048a4:	bf00      	nop
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d11d      	bne.n	8004900 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d10b      	bne.n	80048e4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048dc:	1c9a      	adds	r2, r3, #2
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80048e2:	e077      	b.n	80049d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	121b      	asrs	r3, r3, #8
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80048fe:	e069      	b.n	80049d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004904:	2b01      	cmp	r3, #1
 8004906:	d10b      	bne.n	8004920 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800490c:	b2da      	uxtb	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800491e:	e059      	b.n	80049d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004924:	2b02      	cmp	r3, #2
 8004926:	d152      	bne.n	80049ce <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004928:	7bfb      	ldrb	r3, [r7, #15]
 800492a:	2b22      	cmp	r3, #34	@ 0x22
 800492c:	d10d      	bne.n	800494a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800493c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004948:	e044      	b.n	80049d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d015      	beq.n	8004980 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b21      	cmp	r3, #33	@ 0x21
 8004958:	d112      	bne.n	8004980 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495e:	781a      	ldrb	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800497e:	e029      	b.n	80049d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d124      	bne.n	80049d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800498a:	7bfb      	ldrb	r3, [r7, #15]
 800498c:	2b21      	cmp	r3, #33	@ 0x21
 800498e:	d121      	bne.n	80049d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800499e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff fe36 	bl	8004638 <HAL_I2C_MemTxCpltCallback>
}
 80049cc:	e002      	b.n	80049d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff f898 	bl	8003b04 <I2C_Flush_DR>
}
 80049d4:	bf00      	nop
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b22      	cmp	r3, #34	@ 0x22
 80049ee:	f040 80b9 	bne.w	8004b64 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d921      	bls.n	8004a4a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691a      	ldr	r2, [r3, #16]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	f040 8096 	bne.w	8004b64 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a46:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004a48:	e08c      	b.n	8004b64 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d07f      	beq.n	8004b52 <I2C_MasterReceive_RXNE+0x176>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d002      	beq.n	8004a5e <I2C_MasterReceive_RXNE+0x82>
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d179      	bne.n	8004b52 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f001 fb64 	bl	800612c <I2C_WaitOnSTOPRequestThroughIT>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d14c      	bne.n	8004b04 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a78:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a88:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b40      	cmp	r3, #64	@ 0x40
 8004ac2:	d10a      	bne.n	8004ada <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7ff fdba 	bl	800464c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ad8:	e044      	b.n	8004b64 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d002      	beq.n	8004aee <I2C_MasterReceive_RXNE+0x112>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d103      	bne.n	8004af6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	631a      	str	r2, [r3, #48]	@ 0x30
 8004af4:	e002      	b.n	8004afc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2212      	movs	r2, #18
 8004afa:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff fd65 	bl	80045cc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b02:	e02f      	b.n	8004b64 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b12:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	3b01      	subs	r3, #1
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff fd88 	bl	8004660 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b50:	e008      	b.n	8004b64 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b60:	605a      	str	r2, [r3, #4]
}
 8004b62:	e7ff      	b.n	8004b64 <I2C_MasterReceive_RXNE+0x188>
 8004b64:	bf00      	nop
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b78:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d11b      	bne.n	8004bbc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b92:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691a      	ldr	r2, [r3, #16]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004bba:	e0c4      	b.n	8004d46 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d129      	bne.n	8004c1a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bd4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d00a      	beq.n	8004bf2 <I2C_MasterReceive_BTF+0x86>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d007      	beq.n	8004bf2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bf0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004c18:	e095      	b.n	8004d46 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d17d      	bne.n	8004d20 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d002      	beq.n	8004c30 <I2C_MasterReceive_BTF+0xc4>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b10      	cmp	r3, #16
 8004c2e:	d108      	bne.n	8004c42 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	e016      	b.n	8004c70 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d002      	beq.n	8004c4e <I2C_MasterReceive_BTF+0xe2>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d108      	bne.n	8004c60 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	e007      	b.n	8004c70 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c6e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004cca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b40      	cmp	r3, #64	@ 0x40
 8004cde:	d10a      	bne.n	8004cf6 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff fcac 	bl	800464c <HAL_I2C_MemRxCpltCallback>
}
 8004cf4:	e027      	b.n	8004d46 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d002      	beq.n	8004d0a <I2C_MasterReceive_BTF+0x19e>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d103      	bne.n	8004d12 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d10:	e002      	b.n	8004d18 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2212      	movs	r2, #18
 8004d16:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff fc57 	bl	80045cc <HAL_I2C_MasterRxCpltCallback>
}
 8004d1e:	e012      	b.n	8004d46 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b40      	cmp	r3, #64	@ 0x40
 8004d60:	d117      	bne.n	8004d92 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d109      	bne.n	8004d7e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	461a      	mov	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d7a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004d7c:	e067      	b.n	8004e4e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f043 0301 	orr.w	r3, r3, #1
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	611a      	str	r2, [r3, #16]
}
 8004d90:	e05d      	b.n	8004e4e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d9a:	d133      	bne.n	8004e04 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b21      	cmp	r3, #33	@ 0x21
 8004da6:	d109      	bne.n	8004dbc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	461a      	mov	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004db8:	611a      	str	r2, [r3, #16]
 8004dba:	e008      	b.n	8004dce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d004      	beq.n	8004de0 <I2C_Master_SB+0x92>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d108      	bne.n	8004df2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d032      	beq.n	8004e4e <I2C_Master_SB+0x100>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d02d      	beq.n	8004e4e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e00:	605a      	str	r2, [r3, #4]
}
 8004e02:	e024      	b.n	8004e4e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10e      	bne.n	8004e2a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	11db      	asrs	r3, r3, #7
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	f003 0306 	and.w	r3, r3, #6
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	f063 030f 	orn	r3, r3, #15
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	611a      	str	r2, [r3, #16]
}
 8004e28:	e011      	b.n	8004e4e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d10d      	bne.n	8004e4e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	11db      	asrs	r3, r3, #7
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	f003 0306 	and.w	r3, r3, #6
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	f063 030e 	orn	r3, r3, #14
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	611a      	str	r2, [r3, #16]
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d004      	beq.n	8004e80 <I2C_Master_ADD10+0x26>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d108      	bne.n	8004e92 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00c      	beq.n	8004ea2 <I2C_Master_ADD10+0x48>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d007      	beq.n	8004ea2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ea0:	605a      	str	r2, [r3, #4]
  }
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b091      	sub	sp, #68	@ 0x44
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ebc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eca:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b22      	cmp	r3, #34	@ 0x22
 8004ed6:	f040 8169 	bne.w	80051ac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10f      	bne.n	8004f02 <I2C_Master_ADDR+0x54>
 8004ee2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004ee6:	2b40      	cmp	r3, #64	@ 0x40
 8004ee8:	d10b      	bne.n	8004f02 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eea:	2300      	movs	r3, #0
 8004eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f00:	e160      	b.n	80051c4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d11d      	bne.n	8004f46 <I2C_Master_ADDR+0x98>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004f12:	d118      	bne.n	8004f46 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f14:	2300      	movs	r3, #0
 8004f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f38:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f44:	e13e      	b.n	80051c4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d113      	bne.n	8004f78 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f50:	2300      	movs	r3, #0
 8004f52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	e115      	b.n	80051a4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	f040 808a 	bne.w	8005098 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f86:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f8a:	d137      	bne.n	8004ffc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f9a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004faa:	d113      	bne.n	8004fd4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd2:	e0e7      	b.n	80051a4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	623b      	str	r3, [r7, #32]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	623b      	str	r3, [r7, #32]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	623b      	str	r3, [r7, #32]
 8004fe8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	e0d3      	b.n	80051a4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d02e      	beq.n	8005060 <I2C_Master_ADDR+0x1b2>
 8005002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005004:	2b20      	cmp	r3, #32
 8005006:	d02b      	beq.n	8005060 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800500a:	2b12      	cmp	r3, #18
 800500c:	d102      	bne.n	8005014 <I2C_Master_ADDR+0x166>
 800500e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005010:	2b01      	cmp	r3, #1
 8005012:	d125      	bne.n	8005060 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005016:	2b04      	cmp	r3, #4
 8005018:	d00e      	beq.n	8005038 <I2C_Master_ADDR+0x18a>
 800501a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501c:	2b02      	cmp	r3, #2
 800501e:	d00b      	beq.n	8005038 <I2C_Master_ADDR+0x18a>
 8005020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005022:	2b10      	cmp	r3, #16
 8005024:	d008      	beq.n	8005038 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	e007      	b.n	8005048 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005046:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005048:	2300      	movs	r3, #0
 800504a:	61fb      	str	r3, [r7, #28]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	61fb      	str	r3, [r7, #28]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	61fb      	str	r3, [r7, #28]
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	e0a1      	b.n	80051a4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800506e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005070:	2300      	movs	r3, #0
 8005072:	61bb      	str	r3, [r7, #24]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	61bb      	str	r3, [r7, #24]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	e085      	b.n	80051a4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d14d      	bne.n	800513e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80050a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d016      	beq.n	80050d6 <I2C_Master_ADDR+0x228>
 80050a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d013      	beq.n	80050d6 <I2C_Master_ADDR+0x228>
 80050ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b0:	2b10      	cmp	r3, #16
 80050b2:	d010      	beq.n	80050d6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050c2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	e007      	b.n	80050e6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050e4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050f4:	d117      	bne.n	8005126 <I2C_Master_ADDR+0x278>
 80050f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050fc:	d00b      	beq.n	8005116 <I2C_Master_ADDR+0x268>
 80050fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005100:	2b01      	cmp	r3, #1
 8005102:	d008      	beq.n	8005116 <I2C_Master_ADDR+0x268>
 8005104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005106:	2b08      	cmp	r3, #8
 8005108:	d005      	beq.n	8005116 <I2C_Master_ADDR+0x268>
 800510a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510c:	2b10      	cmp	r3, #16
 800510e:	d002      	beq.n	8005116 <I2C_Master_ADDR+0x268>
 8005110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005112:	2b20      	cmp	r3, #32
 8005114:	d107      	bne.n	8005126 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005124:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	e032      	b.n	80051a4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800514c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005158:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800515c:	d117      	bne.n	800518e <I2C_Master_ADDR+0x2e0>
 800515e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005160:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005164:	d00b      	beq.n	800517e <I2C_Master_ADDR+0x2d0>
 8005166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005168:	2b01      	cmp	r3, #1
 800516a:	d008      	beq.n	800517e <I2C_Master_ADDR+0x2d0>
 800516c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516e:	2b08      	cmp	r3, #8
 8005170:	d005      	beq.n	800517e <I2C_Master_ADDR+0x2d0>
 8005172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005174:	2b10      	cmp	r3, #16
 8005176:	d002      	beq.n	800517e <I2C_Master_ADDR+0x2d0>
 8005178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800517a:	2b20      	cmp	r3, #32
 800517c:	d107      	bne.n	800518e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800518c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800518e:	2300      	movs	r3, #0
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80051aa:	e00b      	b.n	80051c4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ac:	2300      	movs	r3, #0
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
}
 80051c2:	e7ff      	b.n	80051c4 <I2C_Master_ADDR+0x316>
 80051c4:	bf00      	nop
 80051c6:	3744      	adds	r7, #68	@ 0x44
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d02b      	beq.n	8005242 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ee:	781a      	ldrb	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005204:	b29b      	uxth	r3, r3
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005212:	b29b      	uxth	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d114      	bne.n	8005242 <I2C_SlaveTransmit_TXE+0x72>
 8005218:	7bfb      	ldrb	r3, [r7, #15]
 800521a:	2b29      	cmp	r3, #41	@ 0x29
 800521c:	d111      	bne.n	8005242 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800522c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2221      	movs	r2, #33	@ 0x21
 8005232:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2228      	movs	r2, #40	@ 0x28
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7ff f9cf 	bl	80045e0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005242:	bf00      	nop
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d011      	beq.n	8005280 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005260:	781a      	ldrb	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800529a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d02c      	beq.n	8005300 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d114      	bne.n	8005300 <I2C_SlaveReceive_RXNE+0x74>
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
 80052d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80052da:	d111      	bne.n	8005300 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2222      	movs	r2, #34	@ 0x22
 80052f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2228      	movs	r2, #40	@ 0x28
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7ff f97a 	bl	80045f4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005300:	bf00      	nop
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d012      	beq.n	8005340 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691a      	ldr	r2, [r3, #16]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005356:	2300      	movs	r3, #0
 8005358:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005360:	b2db      	uxtb	r3, r3
 8005362:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005366:	2b28      	cmp	r3, #40	@ 0x28
 8005368:	d127      	bne.n	80053ba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005378:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	089b      	lsrs	r3, r3, #2
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005386:	2301      	movs	r3, #1
 8005388:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	09db      	lsrs	r3, r3, #7
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d103      	bne.n	800539e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	81bb      	strh	r3, [r7, #12]
 800539c:	e002      	b.n	80053a4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80053ac:	89ba      	ldrh	r2, [r7, #12]
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	4619      	mov	r1, r3
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff f928 	bl	8004608 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80053b8:	e00e      	b.n	80053d8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ba:	2300      	movs	r3, #0
 80053bc:	60bb      	str	r3, [r7, #8]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	60bb      	str	r3, [r7, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	60bb      	str	r3, [r7, #8]
 80053ce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80053d8:	bf00      	nop
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80053fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005400:	2300      	movs	r3, #0
 8005402:	60bb      	str	r3, [r7, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	60bb      	str	r3, [r7, #8]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800542c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800543c:	d172      	bne.n	8005524 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800543e:	7bfb      	ldrb	r3, [r7, #15]
 8005440:	2b22      	cmp	r3, #34	@ 0x22
 8005442:	d002      	beq.n	800544a <I2C_Slave_STOPF+0x6a>
 8005444:	7bfb      	ldrb	r3, [r7, #15]
 8005446:	2b2a      	cmp	r3, #42	@ 0x2a
 8005448:	d135      	bne.n	80054b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	b29a      	uxth	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d005      	beq.n	800546e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005466:	f043 0204 	orr.w	r2, r3, #4
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800547c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005482:	4618      	mov	r0, r3
 8005484:	f7fe f825 	bl	80034d2 <HAL_DMA_GetState>
 8005488:	4603      	mov	r3, r0
 800548a:	2b01      	cmp	r3, #1
 800548c:	d049      	beq.n	8005522 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005492:	4a69      	ldr	r2, [pc, #420]	@ (8005638 <I2C_Slave_STOPF+0x258>)
 8005494:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549a:	4618      	mov	r0, r3
 800549c:	f7fd fff7 	bl	800348e <HAL_DMA_Abort_IT>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d03d      	beq.n	8005522 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80054b0:	4610      	mov	r0, r2
 80054b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80054b4:	e035      	b.n	8005522 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	b29a      	uxth	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d005      	beq.n	80054da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d2:	f043 0204 	orr.w	r2, r3, #4
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fd ffef 	bl	80034d2 <HAL_DMA_GetState>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d014      	beq.n	8005524 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054fe:	4a4e      	ldr	r2, [pc, #312]	@ (8005638 <I2C_Slave_STOPF+0x258>)
 8005500:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005506:	4618      	mov	r0, r3
 8005508:	f7fd ffc1 	bl	800348e <HAL_DMA_Abort_IT>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d008      	beq.n	8005524 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800551c:	4610      	mov	r0, r2
 800551e:	4798      	blx	r3
 8005520:	e000      	b.n	8005524 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005522:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005528:	b29b      	uxth	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d03e      	beq.n	80055ac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b04      	cmp	r3, #4
 800553a:	d112      	bne.n	8005562 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800556c:	2b40      	cmp	r3, #64	@ 0x40
 800556e:	d112      	bne.n	8005596 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691a      	ldr	r2, [r3, #16]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b01      	subs	r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a4:	f043 0204 	orr.w	r2, r3, #4
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f8b7 	bl	8005728 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80055ba:	e039      	b.n	8005630 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	2b2a      	cmp	r3, #42	@ 0x2a
 80055c0:	d109      	bne.n	80055d6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2228      	movs	r2, #40	@ 0x28
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff f80f 	bl	80045f4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b28      	cmp	r3, #40	@ 0x28
 80055e0:	d111      	bne.n	8005606 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a15      	ldr	r2, [pc, #84]	@ (800563c <I2C_Slave_STOPF+0x25c>)
 80055e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff f810 	bl	8004624 <HAL_I2C_ListenCpltCallback>
}
 8005604:	e014      	b.n	8005630 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560a:	2b22      	cmp	r3, #34	@ 0x22
 800560c:	d002      	beq.n	8005614 <I2C_Slave_STOPF+0x234>
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	2b22      	cmp	r3, #34	@ 0x22
 8005612:	d10d      	bne.n	8005630 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fe ffe2 	bl	80045f4 <HAL_I2C_SlaveRxCpltCallback>
}
 8005630:	bf00      	nop
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	08005c89 	.word	0x08005c89
 800563c:	ffff0000 	.word	0xffff0000

08005640 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800564e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005654:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b08      	cmp	r3, #8
 800565a:	d002      	beq.n	8005662 <I2C_Slave_AF+0x22>
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b20      	cmp	r3, #32
 8005660:	d129      	bne.n	80056b6 <I2C_Slave_AF+0x76>
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	2b28      	cmp	r3, #40	@ 0x28
 8005666:	d126      	bne.n	80056b6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a2e      	ldr	r2, [pc, #184]	@ (8005724 <I2C_Slave_AF+0xe4>)
 800566c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800567c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005686:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005696:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fe ffb8 	bl	8004624 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80056b4:	e031      	b.n	800571a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	2b21      	cmp	r3, #33	@ 0x21
 80056ba:	d129      	bne.n	8005710 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a19      	ldr	r2, [pc, #100]	@ (8005724 <I2C_Slave_AF+0xe4>)
 80056c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2221      	movs	r2, #33	@ 0x21
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80056e6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80056f0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005700:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7fe f9fe 	bl	8003b04 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7fe ff69 	bl	80045e0 <HAL_I2C_SlaveTxCpltCallback>
}
 800570e:	e004      	b.n	800571a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005718:	615a      	str	r2, [r3, #20]
}
 800571a:	bf00      	nop
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	ffff0000 	.word	0xffff0000

08005728 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005736:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800573e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005740:	7bbb      	ldrb	r3, [r7, #14]
 8005742:	2b10      	cmp	r3, #16
 8005744:	d002      	beq.n	800574c <I2C_ITError+0x24>
 8005746:	7bbb      	ldrb	r3, [r7, #14]
 8005748:	2b40      	cmp	r3, #64	@ 0x40
 800574a:	d10a      	bne.n	8005762 <I2C_ITError+0x3a>
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	2b22      	cmp	r3, #34	@ 0x22
 8005750:	d107      	bne.n	8005762 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005760:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005768:	2b28      	cmp	r3, #40	@ 0x28
 800576a:	d107      	bne.n	800577c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2228      	movs	r2, #40	@ 0x28
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800577a:	e015      	b.n	80057a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005786:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800578a:	d00a      	beq.n	80057a2 <I2C_ITError+0x7a>
 800578c:	7bfb      	ldrb	r3, [r7, #15]
 800578e:	2b60      	cmp	r3, #96	@ 0x60
 8005790:	d007      	beq.n	80057a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057b6:	d162      	bne.n	800587e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d020      	beq.n	8005818 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057da:	4a6a      	ldr	r2, [pc, #424]	@ (8005984 <I2C_ITError+0x25c>)
 80057dc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fd fe53 	bl	800348e <HAL_DMA_Abort_IT>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 8089 	beq.w	8005902 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0201 	bic.w	r2, r2, #1
 80057fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800580c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005812:	4610      	mov	r0, r2
 8005814:	4798      	blx	r3
 8005816:	e074      	b.n	8005902 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800581c:	4a59      	ldr	r2, [pc, #356]	@ (8005984 <I2C_ITError+0x25c>)
 800581e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005824:	4618      	mov	r0, r3
 8005826:	f7fd fe32 	bl	800348e <HAL_DMA_Abort_IT>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d068      	beq.n	8005902 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800583a:	2b40      	cmp	r3, #64	@ 0x40
 800583c:	d10b      	bne.n	8005856 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	691a      	ldr	r2, [r3, #16]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0201 	bic.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005878:	4610      	mov	r0, r2
 800587a:	4798      	blx	r3
 800587c:	e041      	b.n	8005902 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b60      	cmp	r3, #96	@ 0x60
 8005888:	d125      	bne.n	80058d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2220      	movs	r2, #32
 800588e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a2:	2b40      	cmp	r3, #64	@ 0x40
 80058a4:	d10b      	bne.n	80058be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0201 	bic.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fe fed0 	bl	8004674 <HAL_I2C_AbortCpltCallback>
 80058d4:	e015      	b.n	8005902 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e0:	2b40      	cmp	r3, #64	@ 0x40
 80058e2:	d10b      	bne.n	80058fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691a      	ldr	r2, [r3, #16]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7fe feaf 	bl	8004660 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005906:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10e      	bne.n	8005930 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005918:	2b00      	cmp	r3, #0
 800591a:	d109      	bne.n	8005930 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005922:	2b00      	cmp	r3, #0
 8005924:	d104      	bne.n	8005930 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800592c:	2b00      	cmp	r3, #0
 800592e:	d007      	beq.n	8005940 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800593e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005946:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b04      	cmp	r3, #4
 8005952:	d113      	bne.n	800597c <I2C_ITError+0x254>
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	2b28      	cmp	r3, #40	@ 0x28
 8005958:	d110      	bne.n	800597c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a0a      	ldr	r2, [pc, #40]	@ (8005988 <I2C_ITError+0x260>)
 800595e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fe fe54 	bl	8004624 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800597c:	bf00      	nop
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	08005c89 	.word	0x08005c89
 8005988:	ffff0000 	.word	0xffff0000

0800598c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af02      	add	r7, sp, #8
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	4608      	mov	r0, r1
 8005996:	4611      	mov	r1, r2
 8005998:	461a      	mov	r2, r3
 800599a:	4603      	mov	r3, r0
 800599c:	817b      	strh	r3, [r7, #10]
 800599e:	460b      	mov	r3, r1
 80059a0:	813b      	strh	r3, [r7, #8]
 80059a2:	4613      	mov	r3, r2
 80059a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	2200      	movs	r2, #0
 80059be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 fa08 	bl	8005dd8 <I2C_WaitOnFlagUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00d      	beq.n	80059ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059dc:	d103      	bne.n	80059e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e05f      	b.n	8005aaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059ea:	897b      	ldrh	r3, [r7, #10]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	461a      	mov	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80059f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	6a3a      	ldr	r2, [r7, #32]
 80059fe:	492d      	ldr	r1, [pc, #180]	@ (8005ab4 <I2C_RequestMemoryWrite+0x128>)
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 fa63 	bl	8005ecc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e04c      	b.n	8005aaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a10:	2300      	movs	r3, #0
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a28:	6a39      	ldr	r1, [r7, #32]
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 faee 	bl	800600c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00d      	beq.n	8005a52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d107      	bne.n	8005a4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e02b      	b.n	8005aaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d105      	bne.n	8005a64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a58:	893b      	ldrh	r3, [r7, #8]
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	611a      	str	r2, [r3, #16]
 8005a62:	e021      	b.n	8005aa8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a64:	893b      	ldrh	r3, [r7, #8]
 8005a66:	0a1b      	lsrs	r3, r3, #8
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a74:	6a39      	ldr	r1, [r7, #32]
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 fac8 	bl	800600c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00d      	beq.n	8005a9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d107      	bne.n	8005a9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e005      	b.n	8005aaa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a9e:	893b      	ldrh	r3, [r7, #8]
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	00010002 	.word	0x00010002

08005ab8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	817b      	strh	r3, [r7, #10]
 8005aca:	460b      	mov	r3, r1
 8005acc:	813b      	strh	r3, [r7, #8]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ae0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005af0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 f96a 	bl	8005dd8 <I2C_WaitOnFlagUntilTimeout>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00d      	beq.n	8005b26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b18:	d103      	bne.n	8005b22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b20:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e0aa      	b.n	8005c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b26:	897b      	ldrh	r3, [r7, #10]
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	6a3a      	ldr	r2, [r7, #32]
 8005b3a:	4952      	ldr	r1, [pc, #328]	@ (8005c84 <I2C_RequestMemoryRead+0x1cc>)
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f9c5 	bl	8005ecc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e097      	b.n	8005c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	617b      	str	r3, [r7, #20]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b64:	6a39      	ldr	r1, [r7, #32]
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 fa50 	bl	800600c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00d      	beq.n	8005b8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d107      	bne.n	8005b8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e076      	b.n	8005c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b8e:	88fb      	ldrh	r3, [r7, #6]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d105      	bne.n	8005ba0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b94:	893b      	ldrh	r3, [r7, #8]
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	611a      	str	r2, [r3, #16]
 8005b9e:	e021      	b.n	8005be4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ba0:	893b      	ldrh	r3, [r7, #8]
 8005ba2:	0a1b      	lsrs	r3, r3, #8
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bb0:	6a39      	ldr	r1, [r7, #32]
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 fa2a 	bl	800600c <I2C_WaitOnTXEFlagUntilTimeout>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00d      	beq.n	8005bda <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d107      	bne.n	8005bd6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e050      	b.n	8005c7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bda:	893b      	ldrh	r3, [r7, #8]
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005be4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005be6:	6a39      	ldr	r1, [r7, #32]
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 fa0f 	bl	800600c <I2C_WaitOnTXEFlagUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00d      	beq.n	8005c10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d107      	bne.n	8005c0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e035      	b.n	8005c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 f8d3 	bl	8005dd8 <I2C_WaitOnFlagUntilTimeout>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00d      	beq.n	8005c54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c46:	d103      	bne.n	8005c50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e013      	b.n	8005c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c54:	897b      	ldrh	r3, [r7, #10]
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	f043 0301 	orr.w	r3, r3, #1
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	6a3a      	ldr	r2, [r7, #32]
 8005c68:	4906      	ldr	r1, [pc, #24]	@ (8005c84 <I2C_RequestMemoryRead+0x1cc>)
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 f92e 	bl	8005ecc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e000      	b.n	8005c7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	00010002 	.word	0x00010002

08005c88 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c98:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ca0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ca2:	4b4b      	ldr	r3, [pc, #300]	@ (8005dd0 <I2C_DMAAbort+0x148>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	08db      	lsrs	r3, r3, #3
 8005ca8:	4a4a      	ldr	r2, [pc, #296]	@ (8005dd4 <I2C_DMAAbort+0x14c>)
 8005caa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cae:	0a1a      	lsrs	r2, r3, #8
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	00da      	lsls	r2, r3, #3
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc6:	f043 0220 	orr.w	r2, r3, #32
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005cce:	e00a      	b.n	8005ce6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ce4:	d0ea      	beq.n	8005cbc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d02:	2200      	movs	r2, #0
 8005d04:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d14:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d28:	2200      	movs	r2, #0
 8005d2a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d38:	2200      	movs	r2, #0
 8005d3a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 0201 	bic.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b60      	cmp	r3, #96	@ 0x60
 8005d56:	d10e      	bne.n	8005d76 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d6e:	6978      	ldr	r0, [r7, #20]
 8005d70:	f7fe fc80 	bl	8004674 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d74:	e027      	b.n	8005dc6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d76:	7cfb      	ldrb	r3, [r7, #19]
 8005d78:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d7c:	2b28      	cmp	r3, #40	@ 0x28
 8005d7e:	d117      	bne.n	8005db0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d9e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2200      	movs	r2, #0
 8005da4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2228      	movs	r2, #40	@ 0x28
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005dae:	e007      	b.n	8005dc0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005dc0:	6978      	ldr	r0, [r7, #20]
 8005dc2:	f7fe fc4d 	bl	8004660 <HAL_I2C_ErrorCallback>
}
 8005dc6:	bf00      	nop
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000000 	.word	0x20000000
 8005dd4:	14f8b589 	.word	0x14f8b589

08005dd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	603b      	str	r3, [r7, #0]
 8005de4:	4613      	mov	r3, r2
 8005de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005de8:	e048      	b.n	8005e7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df0:	d044      	beq.n	8005e7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df2:	f7fd fa0b 	bl	800320c <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d302      	bcc.n	8005e08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d139      	bne.n	8005e7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	0c1b      	lsrs	r3, r3, #16
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d10d      	bne.n	8005e2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	43da      	mvns	r2, r3
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bf0c      	ite	eq
 8005e24:	2301      	moveq	r3, #1
 8005e26:	2300      	movne	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	e00c      	b.n	8005e48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	43da      	mvns	r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	bf0c      	ite	eq
 8005e40:	2301      	moveq	r3, #1
 8005e42:	2300      	movne	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d116      	bne.n	8005e7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e68:	f043 0220 	orr.w	r2, r3, #32
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e023      	b.n	8005ec4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	0c1b      	lsrs	r3, r3, #16
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d10d      	bne.n	8005ea2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	43da      	mvns	r2, r3
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4013      	ands	r3, r2
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bf0c      	ite	eq
 8005e98:	2301      	moveq	r3, #1
 8005e9a:	2300      	movne	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	e00c      	b.n	8005ebc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	43da      	mvns	r2, r3
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	4013      	ands	r3, r2
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	bf0c      	ite	eq
 8005eb4:	2301      	moveq	r3, #1
 8005eb6:	2300      	movne	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d093      	beq.n	8005dea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005eda:	e071      	b.n	8005fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eea:	d123      	bne.n	8005f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005efa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f20:	f043 0204 	orr.w	r2, r3, #4
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e067      	b.n	8006004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3a:	d041      	beq.n	8005fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3c:	f7fd f966 	bl	800320c <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d302      	bcc.n	8005f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d136      	bne.n	8005fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	0c1b      	lsrs	r3, r3, #16
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d10c      	bne.n	8005f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	43da      	mvns	r2, r3
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	4013      	ands	r3, r2
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	bf14      	ite	ne
 8005f6e:	2301      	movne	r3, #1
 8005f70:	2300      	moveq	r3, #0
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	e00b      	b.n	8005f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	43da      	mvns	r2, r3
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	4013      	ands	r3, r2
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	bf14      	ite	ne
 8005f88:	2301      	movne	r3, #1
 8005f8a:	2300      	moveq	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d016      	beq.n	8005fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fac:	f043 0220 	orr.w	r2, r3, #32
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e021      	b.n	8006004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	0c1b      	lsrs	r3, r3, #16
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d10c      	bne.n	8005fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	43da      	mvns	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	bf14      	ite	ne
 8005fdc:	2301      	movne	r3, #1
 8005fde:	2300      	moveq	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	e00b      	b.n	8005ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	43da      	mvns	r2, r3
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	bf14      	ite	ne
 8005ff6:	2301      	movne	r3, #1
 8005ff8:	2300      	moveq	r3, #0
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f47f af6d 	bne.w	8005edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006018:	e034      	b.n	8006084 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 f915 	bl	800624a <I2C_IsAcknowledgeFailed>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e034      	b.n	8006094 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006030:	d028      	beq.n	8006084 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006032:	f7fd f8eb 	bl	800320c <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	429a      	cmp	r2, r3
 8006040:	d302      	bcc.n	8006048 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d11d      	bne.n	8006084 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006052:	2b80      	cmp	r3, #128	@ 0x80
 8006054:	d016      	beq.n	8006084 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006070:	f043 0220 	orr.w	r2, r3, #32
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e007      	b.n	8006094 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608e:	2b80      	cmp	r3, #128	@ 0x80
 8006090:	d1c3      	bne.n	800601a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060a8:	e034      	b.n	8006114 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 f8cd 	bl	800624a <I2C_IsAcknowledgeFailed>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e034      	b.n	8006124 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d028      	beq.n	8006114 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c2:	f7fd f8a3 	bl	800320c <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d302      	bcc.n	80060d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d11d      	bne.n	8006114 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f003 0304 	and.w	r3, r3, #4
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d016      	beq.n	8006114 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006100:	f043 0220 	orr.w	r2, r3, #32
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e007      	b.n	8006124 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	f003 0304 	and.w	r3, r3, #4
 800611e:	2b04      	cmp	r3, #4
 8006120:	d1c3      	bne.n	80060aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006138:	4b13      	ldr	r3, [pc, #76]	@ (8006188 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	08db      	lsrs	r3, r3, #3
 800613e:	4a13      	ldr	r2, [pc, #76]	@ (800618c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006140:	fba2 2303 	umull	r2, r3, r2, r3
 8006144:	0a1a      	lsrs	r2, r3, #8
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3b01      	subs	r3, #1
 8006152:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d107      	bne.n	800616a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615e:	f043 0220 	orr.w	r2, r3, #32
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e008      	b.n	800617c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006178:	d0e9      	beq.n	800614e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	20000000 	.word	0x20000000
 800618c:	14f8b589 	.word	0x14f8b589

08006190 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800619c:	e049      	b.n	8006232 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	f003 0310 	and.w	r3, r3, #16
 80061a8:	2b10      	cmp	r3, #16
 80061aa:	d119      	bne.n	80061e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f06f 0210 	mvn.w	r2, #16
 80061b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2220      	movs	r2, #32
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e030      	b.n	8006242 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e0:	f7fd f814 	bl	800320c <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d302      	bcc.n	80061f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d11d      	bne.n	8006232 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006200:	2b40      	cmp	r3, #64	@ 0x40
 8006202:	d016      	beq.n	8006232 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2220      	movs	r2, #32
 800620e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800621e:	f043 0220 	orr.w	r2, r3, #32
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e007      	b.n	8006242 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800623c:	2b40      	cmp	r3, #64	@ 0x40
 800623e:	d1ae      	bne.n	800619e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800625c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006260:	d11b      	bne.n	800629a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800626a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006286:	f043 0204 	orr.w	r2, r3, #4
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80062b8:	d103      	bne.n	80062c2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80062c0:	e007      	b.n	80062d2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80062ca:	d102      	bne.n	80062d2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2208      	movs	r2, #8
 80062d0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80062d2:	bf00      	nop
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
	...

080062e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e0cc      	b.n	800648e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062f4:	4b68      	ldr	r3, [pc, #416]	@ (8006498 <HAL_RCC_ClockConfig+0x1b8>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 030f 	and.w	r3, r3, #15
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d90c      	bls.n	800631c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006302:	4b65      	ldr	r3, [pc, #404]	@ (8006498 <HAL_RCC_ClockConfig+0x1b8>)
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800630a:	4b63      	ldr	r3, [pc, #396]	@ (8006498 <HAL_RCC_ClockConfig+0x1b8>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 030f 	and.w	r3, r3, #15
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d001      	beq.n	800631c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0b8      	b.n	800648e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d020      	beq.n	800636a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d005      	beq.n	8006340 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006334:	4b59      	ldr	r3, [pc, #356]	@ (800649c <HAL_RCC_ClockConfig+0x1bc>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	4a58      	ldr	r2, [pc, #352]	@ (800649c <HAL_RCC_ClockConfig+0x1bc>)
 800633a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800633e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800634c:	4b53      	ldr	r3, [pc, #332]	@ (800649c <HAL_RCC_ClockConfig+0x1bc>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	4a52      	ldr	r2, [pc, #328]	@ (800649c <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006356:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006358:	4b50      	ldr	r3, [pc, #320]	@ (800649c <HAL_RCC_ClockConfig+0x1bc>)
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	494d      	ldr	r1, [pc, #308]	@ (800649c <HAL_RCC_ClockConfig+0x1bc>)
 8006366:	4313      	orrs	r3, r2
 8006368:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d044      	beq.n	8006400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d107      	bne.n	800638e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800637e:	4b47      	ldr	r3, [pc, #284]	@ (800649c <HAL_RCC_ClockConfig+0x1bc>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d119      	bne.n	80063be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e07f      	b.n	800648e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	2b02      	cmp	r3, #2
 8006394:	d003      	beq.n	800639e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800639a:	2b03      	cmp	r3, #3
 800639c:	d107      	bne.n	80063ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800639e:	4b3f      	ldr	r3, [pc, #252]	@ (800649c <HAL_RCC_ClockConfig+0x1bc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d109      	bne.n	80063be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e06f      	b.n	800648e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ae:	4b3b      	ldr	r3, [pc, #236]	@ (800649c <HAL_RCC_ClockConfig+0x1bc>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e067      	b.n	800648e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063be:	4b37      	ldr	r3, [pc, #220]	@ (800649c <HAL_RCC_ClockConfig+0x1bc>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f023 0203 	bic.w	r2, r3, #3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	4934      	ldr	r1, [pc, #208]	@ (800649c <HAL_RCC_ClockConfig+0x1bc>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063d0:	f7fc ff1c 	bl	800320c <HAL_GetTick>
 80063d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063d6:	e00a      	b.n	80063ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063d8:	f7fc ff18 	bl	800320c <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e04f      	b.n	800648e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ee:	4b2b      	ldr	r3, [pc, #172]	@ (800649c <HAL_RCC_ClockConfig+0x1bc>)
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f003 020c 	and.w	r2, r3, #12
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d1eb      	bne.n	80063d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006400:	4b25      	ldr	r3, [pc, #148]	@ (8006498 <HAL_RCC_ClockConfig+0x1b8>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d20c      	bcs.n	8006428 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800640e:	4b22      	ldr	r3, [pc, #136]	@ (8006498 <HAL_RCC_ClockConfig+0x1b8>)
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	b2d2      	uxtb	r2, r2
 8006414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006416:	4b20      	ldr	r3, [pc, #128]	@ (8006498 <HAL_RCC_ClockConfig+0x1b8>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d001      	beq.n	8006428 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e032      	b.n	800648e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d008      	beq.n	8006446 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006434:	4b19      	ldr	r3, [pc, #100]	@ (800649c <HAL_RCC_ClockConfig+0x1bc>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	4916      	ldr	r1, [pc, #88]	@ (800649c <HAL_RCC_ClockConfig+0x1bc>)
 8006442:	4313      	orrs	r3, r2
 8006444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0308 	and.w	r3, r3, #8
 800644e:	2b00      	cmp	r3, #0
 8006450:	d009      	beq.n	8006466 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006452:	4b12      	ldr	r3, [pc, #72]	@ (800649c <HAL_RCC_ClockConfig+0x1bc>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	490e      	ldr	r1, [pc, #56]	@ (800649c <HAL_RCC_ClockConfig+0x1bc>)
 8006462:	4313      	orrs	r3, r2
 8006464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006466:	f000 f855 	bl	8006514 <HAL_RCC_GetSysClockFreq>
 800646a:	4602      	mov	r2, r0
 800646c:	4b0b      	ldr	r3, [pc, #44]	@ (800649c <HAL_RCC_ClockConfig+0x1bc>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	091b      	lsrs	r3, r3, #4
 8006472:	f003 030f 	and.w	r3, r3, #15
 8006476:	490a      	ldr	r1, [pc, #40]	@ (80064a0 <HAL_RCC_ClockConfig+0x1c0>)
 8006478:	5ccb      	ldrb	r3, [r1, r3]
 800647a:	fa22 f303 	lsr.w	r3, r2, r3
 800647e:	4a09      	ldr	r2, [pc, #36]	@ (80064a4 <HAL_RCC_ClockConfig+0x1c4>)
 8006480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006482:	4b09      	ldr	r3, [pc, #36]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4618      	mov	r0, r3
 8006488:	f7fc fe7c 	bl	8003184 <HAL_InitTick>

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	40023c00 	.word	0x40023c00
 800649c:	40023800 	.word	0x40023800
 80064a0:	08009e64 	.word	0x08009e64
 80064a4:	20000000 	.word	0x20000000
 80064a8:	20000004 	.word	0x20000004

080064ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064b0:	4b03      	ldr	r3, [pc, #12]	@ (80064c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80064b2:	681b      	ldr	r3, [r3, #0]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20000000 	.word	0x20000000

080064c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064c8:	f7ff fff0 	bl	80064ac <HAL_RCC_GetHCLKFreq>
 80064cc:	4602      	mov	r2, r0
 80064ce:	4b05      	ldr	r3, [pc, #20]	@ (80064e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	0a9b      	lsrs	r3, r3, #10
 80064d4:	f003 0307 	and.w	r3, r3, #7
 80064d8:	4903      	ldr	r1, [pc, #12]	@ (80064e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064da:	5ccb      	ldrb	r3, [r1, r3]
 80064dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	40023800 	.word	0x40023800
 80064e8:	08009e74 	.word	0x08009e74

080064ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064f0:	f7ff ffdc 	bl	80064ac <HAL_RCC_GetHCLKFreq>
 80064f4:	4602      	mov	r2, r0
 80064f6:	4b05      	ldr	r3, [pc, #20]	@ (800650c <HAL_RCC_GetPCLK2Freq+0x20>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	0b5b      	lsrs	r3, r3, #13
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	4903      	ldr	r1, [pc, #12]	@ (8006510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006502:	5ccb      	ldrb	r3, [r1, r3]
 8006504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006508:	4618      	mov	r0, r3
 800650a:	bd80      	pop	{r7, pc}
 800650c:	40023800 	.word	0x40023800
 8006510:	08009e74 	.word	0x08009e74

08006514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006518:	b0ae      	sub	sp, #184	@ 0xb8
 800651a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800653a:	4bcb      	ldr	r3, [pc, #812]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x354>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 030c 	and.w	r3, r3, #12
 8006542:	2b0c      	cmp	r3, #12
 8006544:	f200 8206 	bhi.w	8006954 <HAL_RCC_GetSysClockFreq+0x440>
 8006548:	a201      	add	r2, pc, #4	@ (adr r2, 8006550 <HAL_RCC_GetSysClockFreq+0x3c>)
 800654a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654e:	bf00      	nop
 8006550:	08006585 	.word	0x08006585
 8006554:	08006955 	.word	0x08006955
 8006558:	08006955 	.word	0x08006955
 800655c:	08006955 	.word	0x08006955
 8006560:	0800658d 	.word	0x0800658d
 8006564:	08006955 	.word	0x08006955
 8006568:	08006955 	.word	0x08006955
 800656c:	08006955 	.word	0x08006955
 8006570:	08006595 	.word	0x08006595
 8006574:	08006955 	.word	0x08006955
 8006578:	08006955 	.word	0x08006955
 800657c:	08006955 	.word	0x08006955
 8006580:	08006785 	.word	0x08006785
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006584:	4bb9      	ldr	r3, [pc, #740]	@ (800686c <HAL_RCC_GetSysClockFreq+0x358>)
 8006586:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800658a:	e1e7      	b.n	800695c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800658c:	4bb8      	ldr	r3, [pc, #736]	@ (8006870 <HAL_RCC_GetSysClockFreq+0x35c>)
 800658e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006592:	e1e3      	b.n	800695c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006594:	4bb4      	ldr	r3, [pc, #720]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x354>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800659c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065a0:	4bb1      	ldr	r3, [pc, #708]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x354>)
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d071      	beq.n	8006690 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ac:	4bae      	ldr	r3, [pc, #696]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x354>)
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	099b      	lsrs	r3, r3, #6
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065b8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80065bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065c8:	2300      	movs	r3, #0
 80065ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80065d2:	4622      	mov	r2, r4
 80065d4:	462b      	mov	r3, r5
 80065d6:	f04f 0000 	mov.w	r0, #0
 80065da:	f04f 0100 	mov.w	r1, #0
 80065de:	0159      	lsls	r1, r3, #5
 80065e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065e4:	0150      	lsls	r0, r2, #5
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4621      	mov	r1, r4
 80065ec:	1a51      	subs	r1, r2, r1
 80065ee:	6439      	str	r1, [r7, #64]	@ 0x40
 80065f0:	4629      	mov	r1, r5
 80065f2:	eb63 0301 	sbc.w	r3, r3, r1
 80065f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80065f8:	f04f 0200 	mov.w	r2, #0
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006604:	4649      	mov	r1, r9
 8006606:	018b      	lsls	r3, r1, #6
 8006608:	4641      	mov	r1, r8
 800660a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800660e:	4641      	mov	r1, r8
 8006610:	018a      	lsls	r2, r1, #6
 8006612:	4641      	mov	r1, r8
 8006614:	1a51      	subs	r1, r2, r1
 8006616:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006618:	4649      	mov	r1, r9
 800661a:	eb63 0301 	sbc.w	r3, r3, r1
 800661e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006620:	f04f 0200 	mov.w	r2, #0
 8006624:	f04f 0300 	mov.w	r3, #0
 8006628:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800662c:	4649      	mov	r1, r9
 800662e:	00cb      	lsls	r3, r1, #3
 8006630:	4641      	mov	r1, r8
 8006632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006636:	4641      	mov	r1, r8
 8006638:	00ca      	lsls	r2, r1, #3
 800663a:	4610      	mov	r0, r2
 800663c:	4619      	mov	r1, r3
 800663e:	4603      	mov	r3, r0
 8006640:	4622      	mov	r2, r4
 8006642:	189b      	adds	r3, r3, r2
 8006644:	633b      	str	r3, [r7, #48]	@ 0x30
 8006646:	462b      	mov	r3, r5
 8006648:	460a      	mov	r2, r1
 800664a:	eb42 0303 	adc.w	r3, r2, r3
 800664e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	f04f 0300 	mov.w	r3, #0
 8006658:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800665c:	4629      	mov	r1, r5
 800665e:	024b      	lsls	r3, r1, #9
 8006660:	4621      	mov	r1, r4
 8006662:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006666:	4621      	mov	r1, r4
 8006668:	024a      	lsls	r2, r1, #9
 800666a:	4610      	mov	r0, r2
 800666c:	4619      	mov	r1, r3
 800666e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006672:	2200      	movs	r2, #0
 8006674:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006678:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800667c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006680:	f7f9 fe16 	bl	80002b0 <__aeabi_uldivmod>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4613      	mov	r3, r2
 800668a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800668e:	e067      	b.n	8006760 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006690:	4b75      	ldr	r3, [pc, #468]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x354>)
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	099b      	lsrs	r3, r3, #6
 8006696:	2200      	movs	r2, #0
 8006698:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800669c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80066a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80066a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066aa:	2300      	movs	r3, #0
 80066ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80066ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80066b2:	4622      	mov	r2, r4
 80066b4:	462b      	mov	r3, r5
 80066b6:	f04f 0000 	mov.w	r0, #0
 80066ba:	f04f 0100 	mov.w	r1, #0
 80066be:	0159      	lsls	r1, r3, #5
 80066c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066c4:	0150      	lsls	r0, r2, #5
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4621      	mov	r1, r4
 80066cc:	1a51      	subs	r1, r2, r1
 80066ce:	62b9      	str	r1, [r7, #40]	@ 0x28
 80066d0:	4629      	mov	r1, r5
 80066d2:	eb63 0301 	sbc.w	r3, r3, r1
 80066d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066d8:	f04f 0200 	mov.w	r2, #0
 80066dc:	f04f 0300 	mov.w	r3, #0
 80066e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80066e4:	4649      	mov	r1, r9
 80066e6:	018b      	lsls	r3, r1, #6
 80066e8:	4641      	mov	r1, r8
 80066ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066ee:	4641      	mov	r1, r8
 80066f0:	018a      	lsls	r2, r1, #6
 80066f2:	4641      	mov	r1, r8
 80066f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80066f8:	4649      	mov	r1, r9
 80066fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80066fe:	f04f 0200 	mov.w	r2, #0
 8006702:	f04f 0300 	mov.w	r3, #0
 8006706:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800670a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800670e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006712:	4692      	mov	sl, r2
 8006714:	469b      	mov	fp, r3
 8006716:	4623      	mov	r3, r4
 8006718:	eb1a 0303 	adds.w	r3, sl, r3
 800671c:	623b      	str	r3, [r7, #32]
 800671e:	462b      	mov	r3, r5
 8006720:	eb4b 0303 	adc.w	r3, fp, r3
 8006724:	627b      	str	r3, [r7, #36]	@ 0x24
 8006726:	f04f 0200 	mov.w	r2, #0
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006732:	4629      	mov	r1, r5
 8006734:	028b      	lsls	r3, r1, #10
 8006736:	4621      	mov	r1, r4
 8006738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800673c:	4621      	mov	r1, r4
 800673e:	028a      	lsls	r2, r1, #10
 8006740:	4610      	mov	r0, r2
 8006742:	4619      	mov	r1, r3
 8006744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006748:	2200      	movs	r2, #0
 800674a:	673b      	str	r3, [r7, #112]	@ 0x70
 800674c:	677a      	str	r2, [r7, #116]	@ 0x74
 800674e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006752:	f7f9 fdad 	bl	80002b0 <__aeabi_uldivmod>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4613      	mov	r3, r2
 800675c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006760:	4b41      	ldr	r3, [pc, #260]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x354>)
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	0c1b      	lsrs	r3, r3, #16
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	3301      	adds	r3, #1
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006776:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800677a:	fbb2 f3f3 	udiv	r3, r2, r3
 800677e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006782:	e0eb      	b.n	800695c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006784:	4b38      	ldr	r3, [pc, #224]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x354>)
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800678c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006790:	4b35      	ldr	r3, [pc, #212]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x354>)
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d06b      	beq.n	8006874 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800679c:	4b32      	ldr	r3, [pc, #200]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x354>)
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	099b      	lsrs	r3, r3, #6
 80067a2:	2200      	movs	r2, #0
 80067a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80067a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80067b0:	2300      	movs	r3, #0
 80067b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80067b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80067b8:	4622      	mov	r2, r4
 80067ba:	462b      	mov	r3, r5
 80067bc:	f04f 0000 	mov.w	r0, #0
 80067c0:	f04f 0100 	mov.w	r1, #0
 80067c4:	0159      	lsls	r1, r3, #5
 80067c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067ca:	0150      	lsls	r0, r2, #5
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4621      	mov	r1, r4
 80067d2:	1a51      	subs	r1, r2, r1
 80067d4:	61b9      	str	r1, [r7, #24]
 80067d6:	4629      	mov	r1, r5
 80067d8:	eb63 0301 	sbc.w	r3, r3, r1
 80067dc:	61fb      	str	r3, [r7, #28]
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	f04f 0300 	mov.w	r3, #0
 80067e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80067ea:	4659      	mov	r1, fp
 80067ec:	018b      	lsls	r3, r1, #6
 80067ee:	4651      	mov	r1, sl
 80067f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067f4:	4651      	mov	r1, sl
 80067f6:	018a      	lsls	r2, r1, #6
 80067f8:	4651      	mov	r1, sl
 80067fa:	ebb2 0801 	subs.w	r8, r2, r1
 80067fe:	4659      	mov	r1, fp
 8006800:	eb63 0901 	sbc.w	r9, r3, r1
 8006804:	f04f 0200 	mov.w	r2, #0
 8006808:	f04f 0300 	mov.w	r3, #0
 800680c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006810:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006814:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006818:	4690      	mov	r8, r2
 800681a:	4699      	mov	r9, r3
 800681c:	4623      	mov	r3, r4
 800681e:	eb18 0303 	adds.w	r3, r8, r3
 8006822:	613b      	str	r3, [r7, #16]
 8006824:	462b      	mov	r3, r5
 8006826:	eb49 0303 	adc.w	r3, r9, r3
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006838:	4629      	mov	r1, r5
 800683a:	024b      	lsls	r3, r1, #9
 800683c:	4621      	mov	r1, r4
 800683e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006842:	4621      	mov	r1, r4
 8006844:	024a      	lsls	r2, r1, #9
 8006846:	4610      	mov	r0, r2
 8006848:	4619      	mov	r1, r3
 800684a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800684e:	2200      	movs	r2, #0
 8006850:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006852:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006854:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006858:	f7f9 fd2a 	bl	80002b0 <__aeabi_uldivmod>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	4613      	mov	r3, r2
 8006862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006866:	e065      	b.n	8006934 <HAL_RCC_GetSysClockFreq+0x420>
 8006868:	40023800 	.word	0x40023800
 800686c:	00f42400 	.word	0x00f42400
 8006870:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006874:	4b3d      	ldr	r3, [pc, #244]	@ (800696c <HAL_RCC_GetSysClockFreq+0x458>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	099b      	lsrs	r3, r3, #6
 800687a:	2200      	movs	r2, #0
 800687c:	4618      	mov	r0, r3
 800687e:	4611      	mov	r1, r2
 8006880:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006884:	653b      	str	r3, [r7, #80]	@ 0x50
 8006886:	2300      	movs	r3, #0
 8006888:	657b      	str	r3, [r7, #84]	@ 0x54
 800688a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800688e:	4642      	mov	r2, r8
 8006890:	464b      	mov	r3, r9
 8006892:	f04f 0000 	mov.w	r0, #0
 8006896:	f04f 0100 	mov.w	r1, #0
 800689a:	0159      	lsls	r1, r3, #5
 800689c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068a0:	0150      	lsls	r0, r2, #5
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	4641      	mov	r1, r8
 80068a8:	1a51      	subs	r1, r2, r1
 80068aa:	60b9      	str	r1, [r7, #8]
 80068ac:	4649      	mov	r1, r9
 80068ae:	eb63 0301 	sbc.w	r3, r3, r1
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	f04f 0200 	mov.w	r2, #0
 80068b8:	f04f 0300 	mov.w	r3, #0
 80068bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80068c0:	4659      	mov	r1, fp
 80068c2:	018b      	lsls	r3, r1, #6
 80068c4:	4651      	mov	r1, sl
 80068c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068ca:	4651      	mov	r1, sl
 80068cc:	018a      	lsls	r2, r1, #6
 80068ce:	4651      	mov	r1, sl
 80068d0:	1a54      	subs	r4, r2, r1
 80068d2:	4659      	mov	r1, fp
 80068d4:	eb63 0501 	sbc.w	r5, r3, r1
 80068d8:	f04f 0200 	mov.w	r2, #0
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	00eb      	lsls	r3, r5, #3
 80068e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068e6:	00e2      	lsls	r2, r4, #3
 80068e8:	4614      	mov	r4, r2
 80068ea:	461d      	mov	r5, r3
 80068ec:	4643      	mov	r3, r8
 80068ee:	18e3      	adds	r3, r4, r3
 80068f0:	603b      	str	r3, [r7, #0]
 80068f2:	464b      	mov	r3, r9
 80068f4:	eb45 0303 	adc.w	r3, r5, r3
 80068f8:	607b      	str	r3, [r7, #4]
 80068fa:	f04f 0200 	mov.w	r2, #0
 80068fe:	f04f 0300 	mov.w	r3, #0
 8006902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006906:	4629      	mov	r1, r5
 8006908:	028b      	lsls	r3, r1, #10
 800690a:	4621      	mov	r1, r4
 800690c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006910:	4621      	mov	r1, r4
 8006912:	028a      	lsls	r2, r1, #10
 8006914:	4610      	mov	r0, r2
 8006916:	4619      	mov	r1, r3
 8006918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800691c:	2200      	movs	r2, #0
 800691e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006920:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006922:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006926:	f7f9 fcc3 	bl	80002b0 <__aeabi_uldivmod>
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	4613      	mov	r3, r2
 8006930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006934:	4b0d      	ldr	r3, [pc, #52]	@ (800696c <HAL_RCC_GetSysClockFreq+0x458>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	0f1b      	lsrs	r3, r3, #28
 800693a:	f003 0307 	and.w	r3, r3, #7
 800693e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006946:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800694a:	fbb2 f3f3 	udiv	r3, r2, r3
 800694e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006952:	e003      	b.n	800695c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006954:	4b06      	ldr	r3, [pc, #24]	@ (8006970 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006956:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800695a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800695c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006960:	4618      	mov	r0, r3
 8006962:	37b8      	adds	r7, #184	@ 0xb8
 8006964:	46bd      	mov	sp, r7
 8006966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800696a:	bf00      	nop
 800696c:	40023800 	.word	0x40023800
 8006970:	00f42400 	.word	0x00f42400

08006974 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e28d      	b.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 8083 	beq.w	8006a9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006994:	4b94      	ldr	r3, [pc, #592]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f003 030c 	and.w	r3, r3, #12
 800699c:	2b04      	cmp	r3, #4
 800699e:	d019      	beq.n	80069d4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80069a0:	4b91      	ldr	r3, [pc, #580]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f003 030c 	and.w	r3, r3, #12
        || \
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d106      	bne.n	80069ba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80069ac:	4b8e      	ldr	r3, [pc, #568]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069b8:	d00c      	beq.n	80069d4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069ba:	4b8b      	ldr	r3, [pc, #556]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80069c2:	2b0c      	cmp	r3, #12
 80069c4:	d112      	bne.n	80069ec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069c6:	4b88      	ldr	r3, [pc, #544]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069d2:	d10b      	bne.n	80069ec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069d4:	4b84      	ldr	r3, [pc, #528]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d05b      	beq.n	8006a98 <HAL_RCC_OscConfig+0x124>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d157      	bne.n	8006a98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e25a      	b.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069f4:	d106      	bne.n	8006a04 <HAL_RCC_OscConfig+0x90>
 80069f6:	4b7c      	ldr	r3, [pc, #496]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a7b      	ldr	r2, [pc, #492]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 80069fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	e01d      	b.n	8006a40 <HAL_RCC_OscConfig+0xcc>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a0c:	d10c      	bne.n	8006a28 <HAL_RCC_OscConfig+0xb4>
 8006a0e:	4b76      	ldr	r3, [pc, #472]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a75      	ldr	r2, [pc, #468]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a18:	6013      	str	r3, [r2, #0]
 8006a1a:	4b73      	ldr	r3, [pc, #460]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a72      	ldr	r2, [pc, #456]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	e00b      	b.n	8006a40 <HAL_RCC_OscConfig+0xcc>
 8006a28:	4b6f      	ldr	r3, [pc, #444]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a6e      	ldr	r2, [pc, #440]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	4b6c      	ldr	r3, [pc, #432]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a6b      	ldr	r2, [pc, #428]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d013      	beq.n	8006a70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a48:	f7fc fbe0 	bl	800320c <HAL_GetTick>
 8006a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a4e:	e008      	b.n	8006a62 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a50:	f7fc fbdc 	bl	800320c <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b64      	cmp	r3, #100	@ 0x64
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e21f      	b.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a62:	4b61      	ldr	r3, [pc, #388]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d0f0      	beq.n	8006a50 <HAL_RCC_OscConfig+0xdc>
 8006a6e:	e014      	b.n	8006a9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a70:	f7fc fbcc 	bl	800320c <HAL_GetTick>
 8006a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a76:	e008      	b.n	8006a8a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a78:	f7fc fbc8 	bl	800320c <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	2b64      	cmp	r3, #100	@ 0x64
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e20b      	b.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a8a:	4b57      	ldr	r3, [pc, #348]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1f0      	bne.n	8006a78 <HAL_RCC_OscConfig+0x104>
 8006a96:	e000      	b.n	8006a9a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d06f      	beq.n	8006b86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006aa6:	4b50      	ldr	r3, [pc, #320]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 030c 	and.w	r3, r3, #12
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d017      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006ab2:	4b4d      	ldr	r3, [pc, #308]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 030c 	and.w	r3, r3, #12
        || \
 8006aba:	2b08      	cmp	r3, #8
 8006abc:	d105      	bne.n	8006aca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006abe:	4b4a      	ldr	r3, [pc, #296]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00b      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aca:	4b47      	ldr	r3, [pc, #284]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006ad2:	2b0c      	cmp	r3, #12
 8006ad4:	d11c      	bne.n	8006b10 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ad6:	4b44      	ldr	r3, [pc, #272]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d116      	bne.n	8006b10 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ae2:	4b41      	ldr	r3, [pc, #260]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <HAL_RCC_OscConfig+0x186>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d001      	beq.n	8006afa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e1d3      	b.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006afa:	4b3b      	ldr	r3, [pc, #236]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	4937      	ldr	r1, [pc, #220]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b0e:	e03a      	b.n	8006b86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d020      	beq.n	8006b5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b18:	4b34      	ldr	r3, [pc, #208]	@ (8006bec <HAL_RCC_OscConfig+0x278>)
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b1e:	f7fc fb75 	bl	800320c <HAL_GetTick>
 8006b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b24:	e008      	b.n	8006b38 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b26:	f7fc fb71 	bl	800320c <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d901      	bls.n	8006b38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e1b4      	b.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b38:	4b2b      	ldr	r3, [pc, #172]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d0f0      	beq.n	8006b26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b44:	4b28      	ldr	r3, [pc, #160]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	00db      	lsls	r3, r3, #3
 8006b52:	4925      	ldr	r1, [pc, #148]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	600b      	str	r3, [r1, #0]
 8006b58:	e015      	b.n	8006b86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b5a:	4b24      	ldr	r3, [pc, #144]	@ (8006bec <HAL_RCC_OscConfig+0x278>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b60:	f7fc fb54 	bl	800320c <HAL_GetTick>
 8006b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b66:	e008      	b.n	8006b7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b68:	f7fc fb50 	bl	800320c <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e193      	b.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1f0      	bne.n	8006b68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0308 	and.w	r3, r3, #8
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d036      	beq.n	8006c00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d016      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b9a:	4b15      	ldr	r3, [pc, #84]	@ (8006bf0 <HAL_RCC_OscConfig+0x27c>)
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba0:	f7fc fb34 	bl	800320c <HAL_GetTick>
 8006ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ba8:	f7fc fb30 	bl	800320c <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e173      	b.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bba:	4b0b      	ldr	r3, [pc, #44]	@ (8006be8 <HAL_RCC_OscConfig+0x274>)
 8006bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0f0      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x234>
 8006bc6:	e01b      	b.n	8006c00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bc8:	4b09      	ldr	r3, [pc, #36]	@ (8006bf0 <HAL_RCC_OscConfig+0x27c>)
 8006bca:	2200      	movs	r2, #0
 8006bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bce:	f7fc fb1d 	bl	800320c <HAL_GetTick>
 8006bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd4:	e00e      	b.n	8006bf4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bd6:	f7fc fb19 	bl	800320c <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d907      	bls.n	8006bf4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e15c      	b.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
 8006be8:	40023800 	.word	0x40023800
 8006bec:	42470000 	.word	0x42470000
 8006bf0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bf4:	4b8a      	ldr	r3, [pc, #552]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1ea      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 8097 	beq.w	8006d3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c12:	4b83      	ldr	r3, [pc, #524]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10f      	bne.n	8006c3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60bb      	str	r3, [r7, #8]
 8006c22:	4b7f      	ldr	r3, [pc, #508]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c26:	4a7e      	ldr	r2, [pc, #504]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c2e:	4b7c      	ldr	r3, [pc, #496]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c36:	60bb      	str	r3, [r7, #8]
 8006c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c3e:	4b79      	ldr	r3, [pc, #484]	@ (8006e24 <HAL_RCC_OscConfig+0x4b0>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d118      	bne.n	8006c7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c4a:	4b76      	ldr	r3, [pc, #472]	@ (8006e24 <HAL_RCC_OscConfig+0x4b0>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a75      	ldr	r2, [pc, #468]	@ (8006e24 <HAL_RCC_OscConfig+0x4b0>)
 8006c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c56:	f7fc fad9 	bl	800320c <HAL_GetTick>
 8006c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c5c:	e008      	b.n	8006c70 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c5e:	f7fc fad5 	bl	800320c <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d901      	bls.n	8006c70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e118      	b.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c70:	4b6c      	ldr	r3, [pc, #432]	@ (8006e24 <HAL_RCC_OscConfig+0x4b0>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d0f0      	beq.n	8006c5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d106      	bne.n	8006c92 <HAL_RCC_OscConfig+0x31e>
 8006c84:	4b66      	ldr	r3, [pc, #408]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c88:	4a65      	ldr	r2, [pc, #404]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006c8a:	f043 0301 	orr.w	r3, r3, #1
 8006c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c90:	e01c      	b.n	8006ccc <HAL_RCC_OscConfig+0x358>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	2b05      	cmp	r3, #5
 8006c98:	d10c      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x340>
 8006c9a:	4b61      	ldr	r3, [pc, #388]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c9e:	4a60      	ldr	r2, [pc, #384]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006ca0:	f043 0304 	orr.w	r3, r3, #4
 8006ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ca6:	4b5e      	ldr	r3, [pc, #376]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006caa:	4a5d      	ldr	r2, [pc, #372]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006cac:	f043 0301 	orr.w	r3, r3, #1
 8006cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cb2:	e00b      	b.n	8006ccc <HAL_RCC_OscConfig+0x358>
 8006cb4:	4b5a      	ldr	r3, [pc, #360]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cb8:	4a59      	ldr	r2, [pc, #356]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006cba:	f023 0301 	bic.w	r3, r3, #1
 8006cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cc0:	4b57      	ldr	r3, [pc, #348]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cc4:	4a56      	ldr	r2, [pc, #344]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006cc6:	f023 0304 	bic.w	r3, r3, #4
 8006cca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d015      	beq.n	8006d00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd4:	f7fc fa9a 	bl	800320c <HAL_GetTick>
 8006cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cda:	e00a      	b.n	8006cf2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cdc:	f7fc fa96 	bl	800320c <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d901      	bls.n	8006cf2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e0d7      	b.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cf2:	4b4b      	ldr	r3, [pc, #300]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cf6:	f003 0302 	and.w	r3, r3, #2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0ee      	beq.n	8006cdc <HAL_RCC_OscConfig+0x368>
 8006cfe:	e014      	b.n	8006d2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d00:	f7fc fa84 	bl	800320c <HAL_GetTick>
 8006d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d06:	e00a      	b.n	8006d1e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d08:	f7fc fa80 	bl	800320c <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e0c1      	b.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d1e:	4b40      	ldr	r3, [pc, #256]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1ee      	bne.n	8006d08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d105      	bne.n	8006d3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d30:	4b3b      	ldr	r3, [pc, #236]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d34:	4a3a      	ldr	r2, [pc, #232]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006d36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 80ad 	beq.w	8006ea0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d46:	4b36      	ldr	r3, [pc, #216]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 030c 	and.w	r3, r3, #12
 8006d4e:	2b08      	cmp	r3, #8
 8006d50:	d060      	beq.n	8006e14 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d145      	bne.n	8006de6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d5a:	4b33      	ldr	r3, [pc, #204]	@ (8006e28 <HAL_RCC_OscConfig+0x4b4>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d60:	f7fc fa54 	bl	800320c <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d68:	f7fc fa50 	bl	800320c <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e093      	b.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d7a:	4b29      	ldr	r3, [pc, #164]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1f0      	bne.n	8006d68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	69da      	ldr	r2, [r3, #28]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d94:	019b      	lsls	r3, r3, #6
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9c:	085b      	lsrs	r3, r3, #1
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	041b      	lsls	r3, r3, #16
 8006da2:	431a      	orrs	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da8:	061b      	lsls	r3, r3, #24
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db0:	071b      	lsls	r3, r3, #28
 8006db2:	491b      	ldr	r1, [pc, #108]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006db8:	4b1b      	ldr	r3, [pc, #108]	@ (8006e28 <HAL_RCC_OscConfig+0x4b4>)
 8006dba:	2201      	movs	r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dbe:	f7fc fa25 	bl	800320c <HAL_GetTick>
 8006dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dc4:	e008      	b.n	8006dd8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dc6:	f7fc fa21 	bl	800320c <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d901      	bls.n	8006dd8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e064      	b.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dd8:	4b11      	ldr	r3, [pc, #68]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0f0      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x452>
 8006de4:	e05c      	b.n	8006ea0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006de6:	4b10      	ldr	r3, [pc, #64]	@ (8006e28 <HAL_RCC_OscConfig+0x4b4>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dec:	f7fc fa0e 	bl	800320c <HAL_GetTick>
 8006df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006df2:	e008      	b.n	8006e06 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006df4:	f7fc fa0a 	bl	800320c <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e04d      	b.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e06:	4b06      	ldr	r3, [pc, #24]	@ (8006e20 <HAL_RCC_OscConfig+0x4ac>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1f0      	bne.n	8006df4 <HAL_RCC_OscConfig+0x480>
 8006e12:	e045      	b.n	8006ea0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d107      	bne.n	8006e2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e040      	b.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
 8006e20:	40023800 	.word	0x40023800
 8006e24:	40007000 	.word	0x40007000
 8006e28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8006eac <HAL_RCC_OscConfig+0x538>)
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d030      	beq.n	8006e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d129      	bne.n	8006e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d122      	bne.n	8006e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006e62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d119      	bne.n	8006e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e72:	085b      	lsrs	r3, r3, #1
 8006e74:	3b01      	subs	r3, #1
 8006e76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d10f      	bne.n	8006e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d107      	bne.n	8006e9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d001      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e000      	b.n	8006ea2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	40023800 	.word	0x40023800

08006eb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e041      	b.n	8006f46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d106      	bne.n	8006edc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7f9 fef0 	bl	8000cbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	3304      	adds	r3, #4
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	f000 fada 	bl	80074a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
	...

08006f50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d109      	bne.n	8006f74 <HAL_TIM_PWM_Start+0x24>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	bf14      	ite	ne
 8006f6c:	2301      	movne	r3, #1
 8006f6e:	2300      	moveq	r3, #0
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	e022      	b.n	8006fba <HAL_TIM_PWM_Start+0x6a>
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b04      	cmp	r3, #4
 8006f78:	d109      	bne.n	8006f8e <HAL_TIM_PWM_Start+0x3e>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	bf14      	ite	ne
 8006f86:	2301      	movne	r3, #1
 8006f88:	2300      	moveq	r3, #0
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	e015      	b.n	8006fba <HAL_TIM_PWM_Start+0x6a>
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	d109      	bne.n	8006fa8 <HAL_TIM_PWM_Start+0x58>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	bf14      	ite	ne
 8006fa0:	2301      	movne	r3, #1
 8006fa2:	2300      	moveq	r3, #0
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	e008      	b.n	8006fba <HAL_TIM_PWM_Start+0x6a>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	bf14      	ite	ne
 8006fb4:	2301      	movne	r3, #1
 8006fb6:	2300      	moveq	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e07c      	b.n	80070bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d104      	bne.n	8006fd2 <HAL_TIM_PWM_Start+0x82>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fd0:	e013      	b.n	8006ffa <HAL_TIM_PWM_Start+0xaa>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d104      	bne.n	8006fe2 <HAL_TIM_PWM_Start+0x92>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fe0:	e00b      	b.n	8006ffa <HAL_TIM_PWM_Start+0xaa>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b08      	cmp	r3, #8
 8006fe6:	d104      	bne.n	8006ff2 <HAL_TIM_PWM_Start+0xa2>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ff0:	e003      	b.n	8006ffa <HAL_TIM_PWM_Start+0xaa>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2201      	movs	r2, #1
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	4618      	mov	r0, r3
 8007004:	f000 fca6 	bl	8007954 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a2d      	ldr	r2, [pc, #180]	@ (80070c4 <HAL_TIM_PWM_Start+0x174>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d004      	beq.n	800701c <HAL_TIM_PWM_Start+0xcc>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a2c      	ldr	r2, [pc, #176]	@ (80070c8 <HAL_TIM_PWM_Start+0x178>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d101      	bne.n	8007020 <HAL_TIM_PWM_Start+0xd0>
 800701c:	2301      	movs	r3, #1
 800701e:	e000      	b.n	8007022 <HAL_TIM_PWM_Start+0xd2>
 8007020:	2300      	movs	r3, #0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d007      	beq.n	8007036 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007034:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a22      	ldr	r2, [pc, #136]	@ (80070c4 <HAL_TIM_PWM_Start+0x174>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d022      	beq.n	8007086 <HAL_TIM_PWM_Start+0x136>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007048:	d01d      	beq.n	8007086 <HAL_TIM_PWM_Start+0x136>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a1f      	ldr	r2, [pc, #124]	@ (80070cc <HAL_TIM_PWM_Start+0x17c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d018      	beq.n	8007086 <HAL_TIM_PWM_Start+0x136>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a1d      	ldr	r2, [pc, #116]	@ (80070d0 <HAL_TIM_PWM_Start+0x180>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d013      	beq.n	8007086 <HAL_TIM_PWM_Start+0x136>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a1c      	ldr	r2, [pc, #112]	@ (80070d4 <HAL_TIM_PWM_Start+0x184>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d00e      	beq.n	8007086 <HAL_TIM_PWM_Start+0x136>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a16      	ldr	r2, [pc, #88]	@ (80070c8 <HAL_TIM_PWM_Start+0x178>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d009      	beq.n	8007086 <HAL_TIM_PWM_Start+0x136>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a18      	ldr	r2, [pc, #96]	@ (80070d8 <HAL_TIM_PWM_Start+0x188>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d004      	beq.n	8007086 <HAL_TIM_PWM_Start+0x136>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a16      	ldr	r2, [pc, #88]	@ (80070dc <HAL_TIM_PWM_Start+0x18c>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d111      	bne.n	80070aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f003 0307 	and.w	r3, r3, #7
 8007090:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2b06      	cmp	r3, #6
 8007096:	d010      	beq.n	80070ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0201 	orr.w	r2, r2, #1
 80070a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a8:	e007      	b.n	80070ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f042 0201 	orr.w	r2, r2, #1
 80070b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	40010000 	.word	0x40010000
 80070c8:	40010400 	.word	0x40010400
 80070cc:	40000400 	.word	0x40000400
 80070d0:	40000800 	.word	0x40000800
 80070d4:	40000c00 	.word	0x40000c00
 80070d8:	40014000 	.word	0x40014000
 80070dc:	40001800 	.word	0x40001800

080070e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d020      	beq.n	8007144 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d01b      	beq.n	8007144 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f06f 0202 	mvn.w	r2, #2
 8007114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f99e 	bl	800746c <HAL_TIM_IC_CaptureCallback>
 8007130:	e005      	b.n	800713e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f990 	bl	8007458 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f9a1 	bl	8007480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f003 0304 	and.w	r3, r3, #4
 800714a:	2b00      	cmp	r3, #0
 800714c:	d020      	beq.n	8007190 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d01b      	beq.n	8007190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f06f 0204 	mvn.w	r2, #4
 8007160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2202      	movs	r2, #2
 8007166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f978 	bl	800746c <HAL_TIM_IC_CaptureCallback>
 800717c:	e005      	b.n	800718a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f96a 	bl	8007458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f97b 	bl	8007480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d020      	beq.n	80071dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f003 0308 	and.w	r3, r3, #8
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d01b      	beq.n	80071dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f06f 0208 	mvn.w	r2, #8
 80071ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2204      	movs	r2, #4
 80071b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f952 	bl	800746c <HAL_TIM_IC_CaptureCallback>
 80071c8:	e005      	b.n	80071d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f944 	bl	8007458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f955 	bl	8007480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f003 0310 	and.w	r3, r3, #16
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d020      	beq.n	8007228 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01b      	beq.n	8007228 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f06f 0210 	mvn.w	r2, #16
 80071f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2208      	movs	r2, #8
 80071fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f92c 	bl	800746c <HAL_TIM_IC_CaptureCallback>
 8007214:	e005      	b.n	8007222 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f91e 	bl	8007458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f92f 	bl	8007480 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00c      	beq.n	800724c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d007      	beq.n	800724c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f06f 0201 	mvn.w	r2, #1
 8007244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f8fc 	bl	8007444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00c      	beq.n	8007270 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800725c:	2b00      	cmp	r3, #0
 800725e:	d007      	beq.n	8007270 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fc1e 	bl	8007aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00c      	beq.n	8007294 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007280:	2b00      	cmp	r3, #0
 8007282:	d007      	beq.n	8007294 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800728c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f900 	bl	8007494 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f003 0320 	and.w	r3, r3, #32
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00c      	beq.n	80072b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f003 0320 	and.w	r3, r3, #32
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d007      	beq.n	80072b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0220 	mvn.w	r2, #32
 80072b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fbf0 	bl	8007a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072b8:	bf00      	nop
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072da:	2302      	movs	r3, #2
 80072dc:	e0ae      	b.n	800743c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b0c      	cmp	r3, #12
 80072ea:	f200 809f 	bhi.w	800742c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80072ee:	a201      	add	r2, pc, #4	@ (adr r2, 80072f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f4:	08007329 	.word	0x08007329
 80072f8:	0800742d 	.word	0x0800742d
 80072fc:	0800742d 	.word	0x0800742d
 8007300:	0800742d 	.word	0x0800742d
 8007304:	08007369 	.word	0x08007369
 8007308:	0800742d 	.word	0x0800742d
 800730c:	0800742d 	.word	0x0800742d
 8007310:	0800742d 	.word	0x0800742d
 8007314:	080073ab 	.word	0x080073ab
 8007318:	0800742d 	.word	0x0800742d
 800731c:	0800742d 	.word	0x0800742d
 8007320:	0800742d 	.word	0x0800742d
 8007324:	080073eb 	.word	0x080073eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68b9      	ldr	r1, [r7, #8]
 800732e:	4618      	mov	r0, r3
 8007330:	f000 f960 	bl	80075f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0208 	orr.w	r2, r2, #8
 8007342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699a      	ldr	r2, [r3, #24]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0204 	bic.w	r2, r2, #4
 8007352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6999      	ldr	r1, [r3, #24]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	691a      	ldr	r2, [r3, #16]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	619a      	str	r2, [r3, #24]
      break;
 8007366:	e064      	b.n	8007432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68b9      	ldr	r1, [r7, #8]
 800736e:	4618      	mov	r0, r3
 8007370:	f000 f9b0 	bl	80076d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699a      	ldr	r2, [r3, #24]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699a      	ldr	r2, [r3, #24]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6999      	ldr	r1, [r3, #24]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	021a      	lsls	r2, r3, #8
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	619a      	str	r2, [r3, #24]
      break;
 80073a8:	e043      	b.n	8007432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68b9      	ldr	r1, [r7, #8]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 fa05 	bl	80077c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	69da      	ldr	r2, [r3, #28]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f042 0208 	orr.w	r2, r2, #8
 80073c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69da      	ldr	r2, [r3, #28]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0204 	bic.w	r2, r2, #4
 80073d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69d9      	ldr	r1, [r3, #28]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	691a      	ldr	r2, [r3, #16]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	61da      	str	r2, [r3, #28]
      break;
 80073e8:	e023      	b.n	8007432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68b9      	ldr	r1, [r7, #8]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fa59 	bl	80078a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69da      	ldr	r2, [r3, #28]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69da      	ldr	r2, [r3, #28]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	69d9      	ldr	r1, [r3, #28]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	021a      	lsls	r2, r3, #8
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	61da      	str	r2, [r3, #28]
      break;
 800742a:	e002      	b.n	8007432 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	75fb      	strb	r3, [r7, #23]
      break;
 8007430:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800743a:	7dfb      	ldrb	r3, [r7, #23]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a43      	ldr	r2, [pc, #268]	@ (80075c8 <TIM_Base_SetConfig+0x120>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d013      	beq.n	80074e8 <TIM_Base_SetConfig+0x40>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074c6:	d00f      	beq.n	80074e8 <TIM_Base_SetConfig+0x40>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a40      	ldr	r2, [pc, #256]	@ (80075cc <TIM_Base_SetConfig+0x124>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d00b      	beq.n	80074e8 <TIM_Base_SetConfig+0x40>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a3f      	ldr	r2, [pc, #252]	@ (80075d0 <TIM_Base_SetConfig+0x128>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d007      	beq.n	80074e8 <TIM_Base_SetConfig+0x40>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a3e      	ldr	r2, [pc, #248]	@ (80075d4 <TIM_Base_SetConfig+0x12c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d003      	beq.n	80074e8 <TIM_Base_SetConfig+0x40>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a3d      	ldr	r2, [pc, #244]	@ (80075d8 <TIM_Base_SetConfig+0x130>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d108      	bne.n	80074fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a32      	ldr	r2, [pc, #200]	@ (80075c8 <TIM_Base_SetConfig+0x120>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d02b      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007508:	d027      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a2f      	ldr	r2, [pc, #188]	@ (80075cc <TIM_Base_SetConfig+0x124>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d023      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a2e      	ldr	r2, [pc, #184]	@ (80075d0 <TIM_Base_SetConfig+0x128>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d01f      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a2d      	ldr	r2, [pc, #180]	@ (80075d4 <TIM_Base_SetConfig+0x12c>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d01b      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a2c      	ldr	r2, [pc, #176]	@ (80075d8 <TIM_Base_SetConfig+0x130>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d017      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a2b      	ldr	r2, [pc, #172]	@ (80075dc <TIM_Base_SetConfig+0x134>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d013      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a2a      	ldr	r2, [pc, #168]	@ (80075e0 <TIM_Base_SetConfig+0x138>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00f      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a29      	ldr	r2, [pc, #164]	@ (80075e4 <TIM_Base_SetConfig+0x13c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d00b      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a28      	ldr	r2, [pc, #160]	@ (80075e8 <TIM_Base_SetConfig+0x140>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d007      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a27      	ldr	r2, [pc, #156]	@ (80075ec <TIM_Base_SetConfig+0x144>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d003      	beq.n	800755a <TIM_Base_SetConfig+0xb2>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a26      	ldr	r2, [pc, #152]	@ (80075f0 <TIM_Base_SetConfig+0x148>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d108      	bne.n	800756c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	4313      	orrs	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	4313      	orrs	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	689a      	ldr	r2, [r3, #8]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a0e      	ldr	r2, [pc, #56]	@ (80075c8 <TIM_Base_SetConfig+0x120>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d003      	beq.n	800759a <TIM_Base_SetConfig+0xf2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a10      	ldr	r2, [pc, #64]	@ (80075d8 <TIM_Base_SetConfig+0x130>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d103      	bne.n	80075a2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	691a      	ldr	r2, [r3, #16]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f043 0204 	orr.w	r2, r3, #4
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	601a      	str	r2, [r3, #0]
}
 80075ba:	bf00      	nop
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	40010000 	.word	0x40010000
 80075cc:	40000400 	.word	0x40000400
 80075d0:	40000800 	.word	0x40000800
 80075d4:	40000c00 	.word	0x40000c00
 80075d8:	40010400 	.word	0x40010400
 80075dc:	40014000 	.word	0x40014000
 80075e0:	40014400 	.word	0x40014400
 80075e4:	40014800 	.word	0x40014800
 80075e8:	40001800 	.word	0x40001800
 80075ec:	40001c00 	.word	0x40001c00
 80075f0:	40002000 	.word	0x40002000

080075f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	f023 0201 	bic.w	r2, r3, #1
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 0303 	bic.w	r3, r3, #3
 800762a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	4313      	orrs	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f023 0302 	bic.w	r3, r3, #2
 800763c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	4313      	orrs	r3, r2
 8007646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a20      	ldr	r2, [pc, #128]	@ (80076cc <TIM_OC1_SetConfig+0xd8>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d003      	beq.n	8007658 <TIM_OC1_SetConfig+0x64>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a1f      	ldr	r2, [pc, #124]	@ (80076d0 <TIM_OC1_SetConfig+0xdc>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d10c      	bne.n	8007672 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	f023 0308 	bic.w	r3, r3, #8
 800765e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	4313      	orrs	r3, r2
 8007668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f023 0304 	bic.w	r3, r3, #4
 8007670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a15      	ldr	r2, [pc, #84]	@ (80076cc <TIM_OC1_SetConfig+0xd8>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d003      	beq.n	8007682 <TIM_OC1_SetConfig+0x8e>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a14      	ldr	r2, [pc, #80]	@ (80076d0 <TIM_OC1_SetConfig+0xdc>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d111      	bne.n	80076a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	4313      	orrs	r3, r2
 800769a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	621a      	str	r2, [r3, #32]
}
 80076c0:	bf00      	nop
 80076c2:	371c      	adds	r7, #28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	40010000 	.word	0x40010000
 80076d0:	40010400 	.word	0x40010400

080076d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	f023 0210 	bic.w	r2, r3, #16
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800770a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	021b      	lsls	r3, r3, #8
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	4313      	orrs	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f023 0320 	bic.w	r3, r3, #32
 800771e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	011b      	lsls	r3, r3, #4
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	4313      	orrs	r3, r2
 800772a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a22      	ldr	r2, [pc, #136]	@ (80077b8 <TIM_OC2_SetConfig+0xe4>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d003      	beq.n	800773c <TIM_OC2_SetConfig+0x68>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a21      	ldr	r2, [pc, #132]	@ (80077bc <TIM_OC2_SetConfig+0xe8>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d10d      	bne.n	8007758 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	011b      	lsls	r3, r3, #4
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	4313      	orrs	r3, r2
 800774e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007756:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a17      	ldr	r2, [pc, #92]	@ (80077b8 <TIM_OC2_SetConfig+0xe4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d003      	beq.n	8007768 <TIM_OC2_SetConfig+0x94>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a16      	ldr	r2, [pc, #88]	@ (80077bc <TIM_OC2_SetConfig+0xe8>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d113      	bne.n	8007790 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800776e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007776:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	4313      	orrs	r3, r2
 8007782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	4313      	orrs	r3, r2
 800778e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	621a      	str	r2, [r3, #32]
}
 80077aa:	bf00      	nop
 80077ac:	371c      	adds	r7, #28
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	40010000 	.word	0x40010000
 80077bc:	40010400 	.word	0x40010400

080077c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f023 0303 	bic.w	r3, r3, #3
 80077f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	4313      	orrs	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	021b      	lsls	r3, r3, #8
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	4313      	orrs	r3, r2
 8007814:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a21      	ldr	r2, [pc, #132]	@ (80078a0 <TIM_OC3_SetConfig+0xe0>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d003      	beq.n	8007826 <TIM_OC3_SetConfig+0x66>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a20      	ldr	r2, [pc, #128]	@ (80078a4 <TIM_OC3_SetConfig+0xe4>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d10d      	bne.n	8007842 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800782c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	021b      	lsls	r3, r3, #8
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	4313      	orrs	r3, r2
 8007838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a16      	ldr	r2, [pc, #88]	@ (80078a0 <TIM_OC3_SetConfig+0xe0>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d003      	beq.n	8007852 <TIM_OC3_SetConfig+0x92>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a15      	ldr	r2, [pc, #84]	@ (80078a4 <TIM_OC3_SetConfig+0xe4>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d113      	bne.n	800787a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	4313      	orrs	r3, r2
 800786c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	4313      	orrs	r3, r2
 8007878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	621a      	str	r2, [r3, #32]
}
 8007894:	bf00      	nop
 8007896:	371c      	adds	r7, #28
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	40010000 	.word	0x40010000
 80078a4:	40010400 	.word	0x40010400

080078a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a1b      	ldr	r3, [r3, #32]
 80078bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	021b      	lsls	r3, r3, #8
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	031b      	lsls	r3, r3, #12
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a12      	ldr	r2, [pc, #72]	@ (800794c <TIM_OC4_SetConfig+0xa4>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d003      	beq.n	8007910 <TIM_OC4_SetConfig+0x68>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a11      	ldr	r2, [pc, #68]	@ (8007950 <TIM_OC4_SetConfig+0xa8>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d109      	bne.n	8007924 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007916:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	019b      	lsls	r3, r3, #6
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	4313      	orrs	r3, r2
 8007922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	621a      	str	r2, [r3, #32]
}
 800793e:	bf00      	nop
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	40010000 	.word	0x40010000
 8007950:	40010400 	.word	0x40010400

08007954 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007954:	b480      	push	{r7}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f003 031f 	and.w	r3, r3, #31
 8007966:	2201      	movs	r2, #1
 8007968:	fa02 f303 	lsl.w	r3, r2, r3
 800796c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6a1a      	ldr	r2, [r3, #32]
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	43db      	mvns	r3, r3
 8007976:	401a      	ands	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a1a      	ldr	r2, [r3, #32]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f003 031f 	and.w	r3, r3, #31
 8007986:	6879      	ldr	r1, [r7, #4]
 8007988:	fa01 f303 	lsl.w	r3, r1, r3
 800798c:	431a      	orrs	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	621a      	str	r2, [r3, #32]
}
 8007992:	bf00      	nop
 8007994:	371c      	adds	r7, #28
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
	...

080079a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d101      	bne.n	80079b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079b4:	2302      	movs	r3, #2
 80079b6:	e05a      	b.n	8007a6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2202      	movs	r2, #2
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a21      	ldr	r2, [pc, #132]	@ (8007a7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d022      	beq.n	8007a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a04:	d01d      	beq.n	8007a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8007a80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d018      	beq.n	8007a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a1b      	ldr	r2, [pc, #108]	@ (8007a84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d013      	beq.n	8007a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8007a88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d00e      	beq.n	8007a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a18      	ldr	r2, [pc, #96]	@ (8007a8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d009      	beq.n	8007a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a17      	ldr	r2, [pc, #92]	@ (8007a90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d004      	beq.n	8007a42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a15      	ldr	r2, [pc, #84]	@ (8007a94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d10c      	bne.n	8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	40010000 	.word	0x40010000
 8007a80:	40000400 	.word	0x40000400
 8007a84:	40000800 	.word	0x40000800
 8007a88:	40000c00 	.word	0x40000c00
 8007a8c:	40010400 	.word	0x40010400
 8007a90:	40014000 	.word	0x40014000
 8007a94:	40001800 	.word	0x40001800

08007a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e042      	b.n	8007b58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d106      	bne.n	8007aec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7f9 f98c 	bl	8000e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2224      	movs	r2, #36	@ 0x24
 8007af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68da      	ldr	r2, [r3, #12]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f82b 	bl	8007b60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	691a      	ldr	r2, [r3, #16]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	695a      	ldr	r2, [r3, #20]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68da      	ldr	r2, [r3, #12]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2220      	movs	r2, #32
 8007b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b64:	b0c0      	sub	sp, #256	@ 0x100
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b7c:	68d9      	ldr	r1, [r3, #12]
 8007b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	ea40 0301 	orr.w	r3, r0, r1
 8007b88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b8e:	689a      	ldr	r2, [r3, #8]
 8007b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	431a      	orrs	r2, r3
 8007b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007bb8:	f021 010c 	bic.w	r1, r1, #12
 8007bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007bc6:	430b      	orrs	r3, r1
 8007bc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bda:	6999      	ldr	r1, [r3, #24]
 8007bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	ea40 0301 	orr.w	r3, r0, r1
 8007be6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	4b8f      	ldr	r3, [pc, #572]	@ (8007e2c <UART_SetConfig+0x2cc>)
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d005      	beq.n	8007c00 <UART_SetConfig+0xa0>
 8007bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	4b8d      	ldr	r3, [pc, #564]	@ (8007e30 <UART_SetConfig+0x2d0>)
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d104      	bne.n	8007c0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c00:	f7fe fc74 	bl	80064ec <HAL_RCC_GetPCLK2Freq>
 8007c04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007c08:	e003      	b.n	8007c12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c0a:	f7fe fc5b 	bl	80064c4 <HAL_RCC_GetPCLK1Freq>
 8007c0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c1c:	f040 810c 	bne.w	8007e38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c24:	2200      	movs	r2, #0
 8007c26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007c2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007c32:	4622      	mov	r2, r4
 8007c34:	462b      	mov	r3, r5
 8007c36:	1891      	adds	r1, r2, r2
 8007c38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007c3a:	415b      	adcs	r3, r3
 8007c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007c42:	4621      	mov	r1, r4
 8007c44:	eb12 0801 	adds.w	r8, r2, r1
 8007c48:	4629      	mov	r1, r5
 8007c4a:	eb43 0901 	adc.w	r9, r3, r1
 8007c4e:	f04f 0200 	mov.w	r2, #0
 8007c52:	f04f 0300 	mov.w	r3, #0
 8007c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c62:	4690      	mov	r8, r2
 8007c64:	4699      	mov	r9, r3
 8007c66:	4623      	mov	r3, r4
 8007c68:	eb18 0303 	adds.w	r3, r8, r3
 8007c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c70:	462b      	mov	r3, r5
 8007c72:	eb49 0303 	adc.w	r3, r9, r3
 8007c76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007c8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007c8e:	460b      	mov	r3, r1
 8007c90:	18db      	adds	r3, r3, r3
 8007c92:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c94:	4613      	mov	r3, r2
 8007c96:	eb42 0303 	adc.w	r3, r2, r3
 8007c9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007ca0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007ca4:	f7f8 fb04 	bl	80002b0 <__aeabi_uldivmod>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4b61      	ldr	r3, [pc, #388]	@ (8007e34 <UART_SetConfig+0x2d4>)
 8007cae:	fba3 2302 	umull	r2, r3, r3, r2
 8007cb2:	095b      	lsrs	r3, r3, #5
 8007cb4:	011c      	lsls	r4, r3, #4
 8007cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cc0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007cc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007cc8:	4642      	mov	r2, r8
 8007cca:	464b      	mov	r3, r9
 8007ccc:	1891      	adds	r1, r2, r2
 8007cce:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007cd0:	415b      	adcs	r3, r3
 8007cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007cd8:	4641      	mov	r1, r8
 8007cda:	eb12 0a01 	adds.w	sl, r2, r1
 8007cde:	4649      	mov	r1, r9
 8007ce0:	eb43 0b01 	adc.w	fp, r3, r1
 8007ce4:	f04f 0200 	mov.w	r2, #0
 8007ce8:	f04f 0300 	mov.w	r3, #0
 8007cec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007cf0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007cf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cf8:	4692      	mov	sl, r2
 8007cfa:	469b      	mov	fp, r3
 8007cfc:	4643      	mov	r3, r8
 8007cfe:	eb1a 0303 	adds.w	r3, sl, r3
 8007d02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d06:	464b      	mov	r3, r9
 8007d08:	eb4b 0303 	adc.w	r3, fp, r3
 8007d0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007d20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007d24:	460b      	mov	r3, r1
 8007d26:	18db      	adds	r3, r3, r3
 8007d28:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	eb42 0303 	adc.w	r3, r2, r3
 8007d30:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007d36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007d3a:	f7f8 fab9 	bl	80002b0 <__aeabi_uldivmod>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4611      	mov	r1, r2
 8007d44:	4b3b      	ldr	r3, [pc, #236]	@ (8007e34 <UART_SetConfig+0x2d4>)
 8007d46:	fba3 2301 	umull	r2, r3, r3, r1
 8007d4a:	095b      	lsrs	r3, r3, #5
 8007d4c:	2264      	movs	r2, #100	@ 0x64
 8007d4e:	fb02 f303 	mul.w	r3, r2, r3
 8007d52:	1acb      	subs	r3, r1, r3
 8007d54:	00db      	lsls	r3, r3, #3
 8007d56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007d5a:	4b36      	ldr	r3, [pc, #216]	@ (8007e34 <UART_SetConfig+0x2d4>)
 8007d5c:	fba3 2302 	umull	r2, r3, r3, r2
 8007d60:	095b      	lsrs	r3, r3, #5
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007d68:	441c      	add	r4, r3
 8007d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007d78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007d7c:	4642      	mov	r2, r8
 8007d7e:	464b      	mov	r3, r9
 8007d80:	1891      	adds	r1, r2, r2
 8007d82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007d84:	415b      	adcs	r3, r3
 8007d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007d8c:	4641      	mov	r1, r8
 8007d8e:	1851      	adds	r1, r2, r1
 8007d90:	6339      	str	r1, [r7, #48]	@ 0x30
 8007d92:	4649      	mov	r1, r9
 8007d94:	414b      	adcs	r3, r1
 8007d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d98:	f04f 0200 	mov.w	r2, #0
 8007d9c:	f04f 0300 	mov.w	r3, #0
 8007da0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007da4:	4659      	mov	r1, fp
 8007da6:	00cb      	lsls	r3, r1, #3
 8007da8:	4651      	mov	r1, sl
 8007daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dae:	4651      	mov	r1, sl
 8007db0:	00ca      	lsls	r2, r1, #3
 8007db2:	4610      	mov	r0, r2
 8007db4:	4619      	mov	r1, r3
 8007db6:	4603      	mov	r3, r0
 8007db8:	4642      	mov	r2, r8
 8007dba:	189b      	adds	r3, r3, r2
 8007dbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007dc0:	464b      	mov	r3, r9
 8007dc2:	460a      	mov	r2, r1
 8007dc4:	eb42 0303 	adc.w	r3, r2, r3
 8007dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007dd8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007ddc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007de0:	460b      	mov	r3, r1
 8007de2:	18db      	adds	r3, r3, r3
 8007de4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007de6:	4613      	mov	r3, r2
 8007de8:	eb42 0303 	adc.w	r3, r2, r3
 8007dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007df2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007df6:	f7f8 fa5b 	bl	80002b0 <__aeabi_uldivmod>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8007e34 <UART_SetConfig+0x2d4>)
 8007e00:	fba3 1302 	umull	r1, r3, r3, r2
 8007e04:	095b      	lsrs	r3, r3, #5
 8007e06:	2164      	movs	r1, #100	@ 0x64
 8007e08:	fb01 f303 	mul.w	r3, r1, r3
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	00db      	lsls	r3, r3, #3
 8007e10:	3332      	adds	r3, #50	@ 0x32
 8007e12:	4a08      	ldr	r2, [pc, #32]	@ (8007e34 <UART_SetConfig+0x2d4>)
 8007e14:	fba2 2303 	umull	r2, r3, r2, r3
 8007e18:	095b      	lsrs	r3, r3, #5
 8007e1a:	f003 0207 	and.w	r2, r3, #7
 8007e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4422      	add	r2, r4
 8007e26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e28:	e106      	b.n	8008038 <UART_SetConfig+0x4d8>
 8007e2a:	bf00      	nop
 8007e2c:	40011000 	.word	0x40011000
 8007e30:	40011400 	.word	0x40011400
 8007e34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007e46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007e4a:	4642      	mov	r2, r8
 8007e4c:	464b      	mov	r3, r9
 8007e4e:	1891      	adds	r1, r2, r2
 8007e50:	6239      	str	r1, [r7, #32]
 8007e52:	415b      	adcs	r3, r3
 8007e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e5a:	4641      	mov	r1, r8
 8007e5c:	1854      	adds	r4, r2, r1
 8007e5e:	4649      	mov	r1, r9
 8007e60:	eb43 0501 	adc.w	r5, r3, r1
 8007e64:	f04f 0200 	mov.w	r2, #0
 8007e68:	f04f 0300 	mov.w	r3, #0
 8007e6c:	00eb      	lsls	r3, r5, #3
 8007e6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e72:	00e2      	lsls	r2, r4, #3
 8007e74:	4614      	mov	r4, r2
 8007e76:	461d      	mov	r5, r3
 8007e78:	4643      	mov	r3, r8
 8007e7a:	18e3      	adds	r3, r4, r3
 8007e7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e80:	464b      	mov	r3, r9
 8007e82:	eb45 0303 	adc.w	r3, r5, r3
 8007e86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e9a:	f04f 0200 	mov.w	r2, #0
 8007e9e:	f04f 0300 	mov.w	r3, #0
 8007ea2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	008b      	lsls	r3, r1, #2
 8007eaa:	4621      	mov	r1, r4
 8007eac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	008a      	lsls	r2, r1, #2
 8007eb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007eb8:	f7f8 f9fa 	bl	80002b0 <__aeabi_uldivmod>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4b60      	ldr	r3, [pc, #384]	@ (8008044 <UART_SetConfig+0x4e4>)
 8007ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ec6:	095b      	lsrs	r3, r3, #5
 8007ec8:	011c      	lsls	r4, r3, #4
 8007eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ed4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007ed8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007edc:	4642      	mov	r2, r8
 8007ede:	464b      	mov	r3, r9
 8007ee0:	1891      	adds	r1, r2, r2
 8007ee2:	61b9      	str	r1, [r7, #24]
 8007ee4:	415b      	adcs	r3, r3
 8007ee6:	61fb      	str	r3, [r7, #28]
 8007ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007eec:	4641      	mov	r1, r8
 8007eee:	1851      	adds	r1, r2, r1
 8007ef0:	6139      	str	r1, [r7, #16]
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	414b      	adcs	r3, r1
 8007ef6:	617b      	str	r3, [r7, #20]
 8007ef8:	f04f 0200 	mov.w	r2, #0
 8007efc:	f04f 0300 	mov.w	r3, #0
 8007f00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f04:	4659      	mov	r1, fp
 8007f06:	00cb      	lsls	r3, r1, #3
 8007f08:	4651      	mov	r1, sl
 8007f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f0e:	4651      	mov	r1, sl
 8007f10:	00ca      	lsls	r2, r1, #3
 8007f12:	4610      	mov	r0, r2
 8007f14:	4619      	mov	r1, r3
 8007f16:	4603      	mov	r3, r0
 8007f18:	4642      	mov	r2, r8
 8007f1a:	189b      	adds	r3, r3, r2
 8007f1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f20:	464b      	mov	r3, r9
 8007f22:	460a      	mov	r2, r1
 8007f24:	eb42 0303 	adc.w	r3, r2, r3
 8007f28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007f38:	f04f 0200 	mov.w	r2, #0
 8007f3c:	f04f 0300 	mov.w	r3, #0
 8007f40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007f44:	4649      	mov	r1, r9
 8007f46:	008b      	lsls	r3, r1, #2
 8007f48:	4641      	mov	r1, r8
 8007f4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f4e:	4641      	mov	r1, r8
 8007f50:	008a      	lsls	r2, r1, #2
 8007f52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007f56:	f7f8 f9ab 	bl	80002b0 <__aeabi_uldivmod>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	4611      	mov	r1, r2
 8007f60:	4b38      	ldr	r3, [pc, #224]	@ (8008044 <UART_SetConfig+0x4e4>)
 8007f62:	fba3 2301 	umull	r2, r3, r3, r1
 8007f66:	095b      	lsrs	r3, r3, #5
 8007f68:	2264      	movs	r2, #100	@ 0x64
 8007f6a:	fb02 f303 	mul.w	r3, r2, r3
 8007f6e:	1acb      	subs	r3, r1, r3
 8007f70:	011b      	lsls	r3, r3, #4
 8007f72:	3332      	adds	r3, #50	@ 0x32
 8007f74:	4a33      	ldr	r2, [pc, #204]	@ (8008044 <UART_SetConfig+0x4e4>)
 8007f76:	fba2 2303 	umull	r2, r3, r2, r3
 8007f7a:	095b      	lsrs	r3, r3, #5
 8007f7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f80:	441c      	add	r4, r3
 8007f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f86:	2200      	movs	r2, #0
 8007f88:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f8a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007f8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007f90:	4642      	mov	r2, r8
 8007f92:	464b      	mov	r3, r9
 8007f94:	1891      	adds	r1, r2, r2
 8007f96:	60b9      	str	r1, [r7, #8]
 8007f98:	415b      	adcs	r3, r3
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fa0:	4641      	mov	r1, r8
 8007fa2:	1851      	adds	r1, r2, r1
 8007fa4:	6039      	str	r1, [r7, #0]
 8007fa6:	4649      	mov	r1, r9
 8007fa8:	414b      	adcs	r3, r1
 8007faa:	607b      	str	r3, [r7, #4]
 8007fac:	f04f 0200 	mov.w	r2, #0
 8007fb0:	f04f 0300 	mov.w	r3, #0
 8007fb4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fb8:	4659      	mov	r1, fp
 8007fba:	00cb      	lsls	r3, r1, #3
 8007fbc:	4651      	mov	r1, sl
 8007fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fc2:	4651      	mov	r1, sl
 8007fc4:	00ca      	lsls	r2, r1, #3
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4603      	mov	r3, r0
 8007fcc:	4642      	mov	r2, r8
 8007fce:	189b      	adds	r3, r3, r2
 8007fd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fd2:	464b      	mov	r3, r9
 8007fd4:	460a      	mov	r2, r1
 8007fd6:	eb42 0303 	adc.w	r3, r2, r3
 8007fda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007fe6:	667a      	str	r2, [r7, #100]	@ 0x64
 8007fe8:	f04f 0200 	mov.w	r2, #0
 8007fec:	f04f 0300 	mov.w	r3, #0
 8007ff0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	008b      	lsls	r3, r1, #2
 8007ff8:	4641      	mov	r1, r8
 8007ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ffe:	4641      	mov	r1, r8
 8008000:	008a      	lsls	r2, r1, #2
 8008002:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008006:	f7f8 f953 	bl	80002b0 <__aeabi_uldivmod>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4b0d      	ldr	r3, [pc, #52]	@ (8008044 <UART_SetConfig+0x4e4>)
 8008010:	fba3 1302 	umull	r1, r3, r3, r2
 8008014:	095b      	lsrs	r3, r3, #5
 8008016:	2164      	movs	r1, #100	@ 0x64
 8008018:	fb01 f303 	mul.w	r3, r1, r3
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	011b      	lsls	r3, r3, #4
 8008020:	3332      	adds	r3, #50	@ 0x32
 8008022:	4a08      	ldr	r2, [pc, #32]	@ (8008044 <UART_SetConfig+0x4e4>)
 8008024:	fba2 2303 	umull	r2, r3, r2, r3
 8008028:	095b      	lsrs	r3, r3, #5
 800802a:	f003 020f 	and.w	r2, r3, #15
 800802e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4422      	add	r2, r4
 8008036:	609a      	str	r2, [r3, #8]
}
 8008038:	bf00      	nop
 800803a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800803e:	46bd      	mov	sp, r7
 8008040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008044:	51eb851f 	.word	0x51eb851f

08008048 <HardwareReset>:
        printf("0x%02X, ", xtalk_buf[i]);
        if ((i+1) % 16 == 0) printf("\n");
    }
}*/

void HardwareReset(void) {
 8008048:	b580      	push	{r7, lr}
 800804a:	af00      	add	r7, sp, #0

  HAL_GPIO_WritePin(PWR_EN_C_GPIO_Port, PWR_EN_C_Pin, GPIO_PIN_RESET);
 800804c:	2200      	movs	r2, #0
 800804e:	2140      	movs	r1, #64	@ 0x40
 8008050:	480f      	ldr	r0, [pc, #60]	@ (8008090 <HardwareReset+0x48>)
 8008052:	f7fb fbe1 	bl	8003818 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8008056:	2002      	movs	r0, #2
 8008058:	f7fb f8e4 	bl	8003224 <HAL_Delay>
  HAL_GPIO_WritePin(PWR_EN_C_GPIO_Port, PWR_EN_C_Pin, GPIO_PIN_SET);
 800805c:	2201      	movs	r2, #1
 800805e:	2140      	movs	r1, #64	@ 0x40
 8008060:	480b      	ldr	r0, [pc, #44]	@ (8008090 <HardwareReset+0x48>)
 8008062:	f7fb fbd9 	bl	8003818 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8008066:	2002      	movs	r0, #2
 8008068:	f7fb f8dc 	bl	8003224 <HAL_Delay>
  HAL_GPIO_WritePin(LPn_C_GPIO_Port, LPn_C_Pin, GPIO_PIN_RESET);
 800806c:	2200      	movs	r2, #0
 800806e:	2101      	movs	r1, #1
 8008070:	4808      	ldr	r0, [pc, #32]	@ (8008094 <HardwareReset+0x4c>)
 8008072:	f7fb fbd1 	bl	8003818 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8008076:	2002      	movs	r0, #2
 8008078:	f7fb f8d4 	bl	8003224 <HAL_Delay>
  HAL_GPIO_WritePin(LPn_C_GPIO_Port, LPn_C_Pin, GPIO_PIN_SET);
 800807c:	2201      	movs	r2, #1
 800807e:	2101      	movs	r1, #1
 8008080:	4804      	ldr	r0, [pc, #16]	@ (8008094 <HardwareReset+0x4c>)
 8008082:	f7fb fbc9 	bl	8003818 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8008086:	2002      	movs	r0, #2
 8008088:	f7fb f8cc 	bl	8003224 <HAL_Delay>
}
 800808c:	bf00      	nop
 800808e:	bd80      	pop	{r7, pc}
 8008090:	40020000 	.word	0x40020000
 8008094:	40020400 	.word	0x40020400

08008098 <Tof_init>:
}*/

/**
 * @brief Inizializza il sensore VL53L5CX.
 */
void Tof_init(void) {
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
    // Configurazione della struttura platform
    p_dev.platform.address = 0x29 << 1;   // 0x29 dal datasheet → shiftato di 1 per HAL
 800809c:	4b22      	ldr	r3, [pc, #136]	@ (8008128 <Tof_init+0x90>)
 800809e:	2252      	movs	r2, #82	@ 0x52
 80080a0:	801a      	strh	r2, [r3, #0]
    p_dev.platform.Write   = VL53L5CX_I2C_Write;
 80080a2:	4b21      	ldr	r3, [pc, #132]	@ (8008128 <Tof_init+0x90>)
 80080a4:	4a21      	ldr	r2, [pc, #132]	@ (800812c <Tof_init+0x94>)
 80080a6:	605a      	str	r2, [r3, #4]
    p_dev.platform.Read    = VL53L5CX_I2C_Read;
 80080a8:	4b1f      	ldr	r3, [pc, #124]	@ (8008128 <Tof_init+0x90>)
 80080aa:	4a21      	ldr	r2, [pc, #132]	@ (8008130 <Tof_init+0x98>)
 80080ac:	609a      	str	r2, [r3, #8]
    p_dev.platform.GetTick = VL53L5CX_GetTick;
 80080ae:	4b1e      	ldr	r3, [pc, #120]	@ (8008128 <Tof_init+0x90>)
 80080b0:	4a20      	ldr	r2, [pc, #128]	@ (8008134 <Tof_init+0x9c>)
 80080b2:	60da      	str	r2, [r3, #12]

    p_thresholds.param_low_thresh = desired_distance + 25;
 80080b4:	4b20      	ldr	r3, [pc, #128]	@ (8008138 <Tof_init+0xa0>)
 80080b6:	edd3 7a00 	vldr	s15, [r3]
 80080ba:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80080be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080c6:	ee17 2a90 	vmov	r2, s15
 80080ca:	4b1c      	ldr	r3, [pc, #112]	@ (800813c <Tof_init+0xa4>)
 80080cc:	601a      	str	r2, [r3, #0]
    p_thresholds.param_high_thresh = desired_distance - 25;
 80080ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008138 <Tof_init+0xa0>)
 80080d0:	edd3 7a00 	vldr	s15, [r3]
 80080d4:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80080d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080e0:	ee17 2a90 	vmov	r2, s15
 80080e4:	4b15      	ldr	r3, [pc, #84]	@ (800813c <Tof_init+0xa4>)
 80080e6:	605a      	str	r2, [r3, #4]
    p_thresholds.measurement = VL53L5CX_DISTANCE_MM;
 80080e8:	4b14      	ldr	r3, [pc, #80]	@ (800813c <Tof_init+0xa4>)
 80080ea:	2201      	movs	r2, #1
 80080ec:	721a      	strb	r2, [r3, #8]
    p_thresholds.type = VL53L5CX_OUT_OF_WINDOW;
 80080ee:	4b13      	ldr	r3, [pc, #76]	@ (800813c <Tof_init+0xa4>)
 80080f0:	2201      	movs	r2, #1
 80080f2:	725a      	strb	r2, [r3, #9]
    p_thresholds.zone_num = VL53L5CX_LAST_THRESHOLD;
 80080f4:	4b11      	ldr	r3, [pc, #68]	@ (800813c <Tof_init+0xa4>)
 80080f6:	2280      	movs	r2, #128	@ 0x80
 80080f8:	729a      	strb	r2, [r3, #10]

    // Reset hardware del sensore
    HardwareReset();
 80080fa:	f7ff ffa5 	bl	8008048 <HardwareReset>

    // Tentativo di inizializzazione
    printf("Avvio init VL53L5CX...\n");
 80080fe:	4810      	ldr	r0, [pc, #64]	@ (8008140 <Tof_init+0xa8>)
 8008100:	f000 ff2c 	bl	8008f5c <puts>
    if (vl53l5cx_init(&p_dev) != VL53L5CX_OK) {
 8008104:	4808      	ldr	r0, [pc, #32]	@ (8008128 <Tof_init+0x90>)
 8008106:	f7f9 fbdb 	bl	80018c0 <vl53l5cx_init>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d005      	beq.n	800811c <Tof_init+0x84>
        printf("Errore Init\n");
 8008110:	480c      	ldr	r0, [pc, #48]	@ (8008144 <Tof_init+0xac>)
 8008112:	f000 ff23 	bl	8008f5c <puts>
        Error_Handler();
 8008116:	f7f8 fd4b 	bl	8000bb0 <Error_Handler>
    } else {
        printf("Init OK\n");
    }
}
 800811a:	e002      	b.n	8008122 <Tof_init+0x8a>
        printf("Init OK\n");
 800811c:	480a      	ldr	r0, [pc, #40]	@ (8008148 <Tof_init+0xb0>)
 800811e:	f000 ff1d 	bl	8008f5c <puts>
}
 8008122:	bf00      	nop
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	200001d8 	.word	0x200001d8
 800812c:	080030a1 	.word	0x080030a1
 8008130:	080030e9 	.word	0x080030e9
 8008134:	08003131 	.word	0x08003131
 8008138:	20000014 	.word	0x20000014
 800813c:	20000bf0 	.word	0x20000bf0
 8008140:	08009ce8 	.word	0x08009ce8
 8008144:	08009d00 	.word	0x08009d00
 8008148:	08009d0c 	.word	0x08009d0c

0800814c <Tof_conf>:

void Tof_conf(void){
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
		printf("Errore set_caldata\n");
	} else {
		printf("Dati XtALK caricati correttamente\n");
	}*/

    if (vl53l5cx_set_resolution(&p_dev, VL53L5CX_RESOLUTION_8X8) != VL53L5CX_OK) {
 8008150:	2140      	movs	r1, #64	@ 0x40
 8008152:	483b      	ldr	r0, [pc, #236]	@ (8008240 <Tof_conf+0xf4>)
 8008154:	f7fa fbc3 	bl	80028de <vl53l5cx_set_resolution>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d005      	beq.n	800816a <Tof_conf+0x1e>
        printf("Errore Set Resolution\n");
 800815e:	4839      	ldr	r0, [pc, #228]	@ (8008244 <Tof_conf+0xf8>)
 8008160:	f000 fefc 	bl	8008f5c <puts>
        Error_Handler();
 8008164:	f7f8 fd24 	bl	8000bb0 <Error_Handler>
 8008168:	e002      	b.n	8008170 <Tof_conf+0x24>
    } else {
        printf("Set Resolution OK\n");
 800816a:	4837      	ldr	r0, [pc, #220]	@ (8008248 <Tof_conf+0xfc>)
 800816c:	f000 fef6 	bl	8008f5c <puts>
    }

    if (vl53l5cx_set_target_order(&p_dev, VL53L5CX_TARGET_ORDER_CLOSEST) != VL53L5CX_OK) {
 8008170:	2101      	movs	r1, #1
 8008172:	4833      	ldr	r0, [pc, #204]	@ (8008240 <Tof_conf+0xf4>)
 8008174:	f7fa fce0 	bl	8002b38 <vl53l5cx_set_target_order>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d005      	beq.n	800818a <Tof_conf+0x3e>
		printf("Errore Set Resolution\n");
 800817e:	4831      	ldr	r0, [pc, #196]	@ (8008244 <Tof_conf+0xf8>)
 8008180:	f000 feec 	bl	8008f5c <puts>
		Error_Handler();
 8008184:	f7f8 fd14 	bl	8000bb0 <Error_Handler>
 8008188:	e002      	b.n	8008190 <Tof_conf+0x44>
	} else {
		printf("Set Resolution OK\n");
 800818a:	482f      	ldr	r0, [pc, #188]	@ (8008248 <Tof_conf+0xfc>)
 800818c:	f000 fee6 	bl	8008f5c <puts>
	}


	if (vl53l5cx_set_ranging_frequency_hz(&p_dev, frequency) != VL53L5CX_OK) {
 8008190:	4b2e      	ldr	r3, [pc, #184]	@ (800824c <Tof_conf+0x100>)
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	4619      	mov	r1, r3
 8008196:	482a      	ldr	r0, [pc, #168]	@ (8008240 <Tof_conf+0xf4>)
 8008198:	f7fa fc75 	bl	8002a86 <vl53l5cx_set_ranging_frequency_hz>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d005      	beq.n	80081ae <Tof_conf+0x62>
		  printf("Errore Set Ranging Frequency\n");
 80081a2:	482b      	ldr	r0, [pc, #172]	@ (8008250 <Tof_conf+0x104>)
 80081a4:	f000 feda 	bl	8008f5c <puts>
		  Error_Handler();
 80081a8:	f7f8 fd02 	bl	8000bb0 <Error_Handler>
 80081ac:	e002      	b.n	80081b4 <Tof_conf+0x68>
	  } else {
		  printf("Set Ranging Frequency OK\n");
 80081ae:	4829      	ldr	r0, [pc, #164]	@ (8008254 <Tof_conf+0x108>)
 80081b0:	f000 fed4 	bl	8008f5c <puts>
	}


	if  (vl53l5cx_set_ranging_mode(&p_dev, VL53L5CX_RANGING_MODE_CONTINUOUS) != VL53L5CX_OK) {
 80081b4:	2101      	movs	r1, #1
 80081b6:	4822      	ldr	r0, [pc, #136]	@ (8008240 <Tof_conf+0xf4>)
 80081b8:	f7fa fcea 	bl	8002b90 <vl53l5cx_set_ranging_mode>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d005      	beq.n	80081ce <Tof_conf+0x82>
		  printf("Errore Set Ranging Mode\n");
 80081c2:	4825      	ldr	r0, [pc, #148]	@ (8008258 <Tof_conf+0x10c>)
 80081c4:	f000 feca 	bl	8008f5c <puts>
		  Error_Handler();
 80081c8:	f7f8 fcf2 	bl	8000bb0 <Error_Handler>
 80081cc:	e002      	b.n	80081d4 <Tof_conf+0x88>
	  } else {
		  printf("Set Ranging Mode OK\n");
 80081ce:	4823      	ldr	r0, [pc, #140]	@ (800825c <Tof_conf+0x110>)
 80081d0:	f000 fec4 	bl	8008f5c <puts>
	}


	if  (vl53l5cx_set_sharpener_percent(&p_dev, sharpener_percent) != VL53L5CX_OK) {
 80081d4:	4b22      	ldr	r3, [pc, #136]	@ (8008260 <Tof_conf+0x114>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	4619      	mov	r1, r3
 80081da:	4819      	ldr	r0, [pc, #100]	@ (8008240 <Tof_conf+0xf4>)
 80081dc:	f7fa fc74 	bl	8002ac8 <vl53l5cx_set_sharpener_percent>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d005      	beq.n	80081f2 <Tof_conf+0xa6>
		  printf("Errore Set sharpener\n");
 80081e6:	481f      	ldr	r0, [pc, #124]	@ (8008264 <Tof_conf+0x118>)
 80081e8:	f000 feb8 	bl	8008f5c <puts>
		  Error_Handler();
 80081ec:	f7f8 fce0 	bl	8000bb0 <Error_Handler>
 80081f0:	e002      	b.n	80081f8 <Tof_conf+0xac>
	  } else {
		  printf("Set sharpener OK\n");
 80081f2:	481d      	ldr	r0, [pc, #116]	@ (8008268 <Tof_conf+0x11c>)
 80081f4:	f000 feb2 	bl	8008f5c <puts>
		  Error_Handler();
	  } else {
		  printf("Set detection thresholds enable OK\n");
	}*/

	if  (vl53l5cx_set_detection_thresholds_enable (&p_dev, 0) != VL53L5CX_OK) {
 80081f8:	2100      	movs	r1, #0
 80081fa:	4811      	ldr	r0, [pc, #68]	@ (8008240 <Tof_conf+0xf4>)
 80081fc:	f7fa fe65 	bl	8002eca <vl53l5cx_set_detection_thresholds_enable>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d005      	beq.n	8008212 <Tof_conf+0xc6>
			  printf("Errore Set detection thresholds enable \n");
 8008206:	4819      	ldr	r0, [pc, #100]	@ (800826c <Tof_conf+0x120>)
 8008208:	f000 fea8 	bl	8008f5c <puts>
			  Error_Handler();
 800820c:	f7f8 fcd0 	bl	8000bb0 <Error_Handler>
 8008210:	e002      	b.n	8008218 <Tof_conf+0xcc>
		  } else {
			  printf("Set detection thresholds enable OK\n");
 8008212:	4817      	ldr	r0, [pc, #92]	@ (8008270 <Tof_conf+0x124>)
 8008214:	f000 fea2 	bl	8008f5c <puts>
		  } else {
			  printf("Set detection thresholds OK\n");
		}
	}*/

	if  (vl53l5cx_start_ranging(&p_dev) != VL53L5CX_OK) {
 8008218:	4809      	ldr	r0, [pc, #36]	@ (8008240 <Tof_conf+0xf4>)
 800821a:	f7fa f857 	bl	80022cc <vl53l5cx_start_ranging>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d005      	beq.n	8008230 <Tof_conf+0xe4>
		  printf("Errore start \n");
 8008224:	4813      	ldr	r0, [pc, #76]	@ (8008274 <Tof_conf+0x128>)
 8008226:	f000 fe99 	bl	8008f5c <puts>
		  Error_Handler();
 800822a:	f7f8 fcc1 	bl	8000bb0 <Error_Handler>
 800822e:	e002      	b.n	8008236 <Tof_conf+0xea>
	  } else {
		  printf("start OK\n");
 8008230:	4811      	ldr	r0, [pc, #68]	@ (8008278 <Tof_conf+0x12c>)
 8008232:	f000 fe93 	bl	8008f5c <puts>
	}

	ready = 1;
 8008236:	4b11      	ldr	r3, [pc, #68]	@ (800827c <Tof_conf+0x130>)
 8008238:	2201      	movs	r2, #1
 800823a:	701a      	strb	r2, [r3, #0]

}
 800823c:	bf00      	nop
 800823e:	bd80      	pop	{r7, pc}
 8008240:	200001d8 	.word	0x200001d8
 8008244:	08009d14 	.word	0x08009d14
 8008248:	08009d2c 	.word	0x08009d2c
 800824c:	20000009 	.word	0x20000009
 8008250:	08009d40 	.word	0x08009d40
 8008254:	08009d60 	.word	0x08009d60
 8008258:	08009d7c 	.word	0x08009d7c
 800825c:	08009d94 	.word	0x08009d94
 8008260:	2000000a 	.word	0x2000000a
 8008264:	08009da8 	.word	0x08009da8
 8008268:	08009dc0 	.word	0x08009dc0
 800826c:	08009dd4 	.word	0x08009dd4
 8008270:	08009dfc 	.word	0x08009dfc
 8008274:	08009e20 	.word	0x08009e20
 8008278:	08009e30 	.word	0x08009e30
 800827c:	20000bfd 	.word	0x20000bfd

08008280 <feedbackcontroll>:


void feedbackcontroll(void){
 8008280:	b580      	push	{r7, lr}
 8008282:	b0a4      	sub	sp, #144	@ 0x90
 8008284:	af00      	add	r7, sp, #0

	float v_max = fabsf ((desired_distance - (float) 4000.0));
 8008286:	4b2c      	ldr	r3, [pc, #176]	@ (8008338 <feedbackcontroll+0xb8>)
 8008288:	edd3 7a00 	vldr	s15, [r3]
 800828c:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800833c <feedbackcontroll+0xbc>
 8008290:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008294:	eef0 7ae7 	vabs.f32	s15, s15
 8008298:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	float w_max = fabsf (((float)8.0 - center));
 800829c:	4b28      	ldr	r3, [pc, #160]	@ (8008340 <feedbackcontroll+0xc0>)
 800829e:	edd3 7a00 	vldr	s15, [r3]
 80082a2:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80082a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80082aa:	eef0 7ae7 	vabs.f32	s15, s15
 80082ae:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	float phi_max = (v_max + l * w_max) / r;
 80082b2:	4b24      	ldr	r3, [pc, #144]	@ (8008344 <feedbackcontroll+0xc4>)
 80082b4:	ed93 7a00 	vldr	s14, [r3]
 80082b8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80082bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082c0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80082c4:	ee77 6a27 	vadd.f32	s13, s14, s15
 80082c8:	4b1f      	ldr	r3, [pc, #124]	@ (8008348 <feedbackcontroll+0xc8>)
 80082ca:	ed93 7a00 	vldr	s14, [r3]
 80082ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082d2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38


	int num_col_1 = 0;
 80082d6:	2300      	movs	r3, #0
 80082d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	float sum_distance_col_1 = 0;
 80082dc:	f04f 0300 	mov.w	r3, #0
 80082e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	//float distance_col_1 = 0;

	int num_col_2 = 0;
 80082e4:	2300      	movs	r3, #0
 80082e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	float sum_distance_col_2 = 0;
 80082ea:	f04f 0300 	mov.w	r3, #0
 80082ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	//float distance_col_2 = 0;

	int num_col_3 = 0;
 80082f2:	2300      	movs	r3, #0
 80082f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
	float sum_distance_col_3 = 0;
 80082f6:	f04f 0300 	mov.w	r3, #0
 80082fa:	67bb      	str	r3, [r7, #120]	@ 0x78
	//float distance_col_3 = 0;

	int num_col_4 = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	677b      	str	r3, [r7, #116]	@ 0x74
	float sum_distance_col_4 = 0;
 8008300:	f04f 0300 	mov.w	r3, #0
 8008304:	673b      	str	r3, [r7, #112]	@ 0x70
	//float distance_col_4 = 0;

	int num_col_5 = 0;
 8008306:	2300      	movs	r3, #0
 8008308:	66fb      	str	r3, [r7, #108]	@ 0x6c
	float sum_distance_col_5 = 0;
 800830a:	f04f 0300 	mov.w	r3, #0
 800830e:	66bb      	str	r3, [r7, #104]	@ 0x68
	//float distance_col_5 = 0;

	int num_col_6 = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	667b      	str	r3, [r7, #100]	@ 0x64
	float sum_distance_col_6 = 0;
 8008314:	f04f 0300 	mov.w	r3, #0
 8008318:	663b      	str	r3, [r7, #96]	@ 0x60
	//float distance_col_6 = 0;

	int num_col_7 = 0;
 800831a:	2300      	movs	r3, #0
 800831c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float sum_distance_col_7 = 0;
 800831e:	f04f 0300 	mov.w	r3, #0
 8008322:	65bb      	str	r3, [r7, #88]	@ 0x58
	//float distance_col_7 = 0;

	int num_col_8 = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	657b      	str	r3, [r7, #84]	@ 0x54
	float sum_distance_col_8 = 0;
 8008328:	f04f 0300 	mov.w	r3, #0
 800832c:	653b      	str	r3, [r7, #80]	@ 0x50
	//float distance_col_8 = 0;

	for (i = 0; i < 64; i++){
 800832e:	4b07      	ldr	r3, [pc, #28]	@ (800834c <feedbackcontroll+0xcc>)
 8008330:	2200      	movs	r2, #0
 8008332:	701a      	strb	r2, [r3, #0]
 8008334:	e1cd      	b.n	80086d2 <feedbackcontroll+0x452>
 8008336:	bf00      	nop
 8008338:	20000014 	.word	0x20000014
 800833c:	457a0000 	.word	0x457a0000
 8008340:	20000018 	.word	0x20000018
 8008344:	2000001c 	.word	0x2000001c
 8008348:	20000020 	.word	0x20000020
 800834c:	20000bfc 	.word	0x20000bfc

		if (results.target_status[i] == 5){
 8008350:	4b96      	ldr	r3, [pc, #600]	@ (80085ac <feedbackcontroll+0x32c>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	461a      	mov	r2, r3
 8008356:	4b96      	ldr	r3, [pc, #600]	@ (80085b0 <feedbackcontroll+0x330>)
 8008358:	4413      	add	r3, r2
 800835a:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 800835e:	2b05      	cmp	r3, #5
 8008360:	f040 81b1 	bne.w	80086c6 <feedbackcontroll+0x446>

			if ( i==0 || i==8 || i==16 || i==24 ||i==32 || i==40 || i==48 || i==56 ) {
 8008364:	4b91      	ldr	r3, [pc, #580]	@ (80085ac <feedbackcontroll+0x32c>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d01b      	beq.n	80083a4 <feedbackcontroll+0x124>
 800836c:	4b8f      	ldr	r3, [pc, #572]	@ (80085ac <feedbackcontroll+0x32c>)
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b08      	cmp	r3, #8
 8008372:	d017      	beq.n	80083a4 <feedbackcontroll+0x124>
 8008374:	4b8d      	ldr	r3, [pc, #564]	@ (80085ac <feedbackcontroll+0x32c>)
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	2b10      	cmp	r3, #16
 800837a:	d013      	beq.n	80083a4 <feedbackcontroll+0x124>
 800837c:	4b8b      	ldr	r3, [pc, #556]	@ (80085ac <feedbackcontroll+0x32c>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	2b18      	cmp	r3, #24
 8008382:	d00f      	beq.n	80083a4 <feedbackcontroll+0x124>
 8008384:	4b89      	ldr	r3, [pc, #548]	@ (80085ac <feedbackcontroll+0x32c>)
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	2b20      	cmp	r3, #32
 800838a:	d00b      	beq.n	80083a4 <feedbackcontroll+0x124>
 800838c:	4b87      	ldr	r3, [pc, #540]	@ (80085ac <feedbackcontroll+0x32c>)
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	2b28      	cmp	r3, #40	@ 0x28
 8008392:	d007      	beq.n	80083a4 <feedbackcontroll+0x124>
 8008394:	4b85      	ldr	r3, [pc, #532]	@ (80085ac <feedbackcontroll+0x32c>)
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2b30      	cmp	r3, #48	@ 0x30
 800839a:	d003      	beq.n	80083a4 <feedbackcontroll+0x124>
 800839c:	4b83      	ldr	r3, [pc, #524]	@ (80085ac <feedbackcontroll+0x32c>)
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	2b38      	cmp	r3, #56	@ 0x38
 80083a2:	d116      	bne.n	80083d2 <feedbackcontroll+0x152>

				 num_col_1 = num_col_1 + 1; //conto quante volte l'indice appartiene a questa colonna
 80083a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083a8:	3301      	adds	r3, #1
 80083aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				 sum_distance_col_1 = sum_distance_col_1 + results.distance_mm[i]; //calcolo ma somma delle distanze appartenenti a quella colonna
 80083ae:	4b7f      	ldr	r3, [pc, #508]	@ (80085ac <feedbackcontroll+0x32c>)
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	4a7f      	ldr	r2, [pc, #508]	@ (80085b0 <feedbackcontroll+0x330>)
 80083b4:	3320      	adds	r3, #32
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	4413      	add	r3, r2
 80083ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80083be:	ee07 3a90 	vmov	s15, r3
 80083c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083c6:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80083ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083ce:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
			}

			if ( i==1 || i==9 || i==17 || i==25 ||i==33 || i==41 || i==49 || i==57 ) {
 80083d2:	4b76      	ldr	r3, [pc, #472]	@ (80085ac <feedbackcontroll+0x32c>)
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d01b      	beq.n	8008412 <feedbackcontroll+0x192>
 80083da:	4b74      	ldr	r3, [pc, #464]	@ (80085ac <feedbackcontroll+0x32c>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	2b09      	cmp	r3, #9
 80083e0:	d017      	beq.n	8008412 <feedbackcontroll+0x192>
 80083e2:	4b72      	ldr	r3, [pc, #456]	@ (80085ac <feedbackcontroll+0x32c>)
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	2b11      	cmp	r3, #17
 80083e8:	d013      	beq.n	8008412 <feedbackcontroll+0x192>
 80083ea:	4b70      	ldr	r3, [pc, #448]	@ (80085ac <feedbackcontroll+0x32c>)
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b19      	cmp	r3, #25
 80083f0:	d00f      	beq.n	8008412 <feedbackcontroll+0x192>
 80083f2:	4b6e      	ldr	r3, [pc, #440]	@ (80085ac <feedbackcontroll+0x32c>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	2b21      	cmp	r3, #33	@ 0x21
 80083f8:	d00b      	beq.n	8008412 <feedbackcontroll+0x192>
 80083fa:	4b6c      	ldr	r3, [pc, #432]	@ (80085ac <feedbackcontroll+0x32c>)
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	2b29      	cmp	r3, #41	@ 0x29
 8008400:	d007      	beq.n	8008412 <feedbackcontroll+0x192>
 8008402:	4b6a      	ldr	r3, [pc, #424]	@ (80085ac <feedbackcontroll+0x32c>)
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b31      	cmp	r3, #49	@ 0x31
 8008408:	d003      	beq.n	8008412 <feedbackcontroll+0x192>
 800840a:	4b68      	ldr	r3, [pc, #416]	@ (80085ac <feedbackcontroll+0x32c>)
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b39      	cmp	r3, #57	@ 0x39
 8008410:	d116      	bne.n	8008440 <feedbackcontroll+0x1c0>

				 num_col_2 = num_col_2 + 1;
 8008412:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008416:	3301      	adds	r3, #1
 8008418:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				 sum_distance_col_2 = sum_distance_col_2 + results.distance_mm[i];
 800841c:	4b63      	ldr	r3, [pc, #396]	@ (80085ac <feedbackcontroll+0x32c>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	4a63      	ldr	r2, [pc, #396]	@ (80085b0 <feedbackcontroll+0x330>)
 8008422:	3320      	adds	r3, #32
 8008424:	005b      	lsls	r3, r3, #1
 8008426:	4413      	add	r3, r2
 8008428:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800842c:	ee07 3a90 	vmov	s15, r3
 8008430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008434:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8008438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800843c:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
			}

			if (i==2 || i==10 || i==18 || i==26 ||i==34 || i==42 || i==50 || i==58 ) {
 8008440:	4b5a      	ldr	r3, [pc, #360]	@ (80085ac <feedbackcontroll+0x32c>)
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	2b02      	cmp	r3, #2
 8008446:	d01b      	beq.n	8008480 <feedbackcontroll+0x200>
 8008448:	4b58      	ldr	r3, [pc, #352]	@ (80085ac <feedbackcontroll+0x32c>)
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	2b0a      	cmp	r3, #10
 800844e:	d017      	beq.n	8008480 <feedbackcontroll+0x200>
 8008450:	4b56      	ldr	r3, [pc, #344]	@ (80085ac <feedbackcontroll+0x32c>)
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2b12      	cmp	r3, #18
 8008456:	d013      	beq.n	8008480 <feedbackcontroll+0x200>
 8008458:	4b54      	ldr	r3, [pc, #336]	@ (80085ac <feedbackcontroll+0x32c>)
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	2b1a      	cmp	r3, #26
 800845e:	d00f      	beq.n	8008480 <feedbackcontroll+0x200>
 8008460:	4b52      	ldr	r3, [pc, #328]	@ (80085ac <feedbackcontroll+0x32c>)
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2b22      	cmp	r3, #34	@ 0x22
 8008466:	d00b      	beq.n	8008480 <feedbackcontroll+0x200>
 8008468:	4b50      	ldr	r3, [pc, #320]	@ (80085ac <feedbackcontroll+0x32c>)
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b2a      	cmp	r3, #42	@ 0x2a
 800846e:	d007      	beq.n	8008480 <feedbackcontroll+0x200>
 8008470:	4b4e      	ldr	r3, [pc, #312]	@ (80085ac <feedbackcontroll+0x32c>)
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b32      	cmp	r3, #50	@ 0x32
 8008476:	d003      	beq.n	8008480 <feedbackcontroll+0x200>
 8008478:	4b4c      	ldr	r3, [pc, #304]	@ (80085ac <feedbackcontroll+0x32c>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	2b3a      	cmp	r3, #58	@ 0x3a
 800847e:	d114      	bne.n	80084aa <feedbackcontroll+0x22a>

				 num_col_3 = num_col_3 + 1;
 8008480:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008482:	3301      	adds	r3, #1
 8008484:	67fb      	str	r3, [r7, #124]	@ 0x7c
				 sum_distance_col_3 = sum_distance_col_3 + results.distance_mm[i];
 8008486:	4b49      	ldr	r3, [pc, #292]	@ (80085ac <feedbackcontroll+0x32c>)
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	4a49      	ldr	r2, [pc, #292]	@ (80085b0 <feedbackcontroll+0x330>)
 800848c:	3320      	adds	r3, #32
 800848e:	005b      	lsls	r3, r3, #1
 8008490:	4413      	add	r3, r2
 8008492:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008496:	ee07 3a90 	vmov	s15, r3
 800849a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800849e:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 80084a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084a6:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

			}

			if ( i==3 || i==11 || i==19 || i==27 ||i==35 || i==43 || i==51 || i==59 ) {
 80084aa:	4b40      	ldr	r3, [pc, #256]	@ (80085ac <feedbackcontroll+0x32c>)
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	d01b      	beq.n	80084ea <feedbackcontroll+0x26a>
 80084b2:	4b3e      	ldr	r3, [pc, #248]	@ (80085ac <feedbackcontroll+0x32c>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	2b0b      	cmp	r3, #11
 80084b8:	d017      	beq.n	80084ea <feedbackcontroll+0x26a>
 80084ba:	4b3c      	ldr	r3, [pc, #240]	@ (80085ac <feedbackcontroll+0x32c>)
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	2b13      	cmp	r3, #19
 80084c0:	d013      	beq.n	80084ea <feedbackcontroll+0x26a>
 80084c2:	4b3a      	ldr	r3, [pc, #232]	@ (80085ac <feedbackcontroll+0x32c>)
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	2b1b      	cmp	r3, #27
 80084c8:	d00f      	beq.n	80084ea <feedbackcontroll+0x26a>
 80084ca:	4b38      	ldr	r3, [pc, #224]	@ (80085ac <feedbackcontroll+0x32c>)
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	2b23      	cmp	r3, #35	@ 0x23
 80084d0:	d00b      	beq.n	80084ea <feedbackcontroll+0x26a>
 80084d2:	4b36      	ldr	r3, [pc, #216]	@ (80085ac <feedbackcontroll+0x32c>)
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	2b2b      	cmp	r3, #43	@ 0x2b
 80084d8:	d007      	beq.n	80084ea <feedbackcontroll+0x26a>
 80084da:	4b34      	ldr	r3, [pc, #208]	@ (80085ac <feedbackcontroll+0x32c>)
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	2b33      	cmp	r3, #51	@ 0x33
 80084e0:	d003      	beq.n	80084ea <feedbackcontroll+0x26a>
 80084e2:	4b32      	ldr	r3, [pc, #200]	@ (80085ac <feedbackcontroll+0x32c>)
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	2b3b      	cmp	r3, #59	@ 0x3b
 80084e8:	d114      	bne.n	8008514 <feedbackcontroll+0x294>

				 num_col_4 = num_col_4 + 1;
 80084ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084ec:	3301      	adds	r3, #1
 80084ee:	677b      	str	r3, [r7, #116]	@ 0x74
				 sum_distance_col_4 = sum_distance_col_4 + results.distance_mm[i];
 80084f0:	4b2e      	ldr	r3, [pc, #184]	@ (80085ac <feedbackcontroll+0x32c>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	4a2e      	ldr	r2, [pc, #184]	@ (80085b0 <feedbackcontroll+0x330>)
 80084f6:	3320      	adds	r3, #32
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	4413      	add	r3, r2
 80084fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008500:	ee07 3a90 	vmov	s15, r3
 8008504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008508:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800850c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008510:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

			}

			if ( i==4 || i==12 || i==20 || i==28 ||i==36 || i==44 || i==52 || i==60 ) {
 8008514:	4b25      	ldr	r3, [pc, #148]	@ (80085ac <feedbackcontroll+0x32c>)
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	2b04      	cmp	r3, #4
 800851a:	d01b      	beq.n	8008554 <feedbackcontroll+0x2d4>
 800851c:	4b23      	ldr	r3, [pc, #140]	@ (80085ac <feedbackcontroll+0x32c>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	2b0c      	cmp	r3, #12
 8008522:	d017      	beq.n	8008554 <feedbackcontroll+0x2d4>
 8008524:	4b21      	ldr	r3, [pc, #132]	@ (80085ac <feedbackcontroll+0x32c>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	2b14      	cmp	r3, #20
 800852a:	d013      	beq.n	8008554 <feedbackcontroll+0x2d4>
 800852c:	4b1f      	ldr	r3, [pc, #124]	@ (80085ac <feedbackcontroll+0x32c>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	2b1c      	cmp	r3, #28
 8008532:	d00f      	beq.n	8008554 <feedbackcontroll+0x2d4>
 8008534:	4b1d      	ldr	r3, [pc, #116]	@ (80085ac <feedbackcontroll+0x32c>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	2b24      	cmp	r3, #36	@ 0x24
 800853a:	d00b      	beq.n	8008554 <feedbackcontroll+0x2d4>
 800853c:	4b1b      	ldr	r3, [pc, #108]	@ (80085ac <feedbackcontroll+0x32c>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	2b2c      	cmp	r3, #44	@ 0x2c
 8008542:	d007      	beq.n	8008554 <feedbackcontroll+0x2d4>
 8008544:	4b19      	ldr	r3, [pc, #100]	@ (80085ac <feedbackcontroll+0x32c>)
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	2b34      	cmp	r3, #52	@ 0x34
 800854a:	d003      	beq.n	8008554 <feedbackcontroll+0x2d4>
 800854c:	4b17      	ldr	r3, [pc, #92]	@ (80085ac <feedbackcontroll+0x32c>)
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	2b3c      	cmp	r3, #60	@ 0x3c
 8008552:	d114      	bne.n	800857e <feedbackcontroll+0x2fe>

				 num_col_5 = num_col_5 + 1;
 8008554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008556:	3301      	adds	r3, #1
 8008558:	66fb      	str	r3, [r7, #108]	@ 0x6c
				 sum_distance_col_5 = sum_distance_col_5 + results.distance_mm[i];
 800855a:	4b14      	ldr	r3, [pc, #80]	@ (80085ac <feedbackcontroll+0x32c>)
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	4a14      	ldr	r2, [pc, #80]	@ (80085b0 <feedbackcontroll+0x330>)
 8008560:	3320      	adds	r3, #32
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	4413      	add	r3, r2
 8008566:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800856a:	ee07 3a90 	vmov	s15, r3
 800856e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008572:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8008576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800857a:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

			}

			if ( i==5 || i==13 || i==21 || i==29 ||i==37 || i==45 || i==53 || i==61 ) {
 800857e:	4b0b      	ldr	r3, [pc, #44]	@ (80085ac <feedbackcontroll+0x32c>)
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	2b05      	cmp	r3, #5
 8008584:	d020      	beq.n	80085c8 <feedbackcontroll+0x348>
 8008586:	4b09      	ldr	r3, [pc, #36]	@ (80085ac <feedbackcontroll+0x32c>)
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	2b0d      	cmp	r3, #13
 800858c:	d01c      	beq.n	80085c8 <feedbackcontroll+0x348>
 800858e:	4b07      	ldr	r3, [pc, #28]	@ (80085ac <feedbackcontroll+0x32c>)
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b15      	cmp	r3, #21
 8008594:	d018      	beq.n	80085c8 <feedbackcontroll+0x348>
 8008596:	4b05      	ldr	r3, [pc, #20]	@ (80085ac <feedbackcontroll+0x32c>)
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	2b1d      	cmp	r3, #29
 800859c:	d014      	beq.n	80085c8 <feedbackcontroll+0x348>
 800859e:	4b03      	ldr	r3, [pc, #12]	@ (80085ac <feedbackcontroll+0x32c>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	2b25      	cmp	r3, #37	@ 0x25
 80085a4:	d010      	beq.n	80085c8 <feedbackcontroll+0x348>
 80085a6:	4b01      	ldr	r3, [pc, #4]	@ (80085ac <feedbackcontroll+0x32c>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	e003      	b.n	80085b4 <feedbackcontroll+0x334>
 80085ac:	20000bfc 	.word	0x20000bfc
 80085b0:	20000aec 	.word	0x20000aec
 80085b4:	2b2d      	cmp	r3, #45	@ 0x2d
 80085b6:	d007      	beq.n	80085c8 <feedbackcontroll+0x348>
 80085b8:	4ba5      	ldr	r3, [pc, #660]	@ (8008850 <feedbackcontroll+0x5d0>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	2b35      	cmp	r3, #53	@ 0x35
 80085be:	d003      	beq.n	80085c8 <feedbackcontroll+0x348>
 80085c0:	4ba3      	ldr	r3, [pc, #652]	@ (8008850 <feedbackcontroll+0x5d0>)
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	2b3d      	cmp	r3, #61	@ 0x3d
 80085c6:	d114      	bne.n	80085f2 <feedbackcontroll+0x372>

				 num_col_6 = num_col_6 + 1;
 80085c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085ca:	3301      	adds	r3, #1
 80085cc:	667b      	str	r3, [r7, #100]	@ 0x64
				 sum_distance_col_6 = sum_distance_col_6 + results.distance_mm[i];
 80085ce:	4ba0      	ldr	r3, [pc, #640]	@ (8008850 <feedbackcontroll+0x5d0>)
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	4aa0      	ldr	r2, [pc, #640]	@ (8008854 <feedbackcontroll+0x5d4>)
 80085d4:	3320      	adds	r3, #32
 80085d6:	005b      	lsls	r3, r3, #1
 80085d8:	4413      	add	r3, r2
 80085da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80085de:	ee07 3a90 	vmov	s15, r3
 80085e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085e6:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80085ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085ee:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

			}

			if ( i==6 || i==14 || i==22 || i==30 ||i==38 || i==46 || i==54 || i==62 ) {
 80085f2:	4b97      	ldr	r3, [pc, #604]	@ (8008850 <feedbackcontroll+0x5d0>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	2b06      	cmp	r3, #6
 80085f8:	d01b      	beq.n	8008632 <feedbackcontroll+0x3b2>
 80085fa:	4b95      	ldr	r3, [pc, #596]	@ (8008850 <feedbackcontroll+0x5d0>)
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	2b0e      	cmp	r3, #14
 8008600:	d017      	beq.n	8008632 <feedbackcontroll+0x3b2>
 8008602:	4b93      	ldr	r3, [pc, #588]	@ (8008850 <feedbackcontroll+0x5d0>)
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	2b16      	cmp	r3, #22
 8008608:	d013      	beq.n	8008632 <feedbackcontroll+0x3b2>
 800860a:	4b91      	ldr	r3, [pc, #580]	@ (8008850 <feedbackcontroll+0x5d0>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	2b1e      	cmp	r3, #30
 8008610:	d00f      	beq.n	8008632 <feedbackcontroll+0x3b2>
 8008612:	4b8f      	ldr	r3, [pc, #572]	@ (8008850 <feedbackcontroll+0x5d0>)
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	2b26      	cmp	r3, #38	@ 0x26
 8008618:	d00b      	beq.n	8008632 <feedbackcontroll+0x3b2>
 800861a:	4b8d      	ldr	r3, [pc, #564]	@ (8008850 <feedbackcontroll+0x5d0>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008620:	d007      	beq.n	8008632 <feedbackcontroll+0x3b2>
 8008622:	4b8b      	ldr	r3, [pc, #556]	@ (8008850 <feedbackcontroll+0x5d0>)
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	2b36      	cmp	r3, #54	@ 0x36
 8008628:	d003      	beq.n	8008632 <feedbackcontroll+0x3b2>
 800862a:	4b89      	ldr	r3, [pc, #548]	@ (8008850 <feedbackcontroll+0x5d0>)
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008630:	d114      	bne.n	800865c <feedbackcontroll+0x3dc>

				 num_col_7 = num_col_7 + 1;
 8008632:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008634:	3301      	adds	r3, #1
 8008636:	65fb      	str	r3, [r7, #92]	@ 0x5c
				 sum_distance_col_7 = sum_distance_col_7 + results.distance_mm[i];
 8008638:	4b85      	ldr	r3, [pc, #532]	@ (8008850 <feedbackcontroll+0x5d0>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	4a85      	ldr	r2, [pc, #532]	@ (8008854 <feedbackcontroll+0x5d4>)
 800863e:	3320      	adds	r3, #32
 8008640:	005b      	lsls	r3, r3, #1
 8008642:	4413      	add	r3, r2
 8008644:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008648:	ee07 3a90 	vmov	s15, r3
 800864c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008650:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8008654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008658:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

			}

			if ( i==7 || i==15 || i==23 || i==31 ||i==39 || i==47 || i==55 || i==63 ) {
 800865c:	4b7c      	ldr	r3, [pc, #496]	@ (8008850 <feedbackcontroll+0x5d0>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2b07      	cmp	r3, #7
 8008662:	d01b      	beq.n	800869c <feedbackcontroll+0x41c>
 8008664:	4b7a      	ldr	r3, [pc, #488]	@ (8008850 <feedbackcontroll+0x5d0>)
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	2b0f      	cmp	r3, #15
 800866a:	d017      	beq.n	800869c <feedbackcontroll+0x41c>
 800866c:	4b78      	ldr	r3, [pc, #480]	@ (8008850 <feedbackcontroll+0x5d0>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	2b17      	cmp	r3, #23
 8008672:	d013      	beq.n	800869c <feedbackcontroll+0x41c>
 8008674:	4b76      	ldr	r3, [pc, #472]	@ (8008850 <feedbackcontroll+0x5d0>)
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	2b1f      	cmp	r3, #31
 800867a:	d00f      	beq.n	800869c <feedbackcontroll+0x41c>
 800867c:	4b74      	ldr	r3, [pc, #464]	@ (8008850 <feedbackcontroll+0x5d0>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	2b27      	cmp	r3, #39	@ 0x27
 8008682:	d00b      	beq.n	800869c <feedbackcontroll+0x41c>
 8008684:	4b72      	ldr	r3, [pc, #456]	@ (8008850 <feedbackcontroll+0x5d0>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	2b2f      	cmp	r3, #47	@ 0x2f
 800868a:	d007      	beq.n	800869c <feedbackcontroll+0x41c>
 800868c:	4b70      	ldr	r3, [pc, #448]	@ (8008850 <feedbackcontroll+0x5d0>)
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	2b37      	cmp	r3, #55	@ 0x37
 8008692:	d003      	beq.n	800869c <feedbackcontroll+0x41c>
 8008694:	4b6e      	ldr	r3, [pc, #440]	@ (8008850 <feedbackcontroll+0x5d0>)
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	2b3f      	cmp	r3, #63	@ 0x3f
 800869a:	d114      	bne.n	80086c6 <feedbackcontroll+0x446>

				 num_col_8 = num_col_8 + 1;
 800869c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800869e:	3301      	adds	r3, #1
 80086a0:	657b      	str	r3, [r7, #84]	@ 0x54
				 sum_distance_col_8 = sum_distance_col_8 + results.distance_mm[i];
 80086a2:	4b6b      	ldr	r3, [pc, #428]	@ (8008850 <feedbackcontroll+0x5d0>)
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	4a6b      	ldr	r2, [pc, #428]	@ (8008854 <feedbackcontroll+0x5d4>)
 80086a8:	3320      	adds	r3, #32
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	4413      	add	r3, r2
 80086ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80086b2:	ee07 3a90 	vmov	s15, r3
 80086b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086ba:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80086be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086c2:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	for (i = 0; i < 64; i++){
 80086c6:	4b62      	ldr	r3, [pc, #392]	@ (8008850 <feedbackcontroll+0x5d0>)
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	3301      	adds	r3, #1
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	4b60      	ldr	r3, [pc, #384]	@ (8008850 <feedbackcontroll+0x5d0>)
 80086d0:	701a      	strb	r2, [r3, #0]
 80086d2:	4b5f      	ldr	r3, [pc, #380]	@ (8008850 <feedbackcontroll+0x5d0>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80086d8:	f67f ae3a 	bls.w	8008350 <feedbackcontroll+0xd0>
		if (num_col_8 > 0)
		    distance_col_8 = sum_distance_col_8 / num_col_8;
		else
		    distance_col_8 = 0;*/

		int total_cols = num_col_1 + num_col_2 + num_col_3 + num_col_4 + num_col_5 + num_col_6 + num_col_7 + num_col_8 ;
 80086dc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80086e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80086e4:	441a      	add	r2, r3
 80086e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80086e8:	441a      	add	r2, r3
 80086ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086ec:	441a      	add	r2, r3
 80086ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086f0:	441a      	add	r2, r3
 80086f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086f4:	441a      	add	r2, r3
 80086f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086f8:	4413      	add	r3, r2
 80086fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80086fc:	4413      	add	r3, r2
 80086fe:	637b      	str	r3, [r7, #52]	@ 0x34

		if (total_cols <= 5){ //ritenuto il numero di celle minimo per determinare la presenza dell'obiettivo
 8008700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008702:	2b05      	cmp	r3, #5
 8008704:	f340 82f3 	ble.w	8008cee <feedbackcontroll+0xa6e>
			return;
		}


		int num_cols[8] = {
 8008708:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800870c:	603b      	str	r3, [r7, #0]
 800870e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008712:	607b      	str	r3, [r7, #4]
 8008714:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008716:	60bb      	str	r3, [r7, #8]
 8008718:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800871a:	60fb      	str	r3, [r7, #12]
 800871c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800871e:	613b      	str	r3, [r7, #16]
 8008720:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008722:	617b      	str	r3, [r7, #20]
 8008724:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008726:	61bb      	str	r3, [r7, #24]
 8008728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800872a:	61fb      	str	r3, [r7, #28]
		/*float dist_cols[8] = {
		    distance_col_1, distance_col_2, distance_col_3, distance_col_4,
		    distance_col_5, distance_col_6, distance_col_7, distance_col_8
		};*/

		int max_index = 0;   // indice della colonna con più punti
 800872c:	2300      	movs	r3, #0
 800872e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		int max_value = num_cols[0];
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	64bb      	str	r3, [r7, #72]	@ 0x48

		for (int k = 1; k < 8; k++) {
 8008734:	2301      	movs	r3, #1
 8008736:	647b      	str	r3, [r7, #68]	@ 0x44
 8008738:	e014      	b.n	8008764 <feedbackcontroll+0x4e4>
		    if (num_cols[k] >= max_value) {
 800873a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	3390      	adds	r3, #144	@ 0x90
 8008740:	443b      	add	r3, r7
 8008742:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8008746:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008748:	429a      	cmp	r2, r3
 800874a:	dc08      	bgt.n	800875e <feedbackcontroll+0x4de>
		        max_value = num_cols[k];
 800874c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	3390      	adds	r3, #144	@ 0x90
 8008752:	443b      	add	r3, r7
 8008754:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8008758:	64bb      	str	r3, [r7, #72]	@ 0x48
		        max_index = k;
 800875a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800875c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		for (int k = 1; k < 8; k++) {
 800875e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008760:	3301      	adds	r3, #1
 8008762:	647b      	str	r3, [r7, #68]	@ 0x44
 8008764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008766:	2b07      	cmp	r3, #7
 8008768:	dde7      	ble.n	800873a <feedbackcontroll+0x4ba>
		    }
		}

		if (max_index == 0){
 800876a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10d      	bne.n	800878c <feedbackcontroll+0x50c>

			measured_distance = sum_distance_col_1 / num_col_1;
 8008770:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008774:	ee07 3a90 	vmov	s15, r3
 8008778:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800877c:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 8008780:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008784:	4b34      	ldr	r3, [pc, #208]	@ (8008858 <feedbackcontroll+0x5d8>)
 8008786:	edc3 7a00 	vstr	s15, [r3]
 800878a:	e076      	b.n	800887a <feedbackcontroll+0x5fa>

		} else if (max_index == 1){
 800878c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800878e:	2b01      	cmp	r3, #1
 8008790:	d10d      	bne.n	80087ae <feedbackcontroll+0x52e>

			measured_distance = sum_distance_col_2 / num_col_2;
 8008792:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008796:	ee07 3a90 	vmov	s15, r3
 800879a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800879e:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 80087a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087a6:	4b2c      	ldr	r3, [pc, #176]	@ (8008858 <feedbackcontroll+0x5d8>)
 80087a8:	edc3 7a00 	vstr	s15, [r3]
 80087ac:	e065      	b.n	800887a <feedbackcontroll+0x5fa>

		} else if (max_index == 2){
 80087ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d10c      	bne.n	80087ce <feedbackcontroll+0x54e>

			measured_distance = sum_distance_col_3 / num_col_3;
 80087b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80087be:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 80087c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087c6:	4b24      	ldr	r3, [pc, #144]	@ (8008858 <feedbackcontroll+0x5d8>)
 80087c8:	edc3 7a00 	vstr	s15, [r3]
 80087cc:	e055      	b.n	800887a <feedbackcontroll+0x5fa>

		} else if (max_index == 3){
 80087ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d10c      	bne.n	80087ee <feedbackcontroll+0x56e>

			measured_distance = sum_distance_col_4 / num_col_4;
 80087d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80087de:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 80087e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087e6:	4b1c      	ldr	r3, [pc, #112]	@ (8008858 <feedbackcontroll+0x5d8>)
 80087e8:	edc3 7a00 	vstr	s15, [r3]
 80087ec:	e045      	b.n	800887a <feedbackcontroll+0x5fa>

		} else if (max_index == 4){
 80087ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087f0:	2b04      	cmp	r3, #4
 80087f2:	d10c      	bne.n	800880e <feedbackcontroll+0x58e>

			measured_distance = sum_distance_col_5 / num_col_5;
 80087f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087f6:	ee07 3a90 	vmov	s15, r3
 80087fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80087fe:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8008802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008806:	4b14      	ldr	r3, [pc, #80]	@ (8008858 <feedbackcontroll+0x5d8>)
 8008808:	edc3 7a00 	vstr	s15, [r3]
 800880c:	e035      	b.n	800887a <feedbackcontroll+0x5fa>

		} else if (max_index == 5){
 800880e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008810:	2b05      	cmp	r3, #5
 8008812:	d10c      	bne.n	800882e <feedbackcontroll+0x5ae>

			measured_distance = sum_distance_col_6 / num_col_6;
 8008814:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008816:	ee07 3a90 	vmov	s15, r3
 800881a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800881e:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8008822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008826:	4b0c      	ldr	r3, [pc, #48]	@ (8008858 <feedbackcontroll+0x5d8>)
 8008828:	edc3 7a00 	vstr	s15, [r3]
 800882c:	e025      	b.n	800887a <feedbackcontroll+0x5fa>

		} else if (max_index == 6){
 800882e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008830:	2b06      	cmp	r3, #6
 8008832:	d113      	bne.n	800885c <feedbackcontroll+0x5dc>

			measured_distance = sum_distance_col_7 / num_col_7;
 8008834:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008836:	ee07 3a90 	vmov	s15, r3
 800883a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800883e:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8008842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008846:	4b04      	ldr	r3, [pc, #16]	@ (8008858 <feedbackcontroll+0x5d8>)
 8008848:	edc3 7a00 	vstr	s15, [r3]
 800884c:	e015      	b.n	800887a <feedbackcontroll+0x5fa>
 800884e:	bf00      	nop
 8008850:	20000bfc 	.word	0x20000bfc
 8008854:	20000aec 	.word	0x20000aec
 8008858:	20000c00 	.word	0x20000c00

		} else if (max_index == 7){
 800885c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800885e:	2b07      	cmp	r3, #7
 8008860:	d10b      	bne.n	800887a <feedbackcontroll+0x5fa>

			measured_distance = sum_distance_col_8 / num_col_8;
 8008862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008864:	ee07 3a90 	vmov	s15, r3
 8008868:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800886c:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8008870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008874:	4b19      	ldr	r3, [pc, #100]	@ (80088dc <feedbackcontroll+0x65c>)
 8008876:	edc3 7a00 	vstr	s15, [r3]

		}

		//measured_distance = dist_cols[max_index];

		printf("measured distance %d\n", (int)measured_distance);
 800887a:	4b18      	ldr	r3, [pc, #96]	@ (80088dc <feedbackcontroll+0x65c>)
 800887c:	edd3 7a00 	vldr	s15, [r3]
 8008880:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008884:	ee17 1a90 	vmov	r1, s15
 8008888:	4815      	ldr	r0, [pc, #84]	@ (80088e0 <feedbackcontroll+0x660>)
 800888a:	f000 faff 	bl	8008e8c <iprintf>
			return;
		}*/


	    // Controllo velocità lineare (in avanti o indietro)
		error_linear_vel = (measured_distance - desired_distance) ;
 800888e:	4b13      	ldr	r3, [pc, #76]	@ (80088dc <feedbackcontroll+0x65c>)
 8008890:	ed93 7a00 	vldr	s14, [r3]
 8008894:	4b13      	ldr	r3, [pc, #76]	@ (80088e4 <feedbackcontroll+0x664>)
 8008896:	edd3 7a00 	vldr	s15, [r3]
 800889a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800889e:	4b12      	ldr	r3, [pc, #72]	@ (80088e8 <feedbackcontroll+0x668>)
 80088a0:	edc3 7a00 	vstr	s15, [r3]

	    float v = linear_gain * error_linear_vel;
 80088a4:	4b11      	ldr	r3, [pc, #68]	@ (80088ec <feedbackcontroll+0x66c>)
 80088a6:	ed93 7a00 	vldr	s14, [r3]
 80088aa:	4b0f      	ldr	r3, [pc, #60]	@ (80088e8 <feedbackcontroll+0x668>)
 80088ac:	edd3 7a00 	vldr	s15, [r3]
 80088b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	    // l'if è messo perchè il centro è 4,5 visto che le colonne sono 8 quindi
	    // potevo oscillare tra 3 e 4 e avere un comportamento anomalo
	    max_index ++;
 80088b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088ba:	3301      	adds	r3, #1
 80088bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	    if (max_index == 4 || max_index == 5) { //perchè max index parte da 0
 80088be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088c0:	2b04      	cmp	r3, #4
 80088c2:	d002      	beq.n	80088ca <feedbackcontroll+0x64a>
 80088c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088c6:	2b05      	cmp	r3, #5
 80088c8:	d116      	bne.n	80088f8 <feedbackcontroll+0x678>

	    	error_angular_vel = 0.0;
 80088ca:	4b09      	ldr	r3, [pc, #36]	@ (80088f0 <feedbackcontroll+0x670>)
 80088cc:	f04f 0200 	mov.w	r2, #0
 80088d0:	601a      	str	r2, [r3, #0]
	    	w = 0.0;
 80088d2:	4b08      	ldr	r3, [pc, #32]	@ (80088f4 <feedbackcontroll+0x674>)
 80088d4:	f04f 0200 	mov.w	r2, #0
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	e025      	b.n	8008928 <feedbackcontroll+0x6a8>
 80088dc:	20000c00 	.word	0x20000c00
 80088e0:	08009e3c 	.word	0x08009e3c
 80088e4:	20000014 	.word	0x20000014
 80088e8:	20000c04 	.word	0x20000c04
 80088ec:	2000000c 	.word	0x2000000c
 80088f0:	20000c08 	.word	0x20000c08
 80088f4:	20000c14 	.word	0x20000c14
	    } else{

		    error_angular_vel = (max_index - center);
 80088f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088fa:	ee07 3a90 	vmov	s15, r3
 80088fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008902:	4bc2      	ldr	r3, [pc, #776]	@ (8008c0c <feedbackcontroll+0x98c>)
 8008904:	edd3 7a00 	vldr	s15, [r3]
 8008908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800890c:	4bc0      	ldr	r3, [pc, #768]	@ (8008c10 <feedbackcontroll+0x990>)
 800890e:	edc3 7a00 	vstr	s15, [r3]
	    	w = (angular_gain * error_angular_vel);
 8008912:	4bc0      	ldr	r3, [pc, #768]	@ (8008c14 <feedbackcontroll+0x994>)
 8008914:	ed93 7a00 	vldr	s14, [r3]
 8008918:	4bbd      	ldr	r3, [pc, #756]	@ (8008c10 <feedbackcontroll+0x990>)
 800891a:	edd3 7a00 	vldr	s15, [r3]
 800891e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008922:	4bbd      	ldr	r3, [pc, #756]	@ (8008c18 <feedbackcontroll+0x998>)
 8008924:	edc3 7a00 	vstr	s15, [r3]
	    }


	    // Calcola le velocità delle ruote
	    float phi1 = (v + l * w) / r;
 8008928:	4bbc      	ldr	r3, [pc, #752]	@ (8008c1c <feedbackcontroll+0x99c>)
 800892a:	ed93 7a00 	vldr	s14, [r3]
 800892e:	4bba      	ldr	r3, [pc, #744]	@ (8008c18 <feedbackcontroll+0x998>)
 8008930:	edd3 7a00 	vldr	s15, [r3]
 8008934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008938:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800893c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8008940:	4bb7      	ldr	r3, [pc, #732]	@ (8008c20 <feedbackcontroll+0x9a0>)
 8008942:	ed93 7a00 	vldr	s14, [r3]
 8008946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800894a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	    float phi2 = (v - l * w) / r;
 800894e:	4bb3      	ldr	r3, [pc, #716]	@ (8008c1c <feedbackcontroll+0x99c>)
 8008950:	ed93 7a00 	vldr	s14, [r3]
 8008954:	4bb0      	ldr	r3, [pc, #704]	@ (8008c18 <feedbackcontroll+0x998>)
 8008956:	edd3 7a00 	vldr	s15, [r3]
 800895a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800895e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8008962:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008966:	4bae      	ldr	r3, [pc, #696]	@ (8008c20 <feedbackcontroll+0x9a0>)
 8008968:	ed93 7a00 	vldr	s14, [r3]
 800896c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008970:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	    dc1 = (phi1/phi_max);
 8008974:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8008978:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800897c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008980:	4ba8      	ldr	r3, [pc, #672]	@ (8008c24 <feedbackcontroll+0x9a4>)
 8008982:	edc3 7a00 	vstr	s15, [r3]
	    dc2 = (phi2/phi_max);
 8008986:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800898a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800898e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008992:	4ba5      	ldr	r3, [pc, #660]	@ (8008c28 <feedbackcontroll+0x9a8>)
 8008994:	edc3 7a00 	vstr	s15, [r3]


	    printf("dc1 %d\n", (int) (dc1*100));
 8008998:	4ba2      	ldr	r3, [pc, #648]	@ (8008c24 <feedbackcontroll+0x9a4>)
 800899a:	edd3 7a00 	vldr	s15, [r3]
 800899e:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8008c2c <feedbackcontroll+0x9ac>
 80089a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80089a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089aa:	ee17 1a90 	vmov	r1, s15
 80089ae:	48a0      	ldr	r0, [pc, #640]	@ (8008c30 <feedbackcontroll+0x9b0>)
 80089b0:	f000 fa6c 	bl	8008e8c <iprintf>
	    printf("dc2 %d\n", (int) (dc2*100));
 80089b4:	4b9c      	ldr	r3, [pc, #624]	@ (8008c28 <feedbackcontroll+0x9a8>)
 80089b6:	edd3 7a00 	vldr	s15, [r3]
 80089ba:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8008c2c <feedbackcontroll+0x9ac>
 80089be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80089c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089c6:	ee17 1a90 	vmov	r1, s15
 80089ca:	489a      	ldr	r0, [pc, #616]	@ (8008c34 <feedbackcontroll+0x9b4>)
 80089cc:	f000 fa5e 	bl	8008e8c <iprintf>


	    if (dc1 > 1.0f) dc1 = 1.0f;
 80089d0:	4b94      	ldr	r3, [pc, #592]	@ (8008c24 <feedbackcontroll+0x9a4>)
 80089d2:	edd3 7a00 	vldr	s15, [r3]
 80089d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e2:	dd03      	ble.n	80089ec <feedbackcontroll+0x76c>
 80089e4:	4b8f      	ldr	r3, [pc, #572]	@ (8008c24 <feedbackcontroll+0x9a4>)
 80089e6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80089ea:	601a      	str	r2, [r3, #0]
	    if (dc1 < -1.0f) dc1 = -1.0f;
 80089ec:	4b8d      	ldr	r3, [pc, #564]	@ (8008c24 <feedbackcontroll+0x9a4>)
 80089ee:	edd3 7a00 	vldr	s15, [r3]
 80089f2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80089f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089fe:	d502      	bpl.n	8008a06 <feedbackcontroll+0x786>
 8008a00:	4b88      	ldr	r3, [pc, #544]	@ (8008c24 <feedbackcontroll+0x9a4>)
 8008a02:	4a8d      	ldr	r2, [pc, #564]	@ (8008c38 <feedbackcontroll+0x9b8>)
 8008a04:	601a      	str	r2, [r3, #0]

	    if (dc2 > 1.0f) dc2 = 1.0f;
 8008a06:	4b88      	ldr	r3, [pc, #544]	@ (8008c28 <feedbackcontroll+0x9a8>)
 8008a08:	edd3 7a00 	vldr	s15, [r3]
 8008a0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a18:	dd03      	ble.n	8008a22 <feedbackcontroll+0x7a2>
 8008a1a:	4b83      	ldr	r3, [pc, #524]	@ (8008c28 <feedbackcontroll+0x9a8>)
 8008a1c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008a20:	601a      	str	r2, [r3, #0]
	    if (dc2 < -1.0f) dc2 = -1.0f;
 8008a22:	4b81      	ldr	r3, [pc, #516]	@ (8008c28 <feedbackcontroll+0x9a8>)
 8008a24:	edd3 7a00 	vldr	s15, [r3]
 8008a28:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8008a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a34:	d502      	bpl.n	8008a3c <feedbackcontroll+0x7bc>
 8008a36:	4b7c      	ldr	r3, [pc, #496]	@ (8008c28 <feedbackcontroll+0x9a8>)
 8008a38:	4a7f      	ldr	r2, [pc, #508]	@ (8008c38 <feedbackcontroll+0x9b8>)
 8008a3a:	601a      	str	r2, [r3, #0]

	    if (dc1 > 0.02f && dc1 < 0.2f) dc1 = 0.2f;
 8008a3c:	4b79      	ldr	r3, [pc, #484]	@ (8008c24 <feedbackcontroll+0x9a4>)
 8008a3e:	edd3 7a00 	vldr	s15, [r3]
 8008a42:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8008c3c <feedbackcontroll+0x9bc>
 8008a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a4e:	dd0c      	ble.n	8008a6a <feedbackcontroll+0x7ea>
 8008a50:	4b74      	ldr	r3, [pc, #464]	@ (8008c24 <feedbackcontroll+0x9a4>)
 8008a52:	edd3 7a00 	vldr	s15, [r3]
 8008a56:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8008c40 <feedbackcontroll+0x9c0>
 8008a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a62:	d502      	bpl.n	8008a6a <feedbackcontroll+0x7ea>
 8008a64:	4b6f      	ldr	r3, [pc, #444]	@ (8008c24 <feedbackcontroll+0x9a4>)
 8008a66:	4a77      	ldr	r2, [pc, #476]	@ (8008c44 <feedbackcontroll+0x9c4>)
 8008a68:	601a      	str	r2, [r3, #0]
	    if (dc2 > 0.02f && dc2 < 0.2f) dc2 = 0.2f;
 8008a6a:	4b6f      	ldr	r3, [pc, #444]	@ (8008c28 <feedbackcontroll+0x9a8>)
 8008a6c:	edd3 7a00 	vldr	s15, [r3]
 8008a70:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8008c3c <feedbackcontroll+0x9bc>
 8008a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a7c:	dd0c      	ble.n	8008a98 <feedbackcontroll+0x818>
 8008a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8008c28 <feedbackcontroll+0x9a8>)
 8008a80:	edd3 7a00 	vldr	s15, [r3]
 8008a84:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8008c40 <feedbackcontroll+0x9c0>
 8008a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a90:	d502      	bpl.n	8008a98 <feedbackcontroll+0x818>
 8008a92:	4b65      	ldr	r3, [pc, #404]	@ (8008c28 <feedbackcontroll+0x9a8>)
 8008a94:	4a6b      	ldr	r2, [pc, #428]	@ (8008c44 <feedbackcontroll+0x9c4>)
 8008a96:	601a      	str	r2, [r3, #0]

	    if (dc1 < -0.02f && dc1 > -0.2f) dc1 = -0.2f;
 8008a98:	4b62      	ldr	r3, [pc, #392]	@ (8008c24 <feedbackcontroll+0x9a4>)
 8008a9a:	edd3 7a00 	vldr	s15, [r3]
 8008a9e:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8008c48 <feedbackcontroll+0x9c8>
 8008aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aaa:	d50c      	bpl.n	8008ac6 <feedbackcontroll+0x846>
 8008aac:	4b5d      	ldr	r3, [pc, #372]	@ (8008c24 <feedbackcontroll+0x9a4>)
 8008aae:	edd3 7a00 	vldr	s15, [r3]
 8008ab2:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8008c4c <feedbackcontroll+0x9cc>
 8008ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008abe:	dd02      	ble.n	8008ac6 <feedbackcontroll+0x846>
 8008ac0:	4b58      	ldr	r3, [pc, #352]	@ (8008c24 <feedbackcontroll+0x9a4>)
 8008ac2:	4a63      	ldr	r2, [pc, #396]	@ (8008c50 <feedbackcontroll+0x9d0>)
 8008ac4:	601a      	str	r2, [r3, #0]
	    if (dc2 < -0.02f && dc2 > -0.2f) dc2 = -0.2f;
 8008ac6:	4b58      	ldr	r3, [pc, #352]	@ (8008c28 <feedbackcontroll+0x9a8>)
 8008ac8:	edd3 7a00 	vldr	s15, [r3]
 8008acc:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8008c48 <feedbackcontroll+0x9c8>
 8008ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad8:	d50c      	bpl.n	8008af4 <feedbackcontroll+0x874>
 8008ada:	4b53      	ldr	r3, [pc, #332]	@ (8008c28 <feedbackcontroll+0x9a8>)
 8008adc:	edd3 7a00 	vldr	s15, [r3]
 8008ae0:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8008c4c <feedbackcontroll+0x9cc>
 8008ae4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aec:	dd02      	ble.n	8008af4 <feedbackcontroll+0x874>
 8008aee:	4b4e      	ldr	r3, [pc, #312]	@ (8008c28 <feedbackcontroll+0x9a8>)
 8008af0:	4a57      	ldr	r2, [pc, #348]	@ (8008c50 <feedbackcontroll+0x9d0>)
 8008af2:	601a      	str	r2, [r3, #0]

	    if ((dc1 > -0.02f && dc1 < 0.02f) && (dc1 > -0.02f && dc1 < 0.02f)) dc1 = 0.0f;
 8008af4:	4b4b      	ldr	r3, [pc, #300]	@ (8008c24 <feedbackcontroll+0x9a4>)
 8008af6:	edd3 7a00 	vldr	s15, [r3]
 8008afa:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8008c48 <feedbackcontroll+0x9c8>
 8008afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b06:	dd21      	ble.n	8008b4c <feedbackcontroll+0x8cc>
 8008b08:	4b46      	ldr	r3, [pc, #280]	@ (8008c24 <feedbackcontroll+0x9a4>)
 8008b0a:	edd3 7a00 	vldr	s15, [r3]
 8008b0e:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8008c3c <feedbackcontroll+0x9bc>
 8008b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b1a:	d517      	bpl.n	8008b4c <feedbackcontroll+0x8cc>
 8008b1c:	4b41      	ldr	r3, [pc, #260]	@ (8008c24 <feedbackcontroll+0x9a4>)
 8008b1e:	edd3 7a00 	vldr	s15, [r3]
 8008b22:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8008c48 <feedbackcontroll+0x9c8>
 8008b26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b2e:	dd0d      	ble.n	8008b4c <feedbackcontroll+0x8cc>
 8008b30:	4b3c      	ldr	r3, [pc, #240]	@ (8008c24 <feedbackcontroll+0x9a4>)
 8008b32:	edd3 7a00 	vldr	s15, [r3]
 8008b36:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8008c3c <feedbackcontroll+0x9bc>
 8008b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b42:	d503      	bpl.n	8008b4c <feedbackcontroll+0x8cc>
 8008b44:	4b37      	ldr	r3, [pc, #220]	@ (8008c24 <feedbackcontroll+0x9a4>)
 8008b46:	f04f 0200 	mov.w	r2, #0
 8008b4a:	601a      	str	r2, [r3, #0]
	    if ((dc2 > -0.02f && dc2 < 0.02f) && (dc2 > -0.02f && dc2 < 0.02f)) dc2 = 0.0f;
 8008b4c:	4b36      	ldr	r3, [pc, #216]	@ (8008c28 <feedbackcontroll+0x9a8>)
 8008b4e:	edd3 7a00 	vldr	s15, [r3]
 8008b52:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8008c48 <feedbackcontroll+0x9c8>
 8008b56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b5e:	dd21      	ble.n	8008ba4 <feedbackcontroll+0x924>
 8008b60:	4b31      	ldr	r3, [pc, #196]	@ (8008c28 <feedbackcontroll+0x9a8>)
 8008b62:	edd3 7a00 	vldr	s15, [r3]
 8008b66:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8008c3c <feedbackcontroll+0x9bc>
 8008b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b72:	d517      	bpl.n	8008ba4 <feedbackcontroll+0x924>
 8008b74:	4b2c      	ldr	r3, [pc, #176]	@ (8008c28 <feedbackcontroll+0x9a8>)
 8008b76:	edd3 7a00 	vldr	s15, [r3]
 8008b7a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8008c48 <feedbackcontroll+0x9c8>
 8008b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b86:	dd0d      	ble.n	8008ba4 <feedbackcontroll+0x924>
 8008b88:	4b27      	ldr	r3, [pc, #156]	@ (8008c28 <feedbackcontroll+0x9a8>)
 8008b8a:	edd3 7a00 	vldr	s15, [r3]
 8008b8e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8008c3c <feedbackcontroll+0x9bc>
 8008b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b9a:	d503      	bpl.n	8008ba4 <feedbackcontroll+0x924>
 8008b9c:	4b22      	ldr	r3, [pc, #136]	@ (8008c28 <feedbackcontroll+0x9a8>)
 8008b9e:	f04f 0200 	mov.w	r2, #0
 8008ba2:	601a      	str	r2, [r3, #0]


	    uint32_t ccr1 = (uint32_t) (fabsf(dc1) * (float) (1 + htim2.Init.Period));
 8008ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8008c24 <feedbackcontroll+0x9a4>)
 8008ba6:	edd3 7a00 	vldr	s15, [r3]
 8008baa:	eeb0 7ae7 	vabs.f32	s14, s15
 8008bae:	4b29      	ldr	r3, [pc, #164]	@ (8008c54 <feedbackcontroll+0x9d4>)
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	ee07 3a90 	vmov	s15, r3
 8008bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bc4:	ee17 3a90 	vmov	r3, s15
 8008bc8:	627b      	str	r3, [r7, #36]	@ 0x24
	    uint32_t ccr2 = (uint32_t) (fabsf(dc2) * (float) (1 + htim3.Init.Period));
 8008bca:	4b17      	ldr	r3, [pc, #92]	@ (8008c28 <feedbackcontroll+0x9a8>)
 8008bcc:	edd3 7a00 	vldr	s15, [r3]
 8008bd0:	eeb0 7ae7 	vabs.f32	s14, s15
 8008bd4:	4b20      	ldr	r3, [pc, #128]	@ (8008c58 <feedbackcontroll+0x9d8>)
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	ee07 3a90 	vmov	s15, r3
 8008bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bea:	ee17 3a90 	vmov	r3, s15
 8008bee:	623b      	str	r3, [r7, #32]


	    if (dc1 > 0.0f) {
 8008bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8008c24 <feedbackcontroll+0x9a4>)
 8008bf2:	edd3 7a00 	vldr	s15, [r3]
 8008bf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bfe:	dd32      	ble.n	8008c66 <feedbackcontroll+0x9e6>
	        __HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_1, ccr1);
 8008c00:	4b14      	ldr	r3, [pc, #80]	@ (8008c54 <feedbackcontroll+0x9d4>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c06:	635a      	str	r2, [r3, #52]	@ 0x34
 8008c08:	e028      	b.n	8008c5c <feedbackcontroll+0x9dc>
 8008c0a:	bf00      	nop
 8008c0c:	20000018 	.word	0x20000018
 8008c10:	20000c08 	.word	0x20000c08
 8008c14:	20000010 	.word	0x20000010
 8008c18:	20000c14 	.word	0x20000c14
 8008c1c:	2000001c 	.word	0x2000001c
 8008c20:	20000020 	.word	0x20000020
 8008c24:	20000c0c 	.word	0x20000c0c
 8008c28:	20000c10 	.word	0x20000c10
 8008c2c:	42c80000 	.word	0x42c80000
 8008c30:	08009e54 	.word	0x08009e54
 8008c34:	08009e5c 	.word	0x08009e5c
 8008c38:	bf800000 	.word	0xbf800000
 8008c3c:	3ca3d70a 	.word	0x3ca3d70a
 8008c40:	3e4ccccd 	.word	0x3e4ccccd
 8008c44:	3e4ccccd 	.word	0x3e4ccccd
 8008c48:	bca3d70a 	.word	0xbca3d70a
 8008c4c:	be4ccccd 	.word	0xbe4ccccd
 8008c50:	be4ccccd 	.word	0xbe4ccccd
 8008c54:	200000f0 	.word	0x200000f0
 8008c58:	20000138 	.word	0x20000138
	        __HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_2, 0);
 8008c5c:	4b26      	ldr	r3, [pc, #152]	@ (8008cf8 <feedbackcontroll+0xa78>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2200      	movs	r2, #0
 8008c62:	639a      	str	r2, [r3, #56]	@ 0x38
 8008c64:	e018      	b.n	8008c98 <feedbackcontroll+0xa18>
	    }
	    else if (dc1==0.0f) {
 8008c66:	4b25      	ldr	r3, [pc, #148]	@ (8008cfc <feedbackcontroll+0xa7c>)
 8008c68:	edd3 7a00 	vldr	s15, [r3]
 8008c6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c74:	d108      	bne.n	8008c88 <feedbackcontroll+0xa08>
	        __HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_1, 0);
 8008c76:	4b20      	ldr	r3, [pc, #128]	@ (8008cf8 <feedbackcontroll+0xa78>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	635a      	str	r2, [r3, #52]	@ 0x34
	        __HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_2, 0);
 8008c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8008cf8 <feedbackcontroll+0xa78>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2200      	movs	r2, #0
 8008c84:	639a      	str	r2, [r3, #56]	@ 0x38
 8008c86:	e007      	b.n	8008c98 <feedbackcontroll+0xa18>
	    }
	    else {
	        __HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_1, 0);
 8008c88:	4b1b      	ldr	r3, [pc, #108]	@ (8008cf8 <feedbackcontroll+0xa78>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	635a      	str	r2, [r3, #52]	@ 0x34
	        __HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_2, ccr1);
 8008c90:	4b19      	ldr	r3, [pc, #100]	@ (8008cf8 <feedbackcontroll+0xa78>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c96:	639a      	str	r2, [r3, #56]	@ 0x38
	    }

	    if (dc2 > 0.0f) {
 8008c98:	4b19      	ldr	r3, [pc, #100]	@ (8008d00 <feedbackcontroll+0xa80>)
 8008c9a:	edd3 7a00 	vldr	s15, [r3]
 8008c9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ca6:	dd08      	ble.n	8008cba <feedbackcontroll+0xa3a>
	        __HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_1, ccr2);
 8008ca8:	4b16      	ldr	r3, [pc, #88]	@ (8008d04 <feedbackcontroll+0xa84>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6a3a      	ldr	r2, [r7, #32]
 8008cae:	635a      	str	r2, [r3, #52]	@ 0x34
	        __HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_2, 0);
 8008cb0:	4b14      	ldr	r3, [pc, #80]	@ (8008d04 <feedbackcontroll+0xa84>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	639a      	str	r2, [r3, #56]	@ 0x38
 8008cb8:	e01a      	b.n	8008cf0 <feedbackcontroll+0xa70>
	    }
	    else if (dc2 == 0.0f) {
 8008cba:	4b11      	ldr	r3, [pc, #68]	@ (8008d00 <feedbackcontroll+0xa80>)
 8008cbc:	edd3 7a00 	vldr	s15, [r3]
 8008cc0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cc8:	d108      	bne.n	8008cdc <feedbackcontroll+0xa5c>
	        __HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_1, 0);
 8008cca:	4b0e      	ldr	r3, [pc, #56]	@ (8008d04 <feedbackcontroll+0xa84>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	635a      	str	r2, [r3, #52]	@ 0x34
	        __HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_2, 0);
 8008cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8008d04 <feedbackcontroll+0xa84>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	639a      	str	r2, [r3, #56]	@ 0x38
 8008cda:	e009      	b.n	8008cf0 <feedbackcontroll+0xa70>
	    }
	    else {
	        __HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_1, 0);
 8008cdc:	4b09      	ldr	r3, [pc, #36]	@ (8008d04 <feedbackcontroll+0xa84>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	635a      	str	r2, [r3, #52]	@ 0x34
	        __HAL_TIM_SET_COMPARE (&htim3, TIM_CHANNEL_2, ccr2);
 8008ce4:	4b07      	ldr	r3, [pc, #28]	@ (8008d04 <feedbackcontroll+0xa84>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6a3a      	ldr	r2, [r7, #32]
 8008cea:	639a      	str	r2, [r3, #56]	@ 0x38
 8008cec:	e000      	b.n	8008cf0 <feedbackcontroll+0xa70>
			return;
 8008cee:	bf00      	nop
	    }

}
 8008cf0:	3790      	adds	r7, #144	@ 0x90
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	200000f0 	.word	0x200000f0
 8008cfc:	20000c0c 	.word	0x20000c0c
 8008d00:	20000c10 	.word	0x20000c10
 8008d04:	20000138 	.word	0x20000138

08008d08 <std>:
 8008d08:	2300      	movs	r3, #0
 8008d0a:	b510      	push	{r4, lr}
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8008d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d16:	6083      	str	r3, [r0, #8]
 8008d18:	8181      	strh	r1, [r0, #12]
 8008d1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008d1c:	81c2      	strh	r2, [r0, #14]
 8008d1e:	6183      	str	r3, [r0, #24]
 8008d20:	4619      	mov	r1, r3
 8008d22:	2208      	movs	r2, #8
 8008d24:	305c      	adds	r0, #92	@ 0x5c
 8008d26:	f000 f9f9 	bl	800911c <memset>
 8008d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d60 <std+0x58>)
 8008d2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8008d64 <std+0x5c>)
 8008d30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008d32:	4b0d      	ldr	r3, [pc, #52]	@ (8008d68 <std+0x60>)
 8008d34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008d36:	4b0d      	ldr	r3, [pc, #52]	@ (8008d6c <std+0x64>)
 8008d38:	6323      	str	r3, [r4, #48]	@ 0x30
 8008d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d70 <std+0x68>)
 8008d3c:	6224      	str	r4, [r4, #32]
 8008d3e:	429c      	cmp	r4, r3
 8008d40:	d006      	beq.n	8008d50 <std+0x48>
 8008d42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008d46:	4294      	cmp	r4, r2
 8008d48:	d002      	beq.n	8008d50 <std+0x48>
 8008d4a:	33d0      	adds	r3, #208	@ 0xd0
 8008d4c:	429c      	cmp	r4, r3
 8008d4e:	d105      	bne.n	8008d5c <std+0x54>
 8008d50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d58:	f000 ba58 	b.w	800920c <__retarget_lock_init_recursive>
 8008d5c:	bd10      	pop	{r4, pc}
 8008d5e:	bf00      	nop
 8008d60:	08008f6d 	.word	0x08008f6d
 8008d64:	08008f8f 	.word	0x08008f8f
 8008d68:	08008fc7 	.word	0x08008fc7
 8008d6c:	08008feb 	.word	0x08008feb
 8008d70:	20000c18 	.word	0x20000c18

08008d74 <stdio_exit_handler>:
 8008d74:	4a02      	ldr	r2, [pc, #8]	@ (8008d80 <stdio_exit_handler+0xc>)
 8008d76:	4903      	ldr	r1, [pc, #12]	@ (8008d84 <stdio_exit_handler+0x10>)
 8008d78:	4803      	ldr	r0, [pc, #12]	@ (8008d88 <stdio_exit_handler+0x14>)
 8008d7a:	f000 b869 	b.w	8008e50 <_fwalk_sglue>
 8008d7e:	bf00      	nop
 8008d80:	20000024 	.word	0x20000024
 8008d84:	08009ac5 	.word	0x08009ac5
 8008d88:	20000034 	.word	0x20000034

08008d8c <cleanup_stdio>:
 8008d8c:	6841      	ldr	r1, [r0, #4]
 8008d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008dc0 <cleanup_stdio+0x34>)
 8008d90:	4299      	cmp	r1, r3
 8008d92:	b510      	push	{r4, lr}
 8008d94:	4604      	mov	r4, r0
 8008d96:	d001      	beq.n	8008d9c <cleanup_stdio+0x10>
 8008d98:	f000 fe94 	bl	8009ac4 <_fflush_r>
 8008d9c:	68a1      	ldr	r1, [r4, #8]
 8008d9e:	4b09      	ldr	r3, [pc, #36]	@ (8008dc4 <cleanup_stdio+0x38>)
 8008da0:	4299      	cmp	r1, r3
 8008da2:	d002      	beq.n	8008daa <cleanup_stdio+0x1e>
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 fe8d 	bl	8009ac4 <_fflush_r>
 8008daa:	68e1      	ldr	r1, [r4, #12]
 8008dac:	4b06      	ldr	r3, [pc, #24]	@ (8008dc8 <cleanup_stdio+0x3c>)
 8008dae:	4299      	cmp	r1, r3
 8008db0:	d004      	beq.n	8008dbc <cleanup_stdio+0x30>
 8008db2:	4620      	mov	r0, r4
 8008db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008db8:	f000 be84 	b.w	8009ac4 <_fflush_r>
 8008dbc:	bd10      	pop	{r4, pc}
 8008dbe:	bf00      	nop
 8008dc0:	20000c18 	.word	0x20000c18
 8008dc4:	20000c80 	.word	0x20000c80
 8008dc8:	20000ce8 	.word	0x20000ce8

08008dcc <global_stdio_init.part.0>:
 8008dcc:	b510      	push	{r4, lr}
 8008dce:	4b0b      	ldr	r3, [pc, #44]	@ (8008dfc <global_stdio_init.part.0+0x30>)
 8008dd0:	4c0b      	ldr	r4, [pc, #44]	@ (8008e00 <global_stdio_init.part.0+0x34>)
 8008dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8008e04 <global_stdio_init.part.0+0x38>)
 8008dd4:	601a      	str	r2, [r3, #0]
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	2200      	movs	r2, #0
 8008dda:	2104      	movs	r1, #4
 8008ddc:	f7ff ff94 	bl	8008d08 <std>
 8008de0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008de4:	2201      	movs	r2, #1
 8008de6:	2109      	movs	r1, #9
 8008de8:	f7ff ff8e 	bl	8008d08 <std>
 8008dec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008df0:	2202      	movs	r2, #2
 8008df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008df6:	2112      	movs	r1, #18
 8008df8:	f7ff bf86 	b.w	8008d08 <std>
 8008dfc:	20000d50 	.word	0x20000d50
 8008e00:	20000c18 	.word	0x20000c18
 8008e04:	08008d75 	.word	0x08008d75

08008e08 <__sfp_lock_acquire>:
 8008e08:	4801      	ldr	r0, [pc, #4]	@ (8008e10 <__sfp_lock_acquire+0x8>)
 8008e0a:	f000 ba00 	b.w	800920e <__retarget_lock_acquire_recursive>
 8008e0e:	bf00      	nop
 8008e10:	20000d59 	.word	0x20000d59

08008e14 <__sfp_lock_release>:
 8008e14:	4801      	ldr	r0, [pc, #4]	@ (8008e1c <__sfp_lock_release+0x8>)
 8008e16:	f000 b9fb 	b.w	8009210 <__retarget_lock_release_recursive>
 8008e1a:	bf00      	nop
 8008e1c:	20000d59 	.word	0x20000d59

08008e20 <__sinit>:
 8008e20:	b510      	push	{r4, lr}
 8008e22:	4604      	mov	r4, r0
 8008e24:	f7ff fff0 	bl	8008e08 <__sfp_lock_acquire>
 8008e28:	6a23      	ldr	r3, [r4, #32]
 8008e2a:	b11b      	cbz	r3, 8008e34 <__sinit+0x14>
 8008e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e30:	f7ff bff0 	b.w	8008e14 <__sfp_lock_release>
 8008e34:	4b04      	ldr	r3, [pc, #16]	@ (8008e48 <__sinit+0x28>)
 8008e36:	6223      	str	r3, [r4, #32]
 8008e38:	4b04      	ldr	r3, [pc, #16]	@ (8008e4c <__sinit+0x2c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1f5      	bne.n	8008e2c <__sinit+0xc>
 8008e40:	f7ff ffc4 	bl	8008dcc <global_stdio_init.part.0>
 8008e44:	e7f2      	b.n	8008e2c <__sinit+0xc>
 8008e46:	bf00      	nop
 8008e48:	08008d8d 	.word	0x08008d8d
 8008e4c:	20000d50 	.word	0x20000d50

08008e50 <_fwalk_sglue>:
 8008e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e54:	4607      	mov	r7, r0
 8008e56:	4688      	mov	r8, r1
 8008e58:	4614      	mov	r4, r2
 8008e5a:	2600      	movs	r6, #0
 8008e5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e60:	f1b9 0901 	subs.w	r9, r9, #1
 8008e64:	d505      	bpl.n	8008e72 <_fwalk_sglue+0x22>
 8008e66:	6824      	ldr	r4, [r4, #0]
 8008e68:	2c00      	cmp	r4, #0
 8008e6a:	d1f7      	bne.n	8008e5c <_fwalk_sglue+0xc>
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e72:	89ab      	ldrh	r3, [r5, #12]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d907      	bls.n	8008e88 <_fwalk_sglue+0x38>
 8008e78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	d003      	beq.n	8008e88 <_fwalk_sglue+0x38>
 8008e80:	4629      	mov	r1, r5
 8008e82:	4638      	mov	r0, r7
 8008e84:	47c0      	blx	r8
 8008e86:	4306      	orrs	r6, r0
 8008e88:	3568      	adds	r5, #104	@ 0x68
 8008e8a:	e7e9      	b.n	8008e60 <_fwalk_sglue+0x10>

08008e8c <iprintf>:
 8008e8c:	b40f      	push	{r0, r1, r2, r3}
 8008e8e:	b507      	push	{r0, r1, r2, lr}
 8008e90:	4906      	ldr	r1, [pc, #24]	@ (8008eac <iprintf+0x20>)
 8008e92:	ab04      	add	r3, sp, #16
 8008e94:	6808      	ldr	r0, [r1, #0]
 8008e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e9a:	6881      	ldr	r1, [r0, #8]
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	f000 fae9 	bl	8009474 <_vfiprintf_r>
 8008ea2:	b003      	add	sp, #12
 8008ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ea8:	b004      	add	sp, #16
 8008eaa:	4770      	bx	lr
 8008eac:	20000030 	.word	0x20000030

08008eb0 <_puts_r>:
 8008eb0:	6a03      	ldr	r3, [r0, #32]
 8008eb2:	b570      	push	{r4, r5, r6, lr}
 8008eb4:	6884      	ldr	r4, [r0, #8]
 8008eb6:	4605      	mov	r5, r0
 8008eb8:	460e      	mov	r6, r1
 8008eba:	b90b      	cbnz	r3, 8008ec0 <_puts_r+0x10>
 8008ebc:	f7ff ffb0 	bl	8008e20 <__sinit>
 8008ec0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ec2:	07db      	lsls	r3, r3, #31
 8008ec4:	d405      	bmi.n	8008ed2 <_puts_r+0x22>
 8008ec6:	89a3      	ldrh	r3, [r4, #12]
 8008ec8:	0598      	lsls	r0, r3, #22
 8008eca:	d402      	bmi.n	8008ed2 <_puts_r+0x22>
 8008ecc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ece:	f000 f99e 	bl	800920e <__retarget_lock_acquire_recursive>
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	0719      	lsls	r1, r3, #28
 8008ed6:	d502      	bpl.n	8008ede <_puts_r+0x2e>
 8008ed8:	6923      	ldr	r3, [r4, #16]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d135      	bne.n	8008f4a <_puts_r+0x9a>
 8008ede:	4621      	mov	r1, r4
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f000 f8c5 	bl	8009070 <__swsetup_r>
 8008ee6:	b380      	cbz	r0, 8008f4a <_puts_r+0x9a>
 8008ee8:	f04f 35ff 	mov.w	r5, #4294967295
 8008eec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008eee:	07da      	lsls	r2, r3, #31
 8008ef0:	d405      	bmi.n	8008efe <_puts_r+0x4e>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	059b      	lsls	r3, r3, #22
 8008ef6:	d402      	bmi.n	8008efe <_puts_r+0x4e>
 8008ef8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008efa:	f000 f989 	bl	8009210 <__retarget_lock_release_recursive>
 8008efe:	4628      	mov	r0, r5
 8008f00:	bd70      	pop	{r4, r5, r6, pc}
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	da04      	bge.n	8008f10 <_puts_r+0x60>
 8008f06:	69a2      	ldr	r2, [r4, #24]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	dc17      	bgt.n	8008f3c <_puts_r+0x8c>
 8008f0c:	290a      	cmp	r1, #10
 8008f0e:	d015      	beq.n	8008f3c <_puts_r+0x8c>
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	6022      	str	r2, [r4, #0]
 8008f16:	7019      	strb	r1, [r3, #0]
 8008f18:	68a3      	ldr	r3, [r4, #8]
 8008f1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	60a3      	str	r3, [r4, #8]
 8008f22:	2900      	cmp	r1, #0
 8008f24:	d1ed      	bne.n	8008f02 <_puts_r+0x52>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	da11      	bge.n	8008f4e <_puts_r+0x9e>
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	210a      	movs	r1, #10
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f000 f85f 	bl	8008ff2 <__swbuf_r>
 8008f34:	3001      	adds	r0, #1
 8008f36:	d0d7      	beq.n	8008ee8 <_puts_r+0x38>
 8008f38:	250a      	movs	r5, #10
 8008f3a:	e7d7      	b.n	8008eec <_puts_r+0x3c>
 8008f3c:	4622      	mov	r2, r4
 8008f3e:	4628      	mov	r0, r5
 8008f40:	f000 f857 	bl	8008ff2 <__swbuf_r>
 8008f44:	3001      	adds	r0, #1
 8008f46:	d1e7      	bne.n	8008f18 <_puts_r+0x68>
 8008f48:	e7ce      	b.n	8008ee8 <_puts_r+0x38>
 8008f4a:	3e01      	subs	r6, #1
 8008f4c:	e7e4      	b.n	8008f18 <_puts_r+0x68>
 8008f4e:	6823      	ldr	r3, [r4, #0]
 8008f50:	1c5a      	adds	r2, r3, #1
 8008f52:	6022      	str	r2, [r4, #0]
 8008f54:	220a      	movs	r2, #10
 8008f56:	701a      	strb	r2, [r3, #0]
 8008f58:	e7ee      	b.n	8008f38 <_puts_r+0x88>
	...

08008f5c <puts>:
 8008f5c:	4b02      	ldr	r3, [pc, #8]	@ (8008f68 <puts+0xc>)
 8008f5e:	4601      	mov	r1, r0
 8008f60:	6818      	ldr	r0, [r3, #0]
 8008f62:	f7ff bfa5 	b.w	8008eb0 <_puts_r>
 8008f66:	bf00      	nop
 8008f68:	20000030 	.word	0x20000030

08008f6c <__sread>:
 8008f6c:	b510      	push	{r4, lr}
 8008f6e:	460c      	mov	r4, r1
 8008f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f74:	f000 f8fc 	bl	8009170 <_read_r>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	bfab      	itete	ge
 8008f7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8008f80:	181b      	addge	r3, r3, r0
 8008f82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f86:	bfac      	ite	ge
 8008f88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f8a:	81a3      	strhlt	r3, [r4, #12]
 8008f8c:	bd10      	pop	{r4, pc}

08008f8e <__swrite>:
 8008f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f92:	461f      	mov	r7, r3
 8008f94:	898b      	ldrh	r3, [r1, #12]
 8008f96:	05db      	lsls	r3, r3, #23
 8008f98:	4605      	mov	r5, r0
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	4616      	mov	r6, r2
 8008f9e:	d505      	bpl.n	8008fac <__swrite+0x1e>
 8008fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f000 f8d0 	bl	800914c <_lseek_r>
 8008fac:	89a3      	ldrh	r3, [r4, #12]
 8008fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008fb6:	81a3      	strh	r3, [r4, #12]
 8008fb8:	4632      	mov	r2, r6
 8008fba:	463b      	mov	r3, r7
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc2:	f000 b8e7 	b.w	8009194 <_write_r>

08008fc6 <__sseek>:
 8008fc6:	b510      	push	{r4, lr}
 8008fc8:	460c      	mov	r4, r1
 8008fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fce:	f000 f8bd 	bl	800914c <_lseek_r>
 8008fd2:	1c43      	adds	r3, r0, #1
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	bf15      	itete	ne
 8008fd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008fda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008fde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008fe2:	81a3      	strheq	r3, [r4, #12]
 8008fe4:	bf18      	it	ne
 8008fe6:	81a3      	strhne	r3, [r4, #12]
 8008fe8:	bd10      	pop	{r4, pc}

08008fea <__sclose>:
 8008fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fee:	f000 b89d 	b.w	800912c <_close_r>

08008ff2 <__swbuf_r>:
 8008ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff4:	460e      	mov	r6, r1
 8008ff6:	4614      	mov	r4, r2
 8008ff8:	4605      	mov	r5, r0
 8008ffa:	b118      	cbz	r0, 8009004 <__swbuf_r+0x12>
 8008ffc:	6a03      	ldr	r3, [r0, #32]
 8008ffe:	b90b      	cbnz	r3, 8009004 <__swbuf_r+0x12>
 8009000:	f7ff ff0e 	bl	8008e20 <__sinit>
 8009004:	69a3      	ldr	r3, [r4, #24]
 8009006:	60a3      	str	r3, [r4, #8]
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	071a      	lsls	r2, r3, #28
 800900c:	d501      	bpl.n	8009012 <__swbuf_r+0x20>
 800900e:	6923      	ldr	r3, [r4, #16]
 8009010:	b943      	cbnz	r3, 8009024 <__swbuf_r+0x32>
 8009012:	4621      	mov	r1, r4
 8009014:	4628      	mov	r0, r5
 8009016:	f000 f82b 	bl	8009070 <__swsetup_r>
 800901a:	b118      	cbz	r0, 8009024 <__swbuf_r+0x32>
 800901c:	f04f 37ff 	mov.w	r7, #4294967295
 8009020:	4638      	mov	r0, r7
 8009022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	6922      	ldr	r2, [r4, #16]
 8009028:	1a98      	subs	r0, r3, r2
 800902a:	6963      	ldr	r3, [r4, #20]
 800902c:	b2f6      	uxtb	r6, r6
 800902e:	4283      	cmp	r3, r0
 8009030:	4637      	mov	r7, r6
 8009032:	dc05      	bgt.n	8009040 <__swbuf_r+0x4e>
 8009034:	4621      	mov	r1, r4
 8009036:	4628      	mov	r0, r5
 8009038:	f000 fd44 	bl	8009ac4 <_fflush_r>
 800903c:	2800      	cmp	r0, #0
 800903e:	d1ed      	bne.n	800901c <__swbuf_r+0x2a>
 8009040:	68a3      	ldr	r3, [r4, #8]
 8009042:	3b01      	subs	r3, #1
 8009044:	60a3      	str	r3, [r4, #8]
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	1c5a      	adds	r2, r3, #1
 800904a:	6022      	str	r2, [r4, #0]
 800904c:	701e      	strb	r6, [r3, #0]
 800904e:	6962      	ldr	r2, [r4, #20]
 8009050:	1c43      	adds	r3, r0, #1
 8009052:	429a      	cmp	r2, r3
 8009054:	d004      	beq.n	8009060 <__swbuf_r+0x6e>
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	07db      	lsls	r3, r3, #31
 800905a:	d5e1      	bpl.n	8009020 <__swbuf_r+0x2e>
 800905c:	2e0a      	cmp	r6, #10
 800905e:	d1df      	bne.n	8009020 <__swbuf_r+0x2e>
 8009060:	4621      	mov	r1, r4
 8009062:	4628      	mov	r0, r5
 8009064:	f000 fd2e 	bl	8009ac4 <_fflush_r>
 8009068:	2800      	cmp	r0, #0
 800906a:	d0d9      	beq.n	8009020 <__swbuf_r+0x2e>
 800906c:	e7d6      	b.n	800901c <__swbuf_r+0x2a>
	...

08009070 <__swsetup_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	4b29      	ldr	r3, [pc, #164]	@ (8009118 <__swsetup_r+0xa8>)
 8009074:	4605      	mov	r5, r0
 8009076:	6818      	ldr	r0, [r3, #0]
 8009078:	460c      	mov	r4, r1
 800907a:	b118      	cbz	r0, 8009084 <__swsetup_r+0x14>
 800907c:	6a03      	ldr	r3, [r0, #32]
 800907e:	b90b      	cbnz	r3, 8009084 <__swsetup_r+0x14>
 8009080:	f7ff fece 	bl	8008e20 <__sinit>
 8009084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009088:	0719      	lsls	r1, r3, #28
 800908a:	d422      	bmi.n	80090d2 <__swsetup_r+0x62>
 800908c:	06da      	lsls	r2, r3, #27
 800908e:	d407      	bmi.n	80090a0 <__swsetup_r+0x30>
 8009090:	2209      	movs	r2, #9
 8009092:	602a      	str	r2, [r5, #0]
 8009094:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009098:	81a3      	strh	r3, [r4, #12]
 800909a:	f04f 30ff 	mov.w	r0, #4294967295
 800909e:	e033      	b.n	8009108 <__swsetup_r+0x98>
 80090a0:	0758      	lsls	r0, r3, #29
 80090a2:	d512      	bpl.n	80090ca <__swsetup_r+0x5a>
 80090a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090a6:	b141      	cbz	r1, 80090ba <__swsetup_r+0x4a>
 80090a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090ac:	4299      	cmp	r1, r3
 80090ae:	d002      	beq.n	80090b6 <__swsetup_r+0x46>
 80090b0:	4628      	mov	r0, r5
 80090b2:	f000 f8bd 	bl	8009230 <_free_r>
 80090b6:	2300      	movs	r3, #0
 80090b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80090c0:	81a3      	strh	r3, [r4, #12]
 80090c2:	2300      	movs	r3, #0
 80090c4:	6063      	str	r3, [r4, #4]
 80090c6:	6923      	ldr	r3, [r4, #16]
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	89a3      	ldrh	r3, [r4, #12]
 80090cc:	f043 0308 	orr.w	r3, r3, #8
 80090d0:	81a3      	strh	r3, [r4, #12]
 80090d2:	6923      	ldr	r3, [r4, #16]
 80090d4:	b94b      	cbnz	r3, 80090ea <__swsetup_r+0x7a>
 80090d6:	89a3      	ldrh	r3, [r4, #12]
 80090d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80090dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090e0:	d003      	beq.n	80090ea <__swsetup_r+0x7a>
 80090e2:	4621      	mov	r1, r4
 80090e4:	4628      	mov	r0, r5
 80090e6:	f000 fd3b 	bl	8009b60 <__smakebuf_r>
 80090ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ee:	f013 0201 	ands.w	r2, r3, #1
 80090f2:	d00a      	beq.n	800910a <__swsetup_r+0x9a>
 80090f4:	2200      	movs	r2, #0
 80090f6:	60a2      	str	r2, [r4, #8]
 80090f8:	6962      	ldr	r2, [r4, #20]
 80090fa:	4252      	negs	r2, r2
 80090fc:	61a2      	str	r2, [r4, #24]
 80090fe:	6922      	ldr	r2, [r4, #16]
 8009100:	b942      	cbnz	r2, 8009114 <__swsetup_r+0xa4>
 8009102:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009106:	d1c5      	bne.n	8009094 <__swsetup_r+0x24>
 8009108:	bd38      	pop	{r3, r4, r5, pc}
 800910a:	0799      	lsls	r1, r3, #30
 800910c:	bf58      	it	pl
 800910e:	6962      	ldrpl	r2, [r4, #20]
 8009110:	60a2      	str	r2, [r4, #8]
 8009112:	e7f4      	b.n	80090fe <__swsetup_r+0x8e>
 8009114:	2000      	movs	r0, #0
 8009116:	e7f7      	b.n	8009108 <__swsetup_r+0x98>
 8009118:	20000030 	.word	0x20000030

0800911c <memset>:
 800911c:	4402      	add	r2, r0
 800911e:	4603      	mov	r3, r0
 8009120:	4293      	cmp	r3, r2
 8009122:	d100      	bne.n	8009126 <memset+0xa>
 8009124:	4770      	bx	lr
 8009126:	f803 1b01 	strb.w	r1, [r3], #1
 800912a:	e7f9      	b.n	8009120 <memset+0x4>

0800912c <_close_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4d06      	ldr	r5, [pc, #24]	@ (8009148 <_close_r+0x1c>)
 8009130:	2300      	movs	r3, #0
 8009132:	4604      	mov	r4, r0
 8009134:	4608      	mov	r0, r1
 8009136:	602b      	str	r3, [r5, #0]
 8009138:	f7f7 ff6a 	bl	8001010 <_close>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d102      	bne.n	8009146 <_close_r+0x1a>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	b103      	cbz	r3, 8009146 <_close_r+0x1a>
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	bd38      	pop	{r3, r4, r5, pc}
 8009148:	20000d54 	.word	0x20000d54

0800914c <_lseek_r>:
 800914c:	b538      	push	{r3, r4, r5, lr}
 800914e:	4d07      	ldr	r5, [pc, #28]	@ (800916c <_lseek_r+0x20>)
 8009150:	4604      	mov	r4, r0
 8009152:	4608      	mov	r0, r1
 8009154:	4611      	mov	r1, r2
 8009156:	2200      	movs	r2, #0
 8009158:	602a      	str	r2, [r5, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	f7f7 ff7f 	bl	800105e <_lseek>
 8009160:	1c43      	adds	r3, r0, #1
 8009162:	d102      	bne.n	800916a <_lseek_r+0x1e>
 8009164:	682b      	ldr	r3, [r5, #0]
 8009166:	b103      	cbz	r3, 800916a <_lseek_r+0x1e>
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	bd38      	pop	{r3, r4, r5, pc}
 800916c:	20000d54 	.word	0x20000d54

08009170 <_read_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	4d07      	ldr	r5, [pc, #28]	@ (8009190 <_read_r+0x20>)
 8009174:	4604      	mov	r4, r0
 8009176:	4608      	mov	r0, r1
 8009178:	4611      	mov	r1, r2
 800917a:	2200      	movs	r2, #0
 800917c:	602a      	str	r2, [r5, #0]
 800917e:	461a      	mov	r2, r3
 8009180:	f7f7 ff0d 	bl	8000f9e <_read>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	d102      	bne.n	800918e <_read_r+0x1e>
 8009188:	682b      	ldr	r3, [r5, #0]
 800918a:	b103      	cbz	r3, 800918e <_read_r+0x1e>
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	bd38      	pop	{r3, r4, r5, pc}
 8009190:	20000d54 	.word	0x20000d54

08009194 <_write_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	4d07      	ldr	r5, [pc, #28]	@ (80091b4 <_write_r+0x20>)
 8009198:	4604      	mov	r4, r0
 800919a:	4608      	mov	r0, r1
 800919c:	4611      	mov	r1, r2
 800919e:	2200      	movs	r2, #0
 80091a0:	602a      	str	r2, [r5, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	f7f7 ff18 	bl	8000fd8 <_write>
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	d102      	bne.n	80091b2 <_write_r+0x1e>
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	b103      	cbz	r3, 80091b2 <_write_r+0x1e>
 80091b0:	6023      	str	r3, [r4, #0]
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	20000d54 	.word	0x20000d54

080091b8 <__errno>:
 80091b8:	4b01      	ldr	r3, [pc, #4]	@ (80091c0 <__errno+0x8>)
 80091ba:	6818      	ldr	r0, [r3, #0]
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	20000030 	.word	0x20000030

080091c4 <__libc_init_array>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	4d0d      	ldr	r5, [pc, #52]	@ (80091fc <__libc_init_array+0x38>)
 80091c8:	4c0d      	ldr	r4, [pc, #52]	@ (8009200 <__libc_init_array+0x3c>)
 80091ca:	1b64      	subs	r4, r4, r5
 80091cc:	10a4      	asrs	r4, r4, #2
 80091ce:	2600      	movs	r6, #0
 80091d0:	42a6      	cmp	r6, r4
 80091d2:	d109      	bne.n	80091e8 <__libc_init_array+0x24>
 80091d4:	4d0b      	ldr	r5, [pc, #44]	@ (8009204 <__libc_init_array+0x40>)
 80091d6:	4c0c      	ldr	r4, [pc, #48]	@ (8009208 <__libc_init_array+0x44>)
 80091d8:	f000 fd30 	bl	8009c3c <_init>
 80091dc:	1b64      	subs	r4, r4, r5
 80091de:	10a4      	asrs	r4, r4, #2
 80091e0:	2600      	movs	r6, #0
 80091e2:	42a6      	cmp	r6, r4
 80091e4:	d105      	bne.n	80091f2 <__libc_init_array+0x2e>
 80091e6:	bd70      	pop	{r4, r5, r6, pc}
 80091e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ec:	4798      	blx	r3
 80091ee:	3601      	adds	r6, #1
 80091f0:	e7ee      	b.n	80091d0 <__libc_init_array+0xc>
 80091f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f6:	4798      	blx	r3
 80091f8:	3601      	adds	r6, #1
 80091fa:	e7f2      	b.n	80091e2 <__libc_init_array+0x1e>
 80091fc:	0801f5b4 	.word	0x0801f5b4
 8009200:	0801f5b4 	.word	0x0801f5b4
 8009204:	0801f5b4 	.word	0x0801f5b4
 8009208:	0801f5b8 	.word	0x0801f5b8

0800920c <__retarget_lock_init_recursive>:
 800920c:	4770      	bx	lr

0800920e <__retarget_lock_acquire_recursive>:
 800920e:	4770      	bx	lr

08009210 <__retarget_lock_release_recursive>:
 8009210:	4770      	bx	lr

08009212 <memcpy>:
 8009212:	440a      	add	r2, r1
 8009214:	4291      	cmp	r1, r2
 8009216:	f100 33ff 	add.w	r3, r0, #4294967295
 800921a:	d100      	bne.n	800921e <memcpy+0xc>
 800921c:	4770      	bx	lr
 800921e:	b510      	push	{r4, lr}
 8009220:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009224:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009228:	4291      	cmp	r1, r2
 800922a:	d1f9      	bne.n	8009220 <memcpy+0xe>
 800922c:	bd10      	pop	{r4, pc}
	...

08009230 <_free_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	4605      	mov	r5, r0
 8009234:	2900      	cmp	r1, #0
 8009236:	d041      	beq.n	80092bc <_free_r+0x8c>
 8009238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800923c:	1f0c      	subs	r4, r1, #4
 800923e:	2b00      	cmp	r3, #0
 8009240:	bfb8      	it	lt
 8009242:	18e4      	addlt	r4, r4, r3
 8009244:	f000 f8e0 	bl	8009408 <__malloc_lock>
 8009248:	4a1d      	ldr	r2, [pc, #116]	@ (80092c0 <_free_r+0x90>)
 800924a:	6813      	ldr	r3, [r2, #0]
 800924c:	b933      	cbnz	r3, 800925c <_free_r+0x2c>
 800924e:	6063      	str	r3, [r4, #4]
 8009250:	6014      	str	r4, [r2, #0]
 8009252:	4628      	mov	r0, r5
 8009254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009258:	f000 b8dc 	b.w	8009414 <__malloc_unlock>
 800925c:	42a3      	cmp	r3, r4
 800925e:	d908      	bls.n	8009272 <_free_r+0x42>
 8009260:	6820      	ldr	r0, [r4, #0]
 8009262:	1821      	adds	r1, r4, r0
 8009264:	428b      	cmp	r3, r1
 8009266:	bf01      	itttt	eq
 8009268:	6819      	ldreq	r1, [r3, #0]
 800926a:	685b      	ldreq	r3, [r3, #4]
 800926c:	1809      	addeq	r1, r1, r0
 800926e:	6021      	streq	r1, [r4, #0]
 8009270:	e7ed      	b.n	800924e <_free_r+0x1e>
 8009272:	461a      	mov	r2, r3
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	b10b      	cbz	r3, 800927c <_free_r+0x4c>
 8009278:	42a3      	cmp	r3, r4
 800927a:	d9fa      	bls.n	8009272 <_free_r+0x42>
 800927c:	6811      	ldr	r1, [r2, #0]
 800927e:	1850      	adds	r0, r2, r1
 8009280:	42a0      	cmp	r0, r4
 8009282:	d10b      	bne.n	800929c <_free_r+0x6c>
 8009284:	6820      	ldr	r0, [r4, #0]
 8009286:	4401      	add	r1, r0
 8009288:	1850      	adds	r0, r2, r1
 800928a:	4283      	cmp	r3, r0
 800928c:	6011      	str	r1, [r2, #0]
 800928e:	d1e0      	bne.n	8009252 <_free_r+0x22>
 8009290:	6818      	ldr	r0, [r3, #0]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	6053      	str	r3, [r2, #4]
 8009296:	4408      	add	r0, r1
 8009298:	6010      	str	r0, [r2, #0]
 800929a:	e7da      	b.n	8009252 <_free_r+0x22>
 800929c:	d902      	bls.n	80092a4 <_free_r+0x74>
 800929e:	230c      	movs	r3, #12
 80092a0:	602b      	str	r3, [r5, #0]
 80092a2:	e7d6      	b.n	8009252 <_free_r+0x22>
 80092a4:	6820      	ldr	r0, [r4, #0]
 80092a6:	1821      	adds	r1, r4, r0
 80092a8:	428b      	cmp	r3, r1
 80092aa:	bf04      	itt	eq
 80092ac:	6819      	ldreq	r1, [r3, #0]
 80092ae:	685b      	ldreq	r3, [r3, #4]
 80092b0:	6063      	str	r3, [r4, #4]
 80092b2:	bf04      	itt	eq
 80092b4:	1809      	addeq	r1, r1, r0
 80092b6:	6021      	streq	r1, [r4, #0]
 80092b8:	6054      	str	r4, [r2, #4]
 80092ba:	e7ca      	b.n	8009252 <_free_r+0x22>
 80092bc:	bd38      	pop	{r3, r4, r5, pc}
 80092be:	bf00      	nop
 80092c0:	20000d60 	.word	0x20000d60

080092c4 <sbrk_aligned>:
 80092c4:	b570      	push	{r4, r5, r6, lr}
 80092c6:	4e0f      	ldr	r6, [pc, #60]	@ (8009304 <sbrk_aligned+0x40>)
 80092c8:	460c      	mov	r4, r1
 80092ca:	6831      	ldr	r1, [r6, #0]
 80092cc:	4605      	mov	r5, r0
 80092ce:	b911      	cbnz	r1, 80092d6 <sbrk_aligned+0x12>
 80092d0:	f000 fca4 	bl	8009c1c <_sbrk_r>
 80092d4:	6030      	str	r0, [r6, #0]
 80092d6:	4621      	mov	r1, r4
 80092d8:	4628      	mov	r0, r5
 80092da:	f000 fc9f 	bl	8009c1c <_sbrk_r>
 80092de:	1c43      	adds	r3, r0, #1
 80092e0:	d103      	bne.n	80092ea <sbrk_aligned+0x26>
 80092e2:	f04f 34ff 	mov.w	r4, #4294967295
 80092e6:	4620      	mov	r0, r4
 80092e8:	bd70      	pop	{r4, r5, r6, pc}
 80092ea:	1cc4      	adds	r4, r0, #3
 80092ec:	f024 0403 	bic.w	r4, r4, #3
 80092f0:	42a0      	cmp	r0, r4
 80092f2:	d0f8      	beq.n	80092e6 <sbrk_aligned+0x22>
 80092f4:	1a21      	subs	r1, r4, r0
 80092f6:	4628      	mov	r0, r5
 80092f8:	f000 fc90 	bl	8009c1c <_sbrk_r>
 80092fc:	3001      	adds	r0, #1
 80092fe:	d1f2      	bne.n	80092e6 <sbrk_aligned+0x22>
 8009300:	e7ef      	b.n	80092e2 <sbrk_aligned+0x1e>
 8009302:	bf00      	nop
 8009304:	20000d5c 	.word	0x20000d5c

08009308 <_malloc_r>:
 8009308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800930c:	1ccd      	adds	r5, r1, #3
 800930e:	f025 0503 	bic.w	r5, r5, #3
 8009312:	3508      	adds	r5, #8
 8009314:	2d0c      	cmp	r5, #12
 8009316:	bf38      	it	cc
 8009318:	250c      	movcc	r5, #12
 800931a:	2d00      	cmp	r5, #0
 800931c:	4606      	mov	r6, r0
 800931e:	db01      	blt.n	8009324 <_malloc_r+0x1c>
 8009320:	42a9      	cmp	r1, r5
 8009322:	d904      	bls.n	800932e <_malloc_r+0x26>
 8009324:	230c      	movs	r3, #12
 8009326:	6033      	str	r3, [r6, #0]
 8009328:	2000      	movs	r0, #0
 800932a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800932e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009404 <_malloc_r+0xfc>
 8009332:	f000 f869 	bl	8009408 <__malloc_lock>
 8009336:	f8d8 3000 	ldr.w	r3, [r8]
 800933a:	461c      	mov	r4, r3
 800933c:	bb44      	cbnz	r4, 8009390 <_malloc_r+0x88>
 800933e:	4629      	mov	r1, r5
 8009340:	4630      	mov	r0, r6
 8009342:	f7ff ffbf 	bl	80092c4 <sbrk_aligned>
 8009346:	1c43      	adds	r3, r0, #1
 8009348:	4604      	mov	r4, r0
 800934a:	d158      	bne.n	80093fe <_malloc_r+0xf6>
 800934c:	f8d8 4000 	ldr.w	r4, [r8]
 8009350:	4627      	mov	r7, r4
 8009352:	2f00      	cmp	r7, #0
 8009354:	d143      	bne.n	80093de <_malloc_r+0xd6>
 8009356:	2c00      	cmp	r4, #0
 8009358:	d04b      	beq.n	80093f2 <_malloc_r+0xea>
 800935a:	6823      	ldr	r3, [r4, #0]
 800935c:	4639      	mov	r1, r7
 800935e:	4630      	mov	r0, r6
 8009360:	eb04 0903 	add.w	r9, r4, r3
 8009364:	f000 fc5a 	bl	8009c1c <_sbrk_r>
 8009368:	4581      	cmp	r9, r0
 800936a:	d142      	bne.n	80093f2 <_malloc_r+0xea>
 800936c:	6821      	ldr	r1, [r4, #0]
 800936e:	1a6d      	subs	r5, r5, r1
 8009370:	4629      	mov	r1, r5
 8009372:	4630      	mov	r0, r6
 8009374:	f7ff ffa6 	bl	80092c4 <sbrk_aligned>
 8009378:	3001      	adds	r0, #1
 800937a:	d03a      	beq.n	80093f2 <_malloc_r+0xea>
 800937c:	6823      	ldr	r3, [r4, #0]
 800937e:	442b      	add	r3, r5
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	f8d8 3000 	ldr.w	r3, [r8]
 8009386:	685a      	ldr	r2, [r3, #4]
 8009388:	bb62      	cbnz	r2, 80093e4 <_malloc_r+0xdc>
 800938a:	f8c8 7000 	str.w	r7, [r8]
 800938e:	e00f      	b.n	80093b0 <_malloc_r+0xa8>
 8009390:	6822      	ldr	r2, [r4, #0]
 8009392:	1b52      	subs	r2, r2, r5
 8009394:	d420      	bmi.n	80093d8 <_malloc_r+0xd0>
 8009396:	2a0b      	cmp	r2, #11
 8009398:	d917      	bls.n	80093ca <_malloc_r+0xc2>
 800939a:	1961      	adds	r1, r4, r5
 800939c:	42a3      	cmp	r3, r4
 800939e:	6025      	str	r5, [r4, #0]
 80093a0:	bf18      	it	ne
 80093a2:	6059      	strne	r1, [r3, #4]
 80093a4:	6863      	ldr	r3, [r4, #4]
 80093a6:	bf08      	it	eq
 80093a8:	f8c8 1000 	streq.w	r1, [r8]
 80093ac:	5162      	str	r2, [r4, r5]
 80093ae:	604b      	str	r3, [r1, #4]
 80093b0:	4630      	mov	r0, r6
 80093b2:	f000 f82f 	bl	8009414 <__malloc_unlock>
 80093b6:	f104 000b 	add.w	r0, r4, #11
 80093ba:	1d23      	adds	r3, r4, #4
 80093bc:	f020 0007 	bic.w	r0, r0, #7
 80093c0:	1ac2      	subs	r2, r0, r3
 80093c2:	bf1c      	itt	ne
 80093c4:	1a1b      	subne	r3, r3, r0
 80093c6:	50a3      	strne	r3, [r4, r2]
 80093c8:	e7af      	b.n	800932a <_malloc_r+0x22>
 80093ca:	6862      	ldr	r2, [r4, #4]
 80093cc:	42a3      	cmp	r3, r4
 80093ce:	bf0c      	ite	eq
 80093d0:	f8c8 2000 	streq.w	r2, [r8]
 80093d4:	605a      	strne	r2, [r3, #4]
 80093d6:	e7eb      	b.n	80093b0 <_malloc_r+0xa8>
 80093d8:	4623      	mov	r3, r4
 80093da:	6864      	ldr	r4, [r4, #4]
 80093dc:	e7ae      	b.n	800933c <_malloc_r+0x34>
 80093de:	463c      	mov	r4, r7
 80093e0:	687f      	ldr	r7, [r7, #4]
 80093e2:	e7b6      	b.n	8009352 <_malloc_r+0x4a>
 80093e4:	461a      	mov	r2, r3
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	42a3      	cmp	r3, r4
 80093ea:	d1fb      	bne.n	80093e4 <_malloc_r+0xdc>
 80093ec:	2300      	movs	r3, #0
 80093ee:	6053      	str	r3, [r2, #4]
 80093f0:	e7de      	b.n	80093b0 <_malloc_r+0xa8>
 80093f2:	230c      	movs	r3, #12
 80093f4:	6033      	str	r3, [r6, #0]
 80093f6:	4630      	mov	r0, r6
 80093f8:	f000 f80c 	bl	8009414 <__malloc_unlock>
 80093fc:	e794      	b.n	8009328 <_malloc_r+0x20>
 80093fe:	6005      	str	r5, [r0, #0]
 8009400:	e7d6      	b.n	80093b0 <_malloc_r+0xa8>
 8009402:	bf00      	nop
 8009404:	20000d60 	.word	0x20000d60

08009408 <__malloc_lock>:
 8009408:	4801      	ldr	r0, [pc, #4]	@ (8009410 <__malloc_lock+0x8>)
 800940a:	f7ff bf00 	b.w	800920e <__retarget_lock_acquire_recursive>
 800940e:	bf00      	nop
 8009410:	20000d58 	.word	0x20000d58

08009414 <__malloc_unlock>:
 8009414:	4801      	ldr	r0, [pc, #4]	@ (800941c <__malloc_unlock+0x8>)
 8009416:	f7ff befb 	b.w	8009210 <__retarget_lock_release_recursive>
 800941a:	bf00      	nop
 800941c:	20000d58 	.word	0x20000d58

08009420 <__sfputc_r>:
 8009420:	6893      	ldr	r3, [r2, #8]
 8009422:	3b01      	subs	r3, #1
 8009424:	2b00      	cmp	r3, #0
 8009426:	b410      	push	{r4}
 8009428:	6093      	str	r3, [r2, #8]
 800942a:	da08      	bge.n	800943e <__sfputc_r+0x1e>
 800942c:	6994      	ldr	r4, [r2, #24]
 800942e:	42a3      	cmp	r3, r4
 8009430:	db01      	blt.n	8009436 <__sfputc_r+0x16>
 8009432:	290a      	cmp	r1, #10
 8009434:	d103      	bne.n	800943e <__sfputc_r+0x1e>
 8009436:	f85d 4b04 	ldr.w	r4, [sp], #4
 800943a:	f7ff bdda 	b.w	8008ff2 <__swbuf_r>
 800943e:	6813      	ldr	r3, [r2, #0]
 8009440:	1c58      	adds	r0, r3, #1
 8009442:	6010      	str	r0, [r2, #0]
 8009444:	7019      	strb	r1, [r3, #0]
 8009446:	4608      	mov	r0, r1
 8009448:	f85d 4b04 	ldr.w	r4, [sp], #4
 800944c:	4770      	bx	lr

0800944e <__sfputs_r>:
 800944e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009450:	4606      	mov	r6, r0
 8009452:	460f      	mov	r7, r1
 8009454:	4614      	mov	r4, r2
 8009456:	18d5      	adds	r5, r2, r3
 8009458:	42ac      	cmp	r4, r5
 800945a:	d101      	bne.n	8009460 <__sfputs_r+0x12>
 800945c:	2000      	movs	r0, #0
 800945e:	e007      	b.n	8009470 <__sfputs_r+0x22>
 8009460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009464:	463a      	mov	r2, r7
 8009466:	4630      	mov	r0, r6
 8009468:	f7ff ffda 	bl	8009420 <__sfputc_r>
 800946c:	1c43      	adds	r3, r0, #1
 800946e:	d1f3      	bne.n	8009458 <__sfputs_r+0xa>
 8009470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009474 <_vfiprintf_r>:
 8009474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009478:	460d      	mov	r5, r1
 800947a:	b09d      	sub	sp, #116	@ 0x74
 800947c:	4614      	mov	r4, r2
 800947e:	4698      	mov	r8, r3
 8009480:	4606      	mov	r6, r0
 8009482:	b118      	cbz	r0, 800948c <_vfiprintf_r+0x18>
 8009484:	6a03      	ldr	r3, [r0, #32]
 8009486:	b90b      	cbnz	r3, 800948c <_vfiprintf_r+0x18>
 8009488:	f7ff fcca 	bl	8008e20 <__sinit>
 800948c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800948e:	07d9      	lsls	r1, r3, #31
 8009490:	d405      	bmi.n	800949e <_vfiprintf_r+0x2a>
 8009492:	89ab      	ldrh	r3, [r5, #12]
 8009494:	059a      	lsls	r2, r3, #22
 8009496:	d402      	bmi.n	800949e <_vfiprintf_r+0x2a>
 8009498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800949a:	f7ff feb8 	bl	800920e <__retarget_lock_acquire_recursive>
 800949e:	89ab      	ldrh	r3, [r5, #12]
 80094a0:	071b      	lsls	r3, r3, #28
 80094a2:	d501      	bpl.n	80094a8 <_vfiprintf_r+0x34>
 80094a4:	692b      	ldr	r3, [r5, #16]
 80094a6:	b99b      	cbnz	r3, 80094d0 <_vfiprintf_r+0x5c>
 80094a8:	4629      	mov	r1, r5
 80094aa:	4630      	mov	r0, r6
 80094ac:	f7ff fde0 	bl	8009070 <__swsetup_r>
 80094b0:	b170      	cbz	r0, 80094d0 <_vfiprintf_r+0x5c>
 80094b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094b4:	07dc      	lsls	r4, r3, #31
 80094b6:	d504      	bpl.n	80094c2 <_vfiprintf_r+0x4e>
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295
 80094bc:	b01d      	add	sp, #116	@ 0x74
 80094be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c2:	89ab      	ldrh	r3, [r5, #12]
 80094c4:	0598      	lsls	r0, r3, #22
 80094c6:	d4f7      	bmi.n	80094b8 <_vfiprintf_r+0x44>
 80094c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094ca:	f7ff fea1 	bl	8009210 <__retarget_lock_release_recursive>
 80094ce:	e7f3      	b.n	80094b8 <_vfiprintf_r+0x44>
 80094d0:	2300      	movs	r3, #0
 80094d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80094d4:	2320      	movs	r3, #32
 80094d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094da:	f8cd 800c 	str.w	r8, [sp, #12]
 80094de:	2330      	movs	r3, #48	@ 0x30
 80094e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009690 <_vfiprintf_r+0x21c>
 80094e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094e8:	f04f 0901 	mov.w	r9, #1
 80094ec:	4623      	mov	r3, r4
 80094ee:	469a      	mov	sl, r3
 80094f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094f4:	b10a      	cbz	r2, 80094fa <_vfiprintf_r+0x86>
 80094f6:	2a25      	cmp	r2, #37	@ 0x25
 80094f8:	d1f9      	bne.n	80094ee <_vfiprintf_r+0x7a>
 80094fa:	ebba 0b04 	subs.w	fp, sl, r4
 80094fe:	d00b      	beq.n	8009518 <_vfiprintf_r+0xa4>
 8009500:	465b      	mov	r3, fp
 8009502:	4622      	mov	r2, r4
 8009504:	4629      	mov	r1, r5
 8009506:	4630      	mov	r0, r6
 8009508:	f7ff ffa1 	bl	800944e <__sfputs_r>
 800950c:	3001      	adds	r0, #1
 800950e:	f000 80a7 	beq.w	8009660 <_vfiprintf_r+0x1ec>
 8009512:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009514:	445a      	add	r2, fp
 8009516:	9209      	str	r2, [sp, #36]	@ 0x24
 8009518:	f89a 3000 	ldrb.w	r3, [sl]
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 809f 	beq.w	8009660 <_vfiprintf_r+0x1ec>
 8009522:	2300      	movs	r3, #0
 8009524:	f04f 32ff 	mov.w	r2, #4294967295
 8009528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800952c:	f10a 0a01 	add.w	sl, sl, #1
 8009530:	9304      	str	r3, [sp, #16]
 8009532:	9307      	str	r3, [sp, #28]
 8009534:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009538:	931a      	str	r3, [sp, #104]	@ 0x68
 800953a:	4654      	mov	r4, sl
 800953c:	2205      	movs	r2, #5
 800953e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009542:	4853      	ldr	r0, [pc, #332]	@ (8009690 <_vfiprintf_r+0x21c>)
 8009544:	f7f6 fe64 	bl	8000210 <memchr>
 8009548:	9a04      	ldr	r2, [sp, #16]
 800954a:	b9d8      	cbnz	r0, 8009584 <_vfiprintf_r+0x110>
 800954c:	06d1      	lsls	r1, r2, #27
 800954e:	bf44      	itt	mi
 8009550:	2320      	movmi	r3, #32
 8009552:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009556:	0713      	lsls	r3, r2, #28
 8009558:	bf44      	itt	mi
 800955a:	232b      	movmi	r3, #43	@ 0x2b
 800955c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009560:	f89a 3000 	ldrb.w	r3, [sl]
 8009564:	2b2a      	cmp	r3, #42	@ 0x2a
 8009566:	d015      	beq.n	8009594 <_vfiprintf_r+0x120>
 8009568:	9a07      	ldr	r2, [sp, #28]
 800956a:	4654      	mov	r4, sl
 800956c:	2000      	movs	r0, #0
 800956e:	f04f 0c0a 	mov.w	ip, #10
 8009572:	4621      	mov	r1, r4
 8009574:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009578:	3b30      	subs	r3, #48	@ 0x30
 800957a:	2b09      	cmp	r3, #9
 800957c:	d94b      	bls.n	8009616 <_vfiprintf_r+0x1a2>
 800957e:	b1b0      	cbz	r0, 80095ae <_vfiprintf_r+0x13a>
 8009580:	9207      	str	r2, [sp, #28]
 8009582:	e014      	b.n	80095ae <_vfiprintf_r+0x13a>
 8009584:	eba0 0308 	sub.w	r3, r0, r8
 8009588:	fa09 f303 	lsl.w	r3, r9, r3
 800958c:	4313      	orrs	r3, r2
 800958e:	9304      	str	r3, [sp, #16]
 8009590:	46a2      	mov	sl, r4
 8009592:	e7d2      	b.n	800953a <_vfiprintf_r+0xc6>
 8009594:	9b03      	ldr	r3, [sp, #12]
 8009596:	1d19      	adds	r1, r3, #4
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	9103      	str	r1, [sp, #12]
 800959c:	2b00      	cmp	r3, #0
 800959e:	bfbb      	ittet	lt
 80095a0:	425b      	neglt	r3, r3
 80095a2:	f042 0202 	orrlt.w	r2, r2, #2
 80095a6:	9307      	strge	r3, [sp, #28]
 80095a8:	9307      	strlt	r3, [sp, #28]
 80095aa:	bfb8      	it	lt
 80095ac:	9204      	strlt	r2, [sp, #16]
 80095ae:	7823      	ldrb	r3, [r4, #0]
 80095b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80095b2:	d10a      	bne.n	80095ca <_vfiprintf_r+0x156>
 80095b4:	7863      	ldrb	r3, [r4, #1]
 80095b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80095b8:	d132      	bne.n	8009620 <_vfiprintf_r+0x1ac>
 80095ba:	9b03      	ldr	r3, [sp, #12]
 80095bc:	1d1a      	adds	r2, r3, #4
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	9203      	str	r2, [sp, #12]
 80095c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095c6:	3402      	adds	r4, #2
 80095c8:	9305      	str	r3, [sp, #20]
 80095ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80096a0 <_vfiprintf_r+0x22c>
 80095ce:	7821      	ldrb	r1, [r4, #0]
 80095d0:	2203      	movs	r2, #3
 80095d2:	4650      	mov	r0, sl
 80095d4:	f7f6 fe1c 	bl	8000210 <memchr>
 80095d8:	b138      	cbz	r0, 80095ea <_vfiprintf_r+0x176>
 80095da:	9b04      	ldr	r3, [sp, #16]
 80095dc:	eba0 000a 	sub.w	r0, r0, sl
 80095e0:	2240      	movs	r2, #64	@ 0x40
 80095e2:	4082      	lsls	r2, r0
 80095e4:	4313      	orrs	r3, r2
 80095e6:	3401      	adds	r4, #1
 80095e8:	9304      	str	r3, [sp, #16]
 80095ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ee:	4829      	ldr	r0, [pc, #164]	@ (8009694 <_vfiprintf_r+0x220>)
 80095f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095f4:	2206      	movs	r2, #6
 80095f6:	f7f6 fe0b 	bl	8000210 <memchr>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	d03f      	beq.n	800967e <_vfiprintf_r+0x20a>
 80095fe:	4b26      	ldr	r3, [pc, #152]	@ (8009698 <_vfiprintf_r+0x224>)
 8009600:	bb1b      	cbnz	r3, 800964a <_vfiprintf_r+0x1d6>
 8009602:	9b03      	ldr	r3, [sp, #12]
 8009604:	3307      	adds	r3, #7
 8009606:	f023 0307 	bic.w	r3, r3, #7
 800960a:	3308      	adds	r3, #8
 800960c:	9303      	str	r3, [sp, #12]
 800960e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009610:	443b      	add	r3, r7
 8009612:	9309      	str	r3, [sp, #36]	@ 0x24
 8009614:	e76a      	b.n	80094ec <_vfiprintf_r+0x78>
 8009616:	fb0c 3202 	mla	r2, ip, r2, r3
 800961a:	460c      	mov	r4, r1
 800961c:	2001      	movs	r0, #1
 800961e:	e7a8      	b.n	8009572 <_vfiprintf_r+0xfe>
 8009620:	2300      	movs	r3, #0
 8009622:	3401      	adds	r4, #1
 8009624:	9305      	str	r3, [sp, #20]
 8009626:	4619      	mov	r1, r3
 8009628:	f04f 0c0a 	mov.w	ip, #10
 800962c:	4620      	mov	r0, r4
 800962e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009632:	3a30      	subs	r2, #48	@ 0x30
 8009634:	2a09      	cmp	r2, #9
 8009636:	d903      	bls.n	8009640 <_vfiprintf_r+0x1cc>
 8009638:	2b00      	cmp	r3, #0
 800963a:	d0c6      	beq.n	80095ca <_vfiprintf_r+0x156>
 800963c:	9105      	str	r1, [sp, #20]
 800963e:	e7c4      	b.n	80095ca <_vfiprintf_r+0x156>
 8009640:	fb0c 2101 	mla	r1, ip, r1, r2
 8009644:	4604      	mov	r4, r0
 8009646:	2301      	movs	r3, #1
 8009648:	e7f0      	b.n	800962c <_vfiprintf_r+0x1b8>
 800964a:	ab03      	add	r3, sp, #12
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	462a      	mov	r2, r5
 8009650:	4b12      	ldr	r3, [pc, #72]	@ (800969c <_vfiprintf_r+0x228>)
 8009652:	a904      	add	r1, sp, #16
 8009654:	4630      	mov	r0, r6
 8009656:	f3af 8000 	nop.w
 800965a:	4607      	mov	r7, r0
 800965c:	1c78      	adds	r0, r7, #1
 800965e:	d1d6      	bne.n	800960e <_vfiprintf_r+0x19a>
 8009660:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009662:	07d9      	lsls	r1, r3, #31
 8009664:	d405      	bmi.n	8009672 <_vfiprintf_r+0x1fe>
 8009666:	89ab      	ldrh	r3, [r5, #12]
 8009668:	059a      	lsls	r2, r3, #22
 800966a:	d402      	bmi.n	8009672 <_vfiprintf_r+0x1fe>
 800966c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800966e:	f7ff fdcf 	bl	8009210 <__retarget_lock_release_recursive>
 8009672:	89ab      	ldrh	r3, [r5, #12]
 8009674:	065b      	lsls	r3, r3, #25
 8009676:	f53f af1f 	bmi.w	80094b8 <_vfiprintf_r+0x44>
 800967a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800967c:	e71e      	b.n	80094bc <_vfiprintf_r+0x48>
 800967e:	ab03      	add	r3, sp, #12
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	462a      	mov	r2, r5
 8009684:	4b05      	ldr	r3, [pc, #20]	@ (800969c <_vfiprintf_r+0x228>)
 8009686:	a904      	add	r1, sp, #16
 8009688:	4630      	mov	r0, r6
 800968a:	f000 f879 	bl	8009780 <_printf_i>
 800968e:	e7e4      	b.n	800965a <_vfiprintf_r+0x1e6>
 8009690:	0801f578 	.word	0x0801f578
 8009694:	0801f582 	.word	0x0801f582
 8009698:	00000000 	.word	0x00000000
 800969c:	0800944f 	.word	0x0800944f
 80096a0:	0801f57e 	.word	0x0801f57e

080096a4 <_printf_common>:
 80096a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096a8:	4616      	mov	r6, r2
 80096aa:	4698      	mov	r8, r3
 80096ac:	688a      	ldr	r2, [r1, #8]
 80096ae:	690b      	ldr	r3, [r1, #16]
 80096b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80096b4:	4293      	cmp	r3, r2
 80096b6:	bfb8      	it	lt
 80096b8:	4613      	movlt	r3, r2
 80096ba:	6033      	str	r3, [r6, #0]
 80096bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80096c0:	4607      	mov	r7, r0
 80096c2:	460c      	mov	r4, r1
 80096c4:	b10a      	cbz	r2, 80096ca <_printf_common+0x26>
 80096c6:	3301      	adds	r3, #1
 80096c8:	6033      	str	r3, [r6, #0]
 80096ca:	6823      	ldr	r3, [r4, #0]
 80096cc:	0699      	lsls	r1, r3, #26
 80096ce:	bf42      	ittt	mi
 80096d0:	6833      	ldrmi	r3, [r6, #0]
 80096d2:	3302      	addmi	r3, #2
 80096d4:	6033      	strmi	r3, [r6, #0]
 80096d6:	6825      	ldr	r5, [r4, #0]
 80096d8:	f015 0506 	ands.w	r5, r5, #6
 80096dc:	d106      	bne.n	80096ec <_printf_common+0x48>
 80096de:	f104 0a19 	add.w	sl, r4, #25
 80096e2:	68e3      	ldr	r3, [r4, #12]
 80096e4:	6832      	ldr	r2, [r6, #0]
 80096e6:	1a9b      	subs	r3, r3, r2
 80096e8:	42ab      	cmp	r3, r5
 80096ea:	dc26      	bgt.n	800973a <_printf_common+0x96>
 80096ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80096f0:	6822      	ldr	r2, [r4, #0]
 80096f2:	3b00      	subs	r3, #0
 80096f4:	bf18      	it	ne
 80096f6:	2301      	movne	r3, #1
 80096f8:	0692      	lsls	r2, r2, #26
 80096fa:	d42b      	bmi.n	8009754 <_printf_common+0xb0>
 80096fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009700:	4641      	mov	r1, r8
 8009702:	4638      	mov	r0, r7
 8009704:	47c8      	blx	r9
 8009706:	3001      	adds	r0, #1
 8009708:	d01e      	beq.n	8009748 <_printf_common+0xa4>
 800970a:	6823      	ldr	r3, [r4, #0]
 800970c:	6922      	ldr	r2, [r4, #16]
 800970e:	f003 0306 	and.w	r3, r3, #6
 8009712:	2b04      	cmp	r3, #4
 8009714:	bf02      	ittt	eq
 8009716:	68e5      	ldreq	r5, [r4, #12]
 8009718:	6833      	ldreq	r3, [r6, #0]
 800971a:	1aed      	subeq	r5, r5, r3
 800971c:	68a3      	ldr	r3, [r4, #8]
 800971e:	bf0c      	ite	eq
 8009720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009724:	2500      	movne	r5, #0
 8009726:	4293      	cmp	r3, r2
 8009728:	bfc4      	itt	gt
 800972a:	1a9b      	subgt	r3, r3, r2
 800972c:	18ed      	addgt	r5, r5, r3
 800972e:	2600      	movs	r6, #0
 8009730:	341a      	adds	r4, #26
 8009732:	42b5      	cmp	r5, r6
 8009734:	d11a      	bne.n	800976c <_printf_common+0xc8>
 8009736:	2000      	movs	r0, #0
 8009738:	e008      	b.n	800974c <_printf_common+0xa8>
 800973a:	2301      	movs	r3, #1
 800973c:	4652      	mov	r2, sl
 800973e:	4641      	mov	r1, r8
 8009740:	4638      	mov	r0, r7
 8009742:	47c8      	blx	r9
 8009744:	3001      	adds	r0, #1
 8009746:	d103      	bne.n	8009750 <_printf_common+0xac>
 8009748:	f04f 30ff 	mov.w	r0, #4294967295
 800974c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009750:	3501      	adds	r5, #1
 8009752:	e7c6      	b.n	80096e2 <_printf_common+0x3e>
 8009754:	18e1      	adds	r1, r4, r3
 8009756:	1c5a      	adds	r2, r3, #1
 8009758:	2030      	movs	r0, #48	@ 0x30
 800975a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800975e:	4422      	add	r2, r4
 8009760:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009764:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009768:	3302      	adds	r3, #2
 800976a:	e7c7      	b.n	80096fc <_printf_common+0x58>
 800976c:	2301      	movs	r3, #1
 800976e:	4622      	mov	r2, r4
 8009770:	4641      	mov	r1, r8
 8009772:	4638      	mov	r0, r7
 8009774:	47c8      	blx	r9
 8009776:	3001      	adds	r0, #1
 8009778:	d0e6      	beq.n	8009748 <_printf_common+0xa4>
 800977a:	3601      	adds	r6, #1
 800977c:	e7d9      	b.n	8009732 <_printf_common+0x8e>
	...

08009780 <_printf_i>:
 8009780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009784:	7e0f      	ldrb	r7, [r1, #24]
 8009786:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009788:	2f78      	cmp	r7, #120	@ 0x78
 800978a:	4691      	mov	r9, r2
 800978c:	4680      	mov	r8, r0
 800978e:	460c      	mov	r4, r1
 8009790:	469a      	mov	sl, r3
 8009792:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009796:	d807      	bhi.n	80097a8 <_printf_i+0x28>
 8009798:	2f62      	cmp	r7, #98	@ 0x62
 800979a:	d80a      	bhi.n	80097b2 <_printf_i+0x32>
 800979c:	2f00      	cmp	r7, #0
 800979e:	f000 80d1 	beq.w	8009944 <_printf_i+0x1c4>
 80097a2:	2f58      	cmp	r7, #88	@ 0x58
 80097a4:	f000 80b8 	beq.w	8009918 <_printf_i+0x198>
 80097a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80097b0:	e03a      	b.n	8009828 <_printf_i+0xa8>
 80097b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80097b6:	2b15      	cmp	r3, #21
 80097b8:	d8f6      	bhi.n	80097a8 <_printf_i+0x28>
 80097ba:	a101      	add	r1, pc, #4	@ (adr r1, 80097c0 <_printf_i+0x40>)
 80097bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097c0:	08009819 	.word	0x08009819
 80097c4:	0800982d 	.word	0x0800982d
 80097c8:	080097a9 	.word	0x080097a9
 80097cc:	080097a9 	.word	0x080097a9
 80097d0:	080097a9 	.word	0x080097a9
 80097d4:	080097a9 	.word	0x080097a9
 80097d8:	0800982d 	.word	0x0800982d
 80097dc:	080097a9 	.word	0x080097a9
 80097e0:	080097a9 	.word	0x080097a9
 80097e4:	080097a9 	.word	0x080097a9
 80097e8:	080097a9 	.word	0x080097a9
 80097ec:	0800992b 	.word	0x0800992b
 80097f0:	08009857 	.word	0x08009857
 80097f4:	080098e5 	.word	0x080098e5
 80097f8:	080097a9 	.word	0x080097a9
 80097fc:	080097a9 	.word	0x080097a9
 8009800:	0800994d 	.word	0x0800994d
 8009804:	080097a9 	.word	0x080097a9
 8009808:	08009857 	.word	0x08009857
 800980c:	080097a9 	.word	0x080097a9
 8009810:	080097a9 	.word	0x080097a9
 8009814:	080098ed 	.word	0x080098ed
 8009818:	6833      	ldr	r3, [r6, #0]
 800981a:	1d1a      	adds	r2, r3, #4
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	6032      	str	r2, [r6, #0]
 8009820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009824:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009828:	2301      	movs	r3, #1
 800982a:	e09c      	b.n	8009966 <_printf_i+0x1e6>
 800982c:	6833      	ldr	r3, [r6, #0]
 800982e:	6820      	ldr	r0, [r4, #0]
 8009830:	1d19      	adds	r1, r3, #4
 8009832:	6031      	str	r1, [r6, #0]
 8009834:	0606      	lsls	r6, r0, #24
 8009836:	d501      	bpl.n	800983c <_printf_i+0xbc>
 8009838:	681d      	ldr	r5, [r3, #0]
 800983a:	e003      	b.n	8009844 <_printf_i+0xc4>
 800983c:	0645      	lsls	r5, r0, #25
 800983e:	d5fb      	bpl.n	8009838 <_printf_i+0xb8>
 8009840:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009844:	2d00      	cmp	r5, #0
 8009846:	da03      	bge.n	8009850 <_printf_i+0xd0>
 8009848:	232d      	movs	r3, #45	@ 0x2d
 800984a:	426d      	negs	r5, r5
 800984c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009850:	4858      	ldr	r0, [pc, #352]	@ (80099b4 <_printf_i+0x234>)
 8009852:	230a      	movs	r3, #10
 8009854:	e011      	b.n	800987a <_printf_i+0xfa>
 8009856:	6821      	ldr	r1, [r4, #0]
 8009858:	6833      	ldr	r3, [r6, #0]
 800985a:	0608      	lsls	r0, r1, #24
 800985c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009860:	d402      	bmi.n	8009868 <_printf_i+0xe8>
 8009862:	0649      	lsls	r1, r1, #25
 8009864:	bf48      	it	mi
 8009866:	b2ad      	uxthmi	r5, r5
 8009868:	2f6f      	cmp	r7, #111	@ 0x6f
 800986a:	4852      	ldr	r0, [pc, #328]	@ (80099b4 <_printf_i+0x234>)
 800986c:	6033      	str	r3, [r6, #0]
 800986e:	bf14      	ite	ne
 8009870:	230a      	movne	r3, #10
 8009872:	2308      	moveq	r3, #8
 8009874:	2100      	movs	r1, #0
 8009876:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800987a:	6866      	ldr	r6, [r4, #4]
 800987c:	60a6      	str	r6, [r4, #8]
 800987e:	2e00      	cmp	r6, #0
 8009880:	db05      	blt.n	800988e <_printf_i+0x10e>
 8009882:	6821      	ldr	r1, [r4, #0]
 8009884:	432e      	orrs	r6, r5
 8009886:	f021 0104 	bic.w	r1, r1, #4
 800988a:	6021      	str	r1, [r4, #0]
 800988c:	d04b      	beq.n	8009926 <_printf_i+0x1a6>
 800988e:	4616      	mov	r6, r2
 8009890:	fbb5 f1f3 	udiv	r1, r5, r3
 8009894:	fb03 5711 	mls	r7, r3, r1, r5
 8009898:	5dc7      	ldrb	r7, [r0, r7]
 800989a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800989e:	462f      	mov	r7, r5
 80098a0:	42bb      	cmp	r3, r7
 80098a2:	460d      	mov	r5, r1
 80098a4:	d9f4      	bls.n	8009890 <_printf_i+0x110>
 80098a6:	2b08      	cmp	r3, #8
 80098a8:	d10b      	bne.n	80098c2 <_printf_i+0x142>
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	07df      	lsls	r7, r3, #31
 80098ae:	d508      	bpl.n	80098c2 <_printf_i+0x142>
 80098b0:	6923      	ldr	r3, [r4, #16]
 80098b2:	6861      	ldr	r1, [r4, #4]
 80098b4:	4299      	cmp	r1, r3
 80098b6:	bfde      	ittt	le
 80098b8:	2330      	movle	r3, #48	@ 0x30
 80098ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80098be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80098c2:	1b92      	subs	r2, r2, r6
 80098c4:	6122      	str	r2, [r4, #16]
 80098c6:	f8cd a000 	str.w	sl, [sp]
 80098ca:	464b      	mov	r3, r9
 80098cc:	aa03      	add	r2, sp, #12
 80098ce:	4621      	mov	r1, r4
 80098d0:	4640      	mov	r0, r8
 80098d2:	f7ff fee7 	bl	80096a4 <_printf_common>
 80098d6:	3001      	adds	r0, #1
 80098d8:	d14a      	bne.n	8009970 <_printf_i+0x1f0>
 80098da:	f04f 30ff 	mov.w	r0, #4294967295
 80098de:	b004      	add	sp, #16
 80098e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e4:	6823      	ldr	r3, [r4, #0]
 80098e6:	f043 0320 	orr.w	r3, r3, #32
 80098ea:	6023      	str	r3, [r4, #0]
 80098ec:	4832      	ldr	r0, [pc, #200]	@ (80099b8 <_printf_i+0x238>)
 80098ee:	2778      	movs	r7, #120	@ 0x78
 80098f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80098f4:	6823      	ldr	r3, [r4, #0]
 80098f6:	6831      	ldr	r1, [r6, #0]
 80098f8:	061f      	lsls	r7, r3, #24
 80098fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80098fe:	d402      	bmi.n	8009906 <_printf_i+0x186>
 8009900:	065f      	lsls	r7, r3, #25
 8009902:	bf48      	it	mi
 8009904:	b2ad      	uxthmi	r5, r5
 8009906:	6031      	str	r1, [r6, #0]
 8009908:	07d9      	lsls	r1, r3, #31
 800990a:	bf44      	itt	mi
 800990c:	f043 0320 	orrmi.w	r3, r3, #32
 8009910:	6023      	strmi	r3, [r4, #0]
 8009912:	b11d      	cbz	r5, 800991c <_printf_i+0x19c>
 8009914:	2310      	movs	r3, #16
 8009916:	e7ad      	b.n	8009874 <_printf_i+0xf4>
 8009918:	4826      	ldr	r0, [pc, #152]	@ (80099b4 <_printf_i+0x234>)
 800991a:	e7e9      	b.n	80098f0 <_printf_i+0x170>
 800991c:	6823      	ldr	r3, [r4, #0]
 800991e:	f023 0320 	bic.w	r3, r3, #32
 8009922:	6023      	str	r3, [r4, #0]
 8009924:	e7f6      	b.n	8009914 <_printf_i+0x194>
 8009926:	4616      	mov	r6, r2
 8009928:	e7bd      	b.n	80098a6 <_printf_i+0x126>
 800992a:	6833      	ldr	r3, [r6, #0]
 800992c:	6825      	ldr	r5, [r4, #0]
 800992e:	6961      	ldr	r1, [r4, #20]
 8009930:	1d18      	adds	r0, r3, #4
 8009932:	6030      	str	r0, [r6, #0]
 8009934:	062e      	lsls	r6, r5, #24
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	d501      	bpl.n	800993e <_printf_i+0x1be>
 800993a:	6019      	str	r1, [r3, #0]
 800993c:	e002      	b.n	8009944 <_printf_i+0x1c4>
 800993e:	0668      	lsls	r0, r5, #25
 8009940:	d5fb      	bpl.n	800993a <_printf_i+0x1ba>
 8009942:	8019      	strh	r1, [r3, #0]
 8009944:	2300      	movs	r3, #0
 8009946:	6123      	str	r3, [r4, #16]
 8009948:	4616      	mov	r6, r2
 800994a:	e7bc      	b.n	80098c6 <_printf_i+0x146>
 800994c:	6833      	ldr	r3, [r6, #0]
 800994e:	1d1a      	adds	r2, r3, #4
 8009950:	6032      	str	r2, [r6, #0]
 8009952:	681e      	ldr	r6, [r3, #0]
 8009954:	6862      	ldr	r2, [r4, #4]
 8009956:	2100      	movs	r1, #0
 8009958:	4630      	mov	r0, r6
 800995a:	f7f6 fc59 	bl	8000210 <memchr>
 800995e:	b108      	cbz	r0, 8009964 <_printf_i+0x1e4>
 8009960:	1b80      	subs	r0, r0, r6
 8009962:	6060      	str	r0, [r4, #4]
 8009964:	6863      	ldr	r3, [r4, #4]
 8009966:	6123      	str	r3, [r4, #16]
 8009968:	2300      	movs	r3, #0
 800996a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800996e:	e7aa      	b.n	80098c6 <_printf_i+0x146>
 8009970:	6923      	ldr	r3, [r4, #16]
 8009972:	4632      	mov	r2, r6
 8009974:	4649      	mov	r1, r9
 8009976:	4640      	mov	r0, r8
 8009978:	47d0      	blx	sl
 800997a:	3001      	adds	r0, #1
 800997c:	d0ad      	beq.n	80098da <_printf_i+0x15a>
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	079b      	lsls	r3, r3, #30
 8009982:	d413      	bmi.n	80099ac <_printf_i+0x22c>
 8009984:	68e0      	ldr	r0, [r4, #12]
 8009986:	9b03      	ldr	r3, [sp, #12]
 8009988:	4298      	cmp	r0, r3
 800998a:	bfb8      	it	lt
 800998c:	4618      	movlt	r0, r3
 800998e:	e7a6      	b.n	80098de <_printf_i+0x15e>
 8009990:	2301      	movs	r3, #1
 8009992:	4632      	mov	r2, r6
 8009994:	4649      	mov	r1, r9
 8009996:	4640      	mov	r0, r8
 8009998:	47d0      	blx	sl
 800999a:	3001      	adds	r0, #1
 800999c:	d09d      	beq.n	80098da <_printf_i+0x15a>
 800999e:	3501      	adds	r5, #1
 80099a0:	68e3      	ldr	r3, [r4, #12]
 80099a2:	9903      	ldr	r1, [sp, #12]
 80099a4:	1a5b      	subs	r3, r3, r1
 80099a6:	42ab      	cmp	r3, r5
 80099a8:	dcf2      	bgt.n	8009990 <_printf_i+0x210>
 80099aa:	e7eb      	b.n	8009984 <_printf_i+0x204>
 80099ac:	2500      	movs	r5, #0
 80099ae:	f104 0619 	add.w	r6, r4, #25
 80099b2:	e7f5      	b.n	80099a0 <_printf_i+0x220>
 80099b4:	0801f589 	.word	0x0801f589
 80099b8:	0801f59a 	.word	0x0801f59a

080099bc <__sflush_r>:
 80099bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c4:	0716      	lsls	r6, r2, #28
 80099c6:	4605      	mov	r5, r0
 80099c8:	460c      	mov	r4, r1
 80099ca:	d454      	bmi.n	8009a76 <__sflush_r+0xba>
 80099cc:	684b      	ldr	r3, [r1, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	dc02      	bgt.n	80099d8 <__sflush_r+0x1c>
 80099d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	dd48      	ble.n	8009a6a <__sflush_r+0xae>
 80099d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099da:	2e00      	cmp	r6, #0
 80099dc:	d045      	beq.n	8009a6a <__sflush_r+0xae>
 80099de:	2300      	movs	r3, #0
 80099e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80099e4:	682f      	ldr	r7, [r5, #0]
 80099e6:	6a21      	ldr	r1, [r4, #32]
 80099e8:	602b      	str	r3, [r5, #0]
 80099ea:	d030      	beq.n	8009a4e <__sflush_r+0x92>
 80099ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80099ee:	89a3      	ldrh	r3, [r4, #12]
 80099f0:	0759      	lsls	r1, r3, #29
 80099f2:	d505      	bpl.n	8009a00 <__sflush_r+0x44>
 80099f4:	6863      	ldr	r3, [r4, #4]
 80099f6:	1ad2      	subs	r2, r2, r3
 80099f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80099fa:	b10b      	cbz	r3, 8009a00 <__sflush_r+0x44>
 80099fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80099fe:	1ad2      	subs	r2, r2, r3
 8009a00:	2300      	movs	r3, #0
 8009a02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a04:	6a21      	ldr	r1, [r4, #32]
 8009a06:	4628      	mov	r0, r5
 8009a08:	47b0      	blx	r6
 8009a0a:	1c43      	adds	r3, r0, #1
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	d106      	bne.n	8009a1e <__sflush_r+0x62>
 8009a10:	6829      	ldr	r1, [r5, #0]
 8009a12:	291d      	cmp	r1, #29
 8009a14:	d82b      	bhi.n	8009a6e <__sflush_r+0xb2>
 8009a16:	4a2a      	ldr	r2, [pc, #168]	@ (8009ac0 <__sflush_r+0x104>)
 8009a18:	40ca      	lsrs	r2, r1
 8009a1a:	07d6      	lsls	r6, r2, #31
 8009a1c:	d527      	bpl.n	8009a6e <__sflush_r+0xb2>
 8009a1e:	2200      	movs	r2, #0
 8009a20:	6062      	str	r2, [r4, #4]
 8009a22:	04d9      	lsls	r1, r3, #19
 8009a24:	6922      	ldr	r2, [r4, #16]
 8009a26:	6022      	str	r2, [r4, #0]
 8009a28:	d504      	bpl.n	8009a34 <__sflush_r+0x78>
 8009a2a:	1c42      	adds	r2, r0, #1
 8009a2c:	d101      	bne.n	8009a32 <__sflush_r+0x76>
 8009a2e:	682b      	ldr	r3, [r5, #0]
 8009a30:	b903      	cbnz	r3, 8009a34 <__sflush_r+0x78>
 8009a32:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a36:	602f      	str	r7, [r5, #0]
 8009a38:	b1b9      	cbz	r1, 8009a6a <__sflush_r+0xae>
 8009a3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a3e:	4299      	cmp	r1, r3
 8009a40:	d002      	beq.n	8009a48 <__sflush_r+0x8c>
 8009a42:	4628      	mov	r0, r5
 8009a44:	f7ff fbf4 	bl	8009230 <_free_r>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a4c:	e00d      	b.n	8009a6a <__sflush_r+0xae>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	4628      	mov	r0, r5
 8009a52:	47b0      	blx	r6
 8009a54:	4602      	mov	r2, r0
 8009a56:	1c50      	adds	r0, r2, #1
 8009a58:	d1c9      	bne.n	80099ee <__sflush_r+0x32>
 8009a5a:	682b      	ldr	r3, [r5, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d0c6      	beq.n	80099ee <__sflush_r+0x32>
 8009a60:	2b1d      	cmp	r3, #29
 8009a62:	d001      	beq.n	8009a68 <__sflush_r+0xac>
 8009a64:	2b16      	cmp	r3, #22
 8009a66:	d11e      	bne.n	8009aa6 <__sflush_r+0xea>
 8009a68:	602f      	str	r7, [r5, #0]
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	e022      	b.n	8009ab4 <__sflush_r+0xf8>
 8009a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a72:	b21b      	sxth	r3, r3
 8009a74:	e01b      	b.n	8009aae <__sflush_r+0xf2>
 8009a76:	690f      	ldr	r7, [r1, #16]
 8009a78:	2f00      	cmp	r7, #0
 8009a7a:	d0f6      	beq.n	8009a6a <__sflush_r+0xae>
 8009a7c:	0793      	lsls	r3, r2, #30
 8009a7e:	680e      	ldr	r6, [r1, #0]
 8009a80:	bf08      	it	eq
 8009a82:	694b      	ldreq	r3, [r1, #20]
 8009a84:	600f      	str	r7, [r1, #0]
 8009a86:	bf18      	it	ne
 8009a88:	2300      	movne	r3, #0
 8009a8a:	eba6 0807 	sub.w	r8, r6, r7
 8009a8e:	608b      	str	r3, [r1, #8]
 8009a90:	f1b8 0f00 	cmp.w	r8, #0
 8009a94:	dde9      	ble.n	8009a6a <__sflush_r+0xae>
 8009a96:	6a21      	ldr	r1, [r4, #32]
 8009a98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009a9a:	4643      	mov	r3, r8
 8009a9c:	463a      	mov	r2, r7
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	47b0      	blx	r6
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	dc08      	bgt.n	8009ab8 <__sflush_r+0xfc>
 8009aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aae:	81a3      	strh	r3, [r4, #12]
 8009ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ab8:	4407      	add	r7, r0
 8009aba:	eba8 0800 	sub.w	r8, r8, r0
 8009abe:	e7e7      	b.n	8009a90 <__sflush_r+0xd4>
 8009ac0:	20400001 	.word	0x20400001

08009ac4 <_fflush_r>:
 8009ac4:	b538      	push	{r3, r4, r5, lr}
 8009ac6:	690b      	ldr	r3, [r1, #16]
 8009ac8:	4605      	mov	r5, r0
 8009aca:	460c      	mov	r4, r1
 8009acc:	b913      	cbnz	r3, 8009ad4 <_fflush_r+0x10>
 8009ace:	2500      	movs	r5, #0
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	bd38      	pop	{r3, r4, r5, pc}
 8009ad4:	b118      	cbz	r0, 8009ade <_fflush_r+0x1a>
 8009ad6:	6a03      	ldr	r3, [r0, #32]
 8009ad8:	b90b      	cbnz	r3, 8009ade <_fflush_r+0x1a>
 8009ada:	f7ff f9a1 	bl	8008e20 <__sinit>
 8009ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d0f3      	beq.n	8009ace <_fflush_r+0xa>
 8009ae6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ae8:	07d0      	lsls	r0, r2, #31
 8009aea:	d404      	bmi.n	8009af6 <_fflush_r+0x32>
 8009aec:	0599      	lsls	r1, r3, #22
 8009aee:	d402      	bmi.n	8009af6 <_fflush_r+0x32>
 8009af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009af2:	f7ff fb8c 	bl	800920e <__retarget_lock_acquire_recursive>
 8009af6:	4628      	mov	r0, r5
 8009af8:	4621      	mov	r1, r4
 8009afa:	f7ff ff5f 	bl	80099bc <__sflush_r>
 8009afe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b00:	07da      	lsls	r2, r3, #31
 8009b02:	4605      	mov	r5, r0
 8009b04:	d4e4      	bmi.n	8009ad0 <_fflush_r+0xc>
 8009b06:	89a3      	ldrh	r3, [r4, #12]
 8009b08:	059b      	lsls	r3, r3, #22
 8009b0a:	d4e1      	bmi.n	8009ad0 <_fflush_r+0xc>
 8009b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b0e:	f7ff fb7f 	bl	8009210 <__retarget_lock_release_recursive>
 8009b12:	e7dd      	b.n	8009ad0 <_fflush_r+0xc>

08009b14 <__swhatbuf_r>:
 8009b14:	b570      	push	{r4, r5, r6, lr}
 8009b16:	460c      	mov	r4, r1
 8009b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b1c:	2900      	cmp	r1, #0
 8009b1e:	b096      	sub	sp, #88	@ 0x58
 8009b20:	4615      	mov	r5, r2
 8009b22:	461e      	mov	r6, r3
 8009b24:	da0d      	bge.n	8009b42 <__swhatbuf_r+0x2e>
 8009b26:	89a3      	ldrh	r3, [r4, #12]
 8009b28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b2c:	f04f 0100 	mov.w	r1, #0
 8009b30:	bf14      	ite	ne
 8009b32:	2340      	movne	r3, #64	@ 0x40
 8009b34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b38:	2000      	movs	r0, #0
 8009b3a:	6031      	str	r1, [r6, #0]
 8009b3c:	602b      	str	r3, [r5, #0]
 8009b3e:	b016      	add	sp, #88	@ 0x58
 8009b40:	bd70      	pop	{r4, r5, r6, pc}
 8009b42:	466a      	mov	r2, sp
 8009b44:	f000 f848 	bl	8009bd8 <_fstat_r>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	dbec      	blt.n	8009b26 <__swhatbuf_r+0x12>
 8009b4c:	9901      	ldr	r1, [sp, #4]
 8009b4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009b52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009b56:	4259      	negs	r1, r3
 8009b58:	4159      	adcs	r1, r3
 8009b5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b5e:	e7eb      	b.n	8009b38 <__swhatbuf_r+0x24>

08009b60 <__smakebuf_r>:
 8009b60:	898b      	ldrh	r3, [r1, #12]
 8009b62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b64:	079d      	lsls	r5, r3, #30
 8009b66:	4606      	mov	r6, r0
 8009b68:	460c      	mov	r4, r1
 8009b6a:	d507      	bpl.n	8009b7c <__smakebuf_r+0x1c>
 8009b6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009b70:	6023      	str	r3, [r4, #0]
 8009b72:	6123      	str	r3, [r4, #16]
 8009b74:	2301      	movs	r3, #1
 8009b76:	6163      	str	r3, [r4, #20]
 8009b78:	b003      	add	sp, #12
 8009b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b7c:	ab01      	add	r3, sp, #4
 8009b7e:	466a      	mov	r2, sp
 8009b80:	f7ff ffc8 	bl	8009b14 <__swhatbuf_r>
 8009b84:	9f00      	ldr	r7, [sp, #0]
 8009b86:	4605      	mov	r5, r0
 8009b88:	4639      	mov	r1, r7
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f7ff fbbc 	bl	8009308 <_malloc_r>
 8009b90:	b948      	cbnz	r0, 8009ba6 <__smakebuf_r+0x46>
 8009b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b96:	059a      	lsls	r2, r3, #22
 8009b98:	d4ee      	bmi.n	8009b78 <__smakebuf_r+0x18>
 8009b9a:	f023 0303 	bic.w	r3, r3, #3
 8009b9e:	f043 0302 	orr.w	r3, r3, #2
 8009ba2:	81a3      	strh	r3, [r4, #12]
 8009ba4:	e7e2      	b.n	8009b6c <__smakebuf_r+0xc>
 8009ba6:	89a3      	ldrh	r3, [r4, #12]
 8009ba8:	6020      	str	r0, [r4, #0]
 8009baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bae:	81a3      	strh	r3, [r4, #12]
 8009bb0:	9b01      	ldr	r3, [sp, #4]
 8009bb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009bb6:	b15b      	cbz	r3, 8009bd0 <__smakebuf_r+0x70>
 8009bb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	f000 f81d 	bl	8009bfc <_isatty_r>
 8009bc2:	b128      	cbz	r0, 8009bd0 <__smakebuf_r+0x70>
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	f023 0303 	bic.w	r3, r3, #3
 8009bca:	f043 0301 	orr.w	r3, r3, #1
 8009bce:	81a3      	strh	r3, [r4, #12]
 8009bd0:	89a3      	ldrh	r3, [r4, #12]
 8009bd2:	431d      	orrs	r5, r3
 8009bd4:	81a5      	strh	r5, [r4, #12]
 8009bd6:	e7cf      	b.n	8009b78 <__smakebuf_r+0x18>

08009bd8 <_fstat_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	4d07      	ldr	r5, [pc, #28]	@ (8009bf8 <_fstat_r+0x20>)
 8009bdc:	2300      	movs	r3, #0
 8009bde:	4604      	mov	r4, r0
 8009be0:	4608      	mov	r0, r1
 8009be2:	4611      	mov	r1, r2
 8009be4:	602b      	str	r3, [r5, #0]
 8009be6:	f7f7 fa1f 	bl	8001028 <_fstat>
 8009bea:	1c43      	adds	r3, r0, #1
 8009bec:	d102      	bne.n	8009bf4 <_fstat_r+0x1c>
 8009bee:	682b      	ldr	r3, [r5, #0]
 8009bf0:	b103      	cbz	r3, 8009bf4 <_fstat_r+0x1c>
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	bd38      	pop	{r3, r4, r5, pc}
 8009bf6:	bf00      	nop
 8009bf8:	20000d54 	.word	0x20000d54

08009bfc <_isatty_r>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	4d06      	ldr	r5, [pc, #24]	@ (8009c18 <_isatty_r+0x1c>)
 8009c00:	2300      	movs	r3, #0
 8009c02:	4604      	mov	r4, r0
 8009c04:	4608      	mov	r0, r1
 8009c06:	602b      	str	r3, [r5, #0]
 8009c08:	f7f7 fa1e 	bl	8001048 <_isatty>
 8009c0c:	1c43      	adds	r3, r0, #1
 8009c0e:	d102      	bne.n	8009c16 <_isatty_r+0x1a>
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	b103      	cbz	r3, 8009c16 <_isatty_r+0x1a>
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
 8009c18:	20000d54 	.word	0x20000d54

08009c1c <_sbrk_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	4d06      	ldr	r5, [pc, #24]	@ (8009c38 <_sbrk_r+0x1c>)
 8009c20:	2300      	movs	r3, #0
 8009c22:	4604      	mov	r4, r0
 8009c24:	4608      	mov	r0, r1
 8009c26:	602b      	str	r3, [r5, #0]
 8009c28:	f7f7 fa26 	bl	8001078 <_sbrk>
 8009c2c:	1c43      	adds	r3, r0, #1
 8009c2e:	d102      	bne.n	8009c36 <_sbrk_r+0x1a>
 8009c30:	682b      	ldr	r3, [r5, #0]
 8009c32:	b103      	cbz	r3, 8009c36 <_sbrk_r+0x1a>
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	bd38      	pop	{r3, r4, r5, pc}
 8009c38:	20000d54 	.word	0x20000d54

08009c3c <_init>:
 8009c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3e:	bf00      	nop
 8009c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c42:	bc08      	pop	{r3}
 8009c44:	469e      	mov	lr, r3
 8009c46:	4770      	bx	lr

08009c48 <_fini>:
 8009c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4a:	bf00      	nop
 8009c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4e:	bc08      	pop	{r3}
 8009c50:	469e      	mov	lr, r3
 8009c52:	4770      	bx	lr
